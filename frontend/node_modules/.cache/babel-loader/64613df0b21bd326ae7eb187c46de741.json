{"ast":null,"code":"import { version } from 'react';\nimport ConversationService from '../../services/ConversationService';\nconst ConversationTypes = {\n  GET_CONVERSATIONS: 'GET_CONVERSATIONS',\n  DELETE_CONVERSATION: 'DELETE_CONVERSATION',\n  UPDATE_CONVERSATION: 'UPDATE_CONVERSATION',\n  ADD_CONVERSATION: 'ADD_CONVERSATION',\n  GET_CONVERSATION: 'GET_CONVERSATION'\n};\nexport const addConversation = conversation => {\n  const addConversationAction = () => {\n    return {\n      type: ConversationTypes.ADD_CONVERSATION\n    };\n  };\n\n  const onFailure = err => {\n    console.log(err);\n  };\n\n  return async dispatch => {\n    await ConversationService.createConversation(conversation).then(() => {\n      dispatch(addConversationAction());\n    }).catch(e => {\n      onFailure(e);\n    });\n  };\n};\nexport const getConversations = userId => {\n  // when the backend call was successfull and the conversations are retrieved\n  // in the dispatcher the conversations will be added to the global state\n  const onSuccess = conversations => {\n    return {\n      type: ConversationTypes.GET_CONVERSATIONS,\n      conversations: conversations\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('failed to get the conversations', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      // ask for the conversations in the backend\n      let conversations = await ConversationService.getConversations(userId); // call onSuccess in context of redux\n\n      dispatch(onSuccess(conversations));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getConversation = (id1, id2) => {\n  // when the backend call was successfull and the conversation are retrieved\n  // in the dispatcher the conversation will be added to the global state\n  const onSuccess = conversation => {\n    return {\n      type: ConversationTypes.GET_CONVERSATION,\n      conversation\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('failed to get the conversation', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      // ask for the conversation in the backend\n      let conversation = await ConversationService.getConversation(id1, id2); // call onSuccess in context of redux\n\n      dispatch(onSuccess(conversation));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getOrAddConversation = (id1, id2) => {\n  // when the backend call was successfull and the conversations are retrieved\n  // in the dispatcher the conversations will be added to the global state\n  const onSuccess = conversation => {\n    return {\n      type: ConversationTypes.GET_CONVERSATION,\n      conversation: conversation\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('failed to get the conversation', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      // ask for the conversations in the backend\n      let conversation = await ConversationService.getOrCreateConversation(id1, id2); // call onSuccess in context of redux\n\n      dispatch(onSuccess(conversation));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/conversationActions.js"],"names":["version","ConversationService","ConversationTypes","GET_CONVERSATIONS","DELETE_CONVERSATION","UPDATE_CONVERSATION","ADD_CONVERSATION","GET_CONVERSATION","addConversation","conversation","addConversationAction","type","onFailure","err","console","log","dispatch","createConversation","then","catch","e","getConversations","userId","onSuccess","conversations","error","getState","getConversation","id1","id2","getOrAddConversation","getOrCreateConversation"],"mappings":"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","sourcesContent":["import { version } from 'react';\nimport ConversationService from '../../services/ConversationService';\n\nconst ConversationTypes = {\n    GET_CONVERSATIONS: 'GET_CONVERSATIONS',\n    DELETE_CONVERSATION: 'DELETE_CONVERSATION',\n    UPDATE_CONVERSATION: 'UPDATE_CONVERSATION',\n    ADD_CONVERSATION: 'ADD_CONVERSATION',\n    GET_CONVERSATION: 'GET_CONVERSATION',\n};\n\nexport const addConversation = (conversation) => {\n    const addConversationAction = () => {\n        return { type: ConversationTypes.ADD_CONVERSATION };\n    };\n    const onFailure = (err) => {\n        console.log(err);\n    };\n\n    return async (dispatch) => {\n        await ConversationService.createConversation(conversation)\n            .then(() => {\n                dispatch(addConversationAction());\n            })\n            .catch((e) => {\n                onFailure(e);\n            });\n    };\n};\n\nexport const getConversations = (userId) => {\n    // when the backend call was successfull and the conversations are retrieved\n    // in the dispatcher the conversations will be added to the global state\n    const onSuccess = (conversations) => {\n        return { type: ConversationTypes.GET_CONVERSATIONS, conversations: conversations };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the conversations', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            // ask for the conversations in the backend\n            let conversations = await ConversationService.getConversations(userId);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(conversations));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getConversation = (id1, id2) => {\n    // when the backend call was successfull and the conversation are retrieved\n    // in the dispatcher the conversation will be added to the global state\n    const onSuccess = (conversation) => {\n        return { type: ConversationTypes.GET_CONVERSATION, conversation };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the conversation', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            // ask for the conversation in the backend\n            let conversation = await ConversationService.getConversation(id1, id2);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(conversation));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getOrAddConversation = (id1, id2) => {\n    // when the backend call was successfull and the conversations are retrieved\n    // in the dispatcher the conversations will be added to the global state\n    const onSuccess = (conversation) => {\n        return { type: ConversationTypes.GET_CONVERSATION, conversation: conversation };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the conversation', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            // ask for the conversations in the backend\n            let conversation = await ConversationService.getOrCreateConversation(id1, id2);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(conversation));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}