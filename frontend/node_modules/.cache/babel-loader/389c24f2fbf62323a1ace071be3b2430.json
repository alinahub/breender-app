{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/views/SelectedUserProfileView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useSelector } from \"react-redux\";\nimport UserProfile from \"../components/user-profile/UserProfile\";\nimport { getUser, getSelectedUserPets, getReviewsOnSelectedUser } from 'redux/actions';\nimport { useLocation } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SelectedUserProfileView(props) {\n  _s();\n\n  const location = useLocation();\n  const [isLoading, setIsLoading] = useState(true);\n  const userId = location.pathname.split('/user/')[1]; //get selectedUser, pets and reviews from Redux store\n\n  var selectedUser = useSelector(state => state.user.selectedUser);\n  var pets = useSelector(state => state.user.selectedUserPets);\n  var reviews = useSelector(state => state.user.reviewsOnSelectedUser);\n  useEffect(() => {\n    let loading = true;\n\n    const loadUser = async id => {\n      // trigger the redux action getUser\n      if (!loading) return;\n      await props.dispatch(getUser(id));\n    }; // load user when the page is loaded\n\n\n    loadUser(userId);\n    return () => {\n      loading = false;\n    };\n  }, [props, userId]);\n  useEffect(() => {\n    let loading = true;\n\n    const loadUserPets = async () => {\n      // trigger the redux action getUserPets\n      if (!loading) return;\n      await props.dispatch(getSelectedUserPets(userId));\n    }; // load pets of a user when the page is loaded\n\n\n    loadUserPets();\n    return () => {\n      loading = false;\n    };\n  }, [props, userId]);\n  useEffect(() => {\n    let loading = true;\n\n    const loadReviews = async () => {\n      // trigger the redux action getReviewsOnUser\n      if (!loading) return;\n      await props.dispatch(getReviewsOnSelectedUser(userId));\n    }; // load reviews on a user when the page is loaded\n\n\n    loadReviews();\n    return () => {\n      loading = false;\n    };\n  }, [props, userId]);\n  useEffect(() => {\n    if (selectedUser) setIsLoading(false);\n  }, [selectedUser]);\n  return isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(UserProfile, {\n    user: selectedUser,\n    pets: pets,\n    profileOfLoggedInUser: false,\n    reviews: reviews\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SelectedUserProfileView, \"DXMyONWNwsyRYdF9xeqL1PnhEYc=\", false, function () {\n  return [useLocation, useSelector, useSelector, useSelector];\n});\n\n_c = SelectedUserProfileView;\nexport default connect()(SelectedUserProfileView);\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectedUserProfileView\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/views/SelectedUserProfileView.js"],"names":["React","useEffect","useState","connect","useSelector","UserProfile","getUser","getSelectedUserPets","getReviewsOnSelectedUser","useLocation","Loading","SelectedUserProfileView","props","location","isLoading","setIsLoading","userId","pathname","split","selectedUser","state","user","pets","selectedUserPets","reviews","reviewsOnSelectedUser","loading","loadUser","id","dispatch","loadUserPets","loadReviews"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect, useSelector } from \"react-redux\";\nimport UserProfile from \"../components/user-profile/UserProfile\";\nimport { getUser, getSelectedUserPets, getReviewsOnSelectedUser } from 'redux/actions';\nimport { useLocation } from 'react-router-dom';\nimport Loading from '../components/Loading';\n\nfunction SelectedUserProfileView(props) {\n    const location = useLocation();\n    const [isLoading, setIsLoading] = useState(true);\n\n    const userId = location.pathname.split('/user/')[1];\n    //get selectedUser, pets and reviews from Redux store\n    var selectedUser = useSelector((state) => state.user.selectedUser);\n    var pets = useSelector((state) => state.user.selectedUserPets);\n    var reviews = useSelector((state) => state.user.reviewsOnSelectedUser);\n\n    useEffect(() => {\n        let loading = true;\n\n        const loadUser = async (id) => {\n            // trigger the redux action getUser\n            if (!loading) return;\n            await props.dispatch(getUser(id));\n        };\n        // load user when the page is loaded\n        loadUser(userId);\n\n        return () => {\n            loading = false;\n        };\n    }, [props, userId]);\n\n    useEffect(() => {\n        let loading = true;\n\n        const loadUserPets = async () => {\n            // trigger the redux action getUserPets\n            if (!loading) return;\n            await props.dispatch(getSelectedUserPets(userId));\n        };\n        // load pets of a user when the page is loaded\n        loadUserPets();\n    \n        return () => {\n            loading = false;\n        };\n    }, [props, userId]);\n\n    useEffect(() => {\n        let loading = true;\n\n        const loadReviews = async () => {\n            // trigger the redux action getReviewsOnUser\n            if (!loading) return;\n            await props.dispatch(getReviewsOnSelectedUser(userId));\n        };\n\n        // load reviews on a user when the page is loaded\n        loadReviews();\n    \n        return () => {\n            loading = false;\n        };\n    }, [props, userId]);\n\n    useEffect(() => {\n        if (selectedUser) setIsLoading(false);\n    }, [selectedUser])\n\n    return isLoading ? (\n        <Loading />\n    ) : <UserProfile user={selectedUser} pets={pets} profileOfLoggedInUser={false} reviews={reviews} />\n}\n\nexport default connect()(SelectedUserProfileView);"]},"metadata":{},"sourceType":"module"}