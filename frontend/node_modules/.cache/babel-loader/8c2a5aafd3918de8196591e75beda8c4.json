{"ast":null,"code":"import HttpService from './HttpService';\nexport default class UserService {\n  static baseURL() {\n    return 'http://localhost:4000/auth';\n  }\n\n  static register(email, user, pass, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) {\n    return new Promise((resolve, reject) => {\n      HttpService.post(`${UserService.baseURL()}/register`, {\n        username: user,\n        password: pass,\n        isAdmin: isAdmin,\n        email: email,\n        city: city,\n        province: province,\n        subscriptionPlan: subscriptionPlan,\n        paymentPlan: paymentPlan,\n        paymentMethod: paymentMethod\n      }, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static checkUser(email, username, isAdmin) {\n    return new Promise((resolve, reject) => {\n      HttpService.get(`${UserService.baseURL()}/checkUser/${email}/${username}/${isAdmin}`, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static confirmEmail(email, token) {\n    return new Promise((resolve, reject) => {\n      HttpService.get(`${UserService.baseURL()}/confirmation/${email}/${token}`, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static login(user, pass) {\n    return new Promise((resolve, reject) => {\n      HttpService.post(`${UserService.baseURL()}/login`, {\n        username: user,\n        password: pass\n      }, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static logout() {\n    window.localStorage.removeItem('jwtToken');\n  }\n\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/services/UserService.js"],"names":["HttpService","UserService","baseURL","register","email","user","pass","city","province","isAdmin","subscriptionPlan","paymentPlan","paymentMethod","Promise","resolve","reject","post","username","password","data","textStatus","checkUser","get","confirmEmail","token","login","logout","window","localStorage","removeItem"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AACf,SAAPC,OAAO,GAAG;AACb,WAAO,4BAAP;AACH;;AAEc,SAARC,QAAQ,CAACC,KAAD,EAAQC,IAAR,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,OAApC,EAA6CC,gBAA7C,EAA+DC,WAA/D,EAA4EC,aAA5E,EAA2F;AACtG,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCf,MAAAA,WAAW,CAACgB,IAAZ,CACK,GAAEf,WAAW,CAACC,OAAZ,EAAsB,WAD7B,EAEI;AACIe,QAAAA,QAAQ,EAAEZ,IADd;AAEIa,QAAAA,QAAQ,EAAEZ,IAFd;AAGIG,QAAAA,OAAO,EAAEA,OAHb;AAIIL,QAAAA,KAAK,EAAEA,KAJX;AAKIG,QAAAA,IAAI,EAAEA,IALV;AAMIC,QAAAA,QAAQ,EAAEA,QANd;AAOIE,QAAAA,gBAAgB,EAAEA,gBAPtB;AAQIC,QAAAA,WAAW,EAAEA,WARjB;AASIC,QAAAA,aAAa,EAAEA;AATnB,OAFJ,EAcI,UAAUO,IAAV,EAAgB;AACZL,QAAAA,OAAO,CAACK,IAAD,CAAP;AACH,OAhBL,EAiBI,UAAUC,UAAV,EAAsB;AAClBL,QAAAA,MAAM,CAACK,UAAD,CAAN;AACH,OAnBL;AAqBH,KAtBM,CAAP;AAuBH;;AAEe,SAATC,SAAS,CAACjB,KAAD,EAAQa,QAAR,EAAiBR,OAAjB,EAA0B;AACtC,WAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCf,MAAAA,WAAW,CAACsB,GAAZ,CACK,GAAErB,WAAW,CAACC,OAAZ,EAAsB,cAAaE,KAAM,IAAGa,QAAS,IAAGR,OAAQ,EADvE,EAEI,UAAUU,IAAV,EAAgB;AACZL,QAAAA,OAAO,CAACK,IAAD,CAAP;AACH,OAJL,EAKI,UAAUC,UAAV,EAAsB;AAClBL,QAAAA,MAAM,CAACK,UAAD,CAAN;AACH,OAPL;AASH,KAVM,CAAP;AAWH;;AAEkB,SAAZG,YAAY,CAACnB,KAAD,EAAQoB,KAAR,EAAe;AAC9B,WAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCf,MAAAA,WAAW,CAACsB,GAAZ,CACK,GAAErB,WAAW,CAACC,OAAZ,EAAsB,iBAAgBE,KAAM,IAAGoB,KAAM,EAD5D,EAEI,UAAUL,IAAV,EAAgB;AACZL,QAAAA,OAAO,CAACK,IAAD,CAAP;AACH,OAJL,EAKI,UAAUC,UAAV,EAAsB;AAClBL,QAAAA,MAAM,CAACK,UAAD,CAAN;AACH,OAPL;AASH,KAVM,CAAP;AAWH;;AAEW,SAALK,KAAK,CAACpB,IAAD,EAAOC,IAAP,EAAa;AACrB,WAAO,IAAIO,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCf,MAAAA,WAAW,CAACgB,IAAZ,CACK,GAAEf,WAAW,CAACC,OAAZ,EAAsB,QAD7B,EAEI;AACIe,QAAAA,QAAQ,EAAEZ,IADd;AAEIa,QAAAA,QAAQ,EAAEZ;AAFd,OAFJ,EAMI,UAAUa,IAAV,EAAgB;AACZL,QAAAA,OAAO,CAACK,IAAD,CAAP;AACH,OARL,EASI,UAAUC,UAAV,EAAsB;AAClBL,QAAAA,MAAM,CAACK,UAAD,CAAN;AACH,OAXL;AAaH,KAdM,CAAP;AAeH;;AAEY,SAANM,MAAM,GAAG;AACZC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,UAA/B;AACH;;AA/E4B","sourcesContent":["import HttpService from './HttpService';\n\nexport default class UserService {\n    static baseURL() {\n        return 'http://localhost:4000/auth';\n    }\n\n    static register(email, user, pass, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) {\n        return new Promise((resolve, reject) => {\n            HttpService.post(\n                `${UserService.baseURL()}/register`,\n                {\n                    username: user,\n                    password: pass,\n                    isAdmin: isAdmin,\n                    email: email,\n                    city: city,\n                    province: province,\n                    subscriptionPlan: subscriptionPlan,\n                    paymentPlan: paymentPlan,\n                    paymentMethod: paymentMethod\n\n                },\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static checkUser(email, username,isAdmin) {\n        return new Promise((resolve, reject) => {\n            HttpService.get(\n                `${UserService.baseURL()}/checkUser/${email}/${username}/${isAdmin}`,          \n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static confirmEmail(email, token) {\n        return new Promise((resolve, reject) => {\n            HttpService.get(\n                `${UserService.baseURL()}/confirmation/${email}/${token}`,\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static login(user, pass) {\n        return new Promise((resolve, reject) => {\n            HttpService.post(\n                `${UserService.baseURL()}/login`,\n                {\n                    username: user,\n                    password: pass,\n                },\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static logout() {\n        window.localStorage.removeItem('jwtToken');\n    }\n}\n"]},"metadata":{},"sourceType":"module"}