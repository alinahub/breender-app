{"ast":null,"code":"const UploadTypes = {\n  UPDATE_PICTURES: 'UPDATE_PICTURES',\n  UPDATE_PROFILE_PICTURE: 'UPDATE_PROFILE_PICTURE',\n  UPDATE_COMPETITIONS: 'UPDATE_COMPETITIONS',\n  UPDATE_DOCUMENTS: 'UPDATE_DOCUMENTS',\n  CLEAR_UPLOAD: 'CLEAR_UPLOAD'\n};\nexport const updatePicturesToUpload = pictures => {\n  const updatePictures = pictures => {\n    return {\n      type: UploadTypes.UPDATE_PICTURES,\n      pictures: pictures\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to update pet', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      dispatch(updatePictures(pictures));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const updateProfilePicture = (pictureToUpload, pictureToRemove) => {\n  const updateProfilePictureAction = (toUpload, toRemove) => {\n    return {\n      type: UploadTypes.UPDATE_PROFILE_PICTURE,\n      profilePictureToUpload: toUpload,\n      profilePictureToRemove: toRemove\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to update profile picture', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      dispatch(updateProfilePictureAction(pictureToUpload, pictureToRemove));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const updateDocumentsToUpload = documents => {\n  const updateDocuments = documents => {\n    return {\n      type: UploadTypes.UPDATE_DOCUMENTS,\n      documents: documents\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to update documents', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      dispatch(updateDocuments(documents));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const updateCompetitionsToUpload = competitions => {\n  const updateCompetitions = documents => {\n    return {\n      type: UploadTypes.UPDATE_COMPETITIONS,\n      competitions: competitions\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to update competitions', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      dispatch(updateCompetitions(competitions));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const clearUpdate = () => {\n  const updateCompetitions = () => {\n    return {\n      type: UploadTypes.CLEAR_UPLOAD\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to clear update', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      dispatch(updateCompetitions());\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/uploadActions.js"],"names":["UploadTypes","UPDATE_PICTURES","UPDATE_PROFILE_PICTURE","UPDATE_COMPETITIONS","UPDATE_DOCUMENTS","CLEAR_UPLOAD","updatePicturesToUpload","pictures","updatePictures","type","onFailure","error","console","log","dispatch","getState","e","updateProfilePicture","pictureToUpload","pictureToRemove","updateProfilePictureAction","toUpload","toRemove","profilePictureToUpload","profilePictureToRemove","updateDocumentsToUpload","documents","updateDocuments","updateCompetitionsToUpload","competitions","updateCompetitions","clearUpdate"],"mappings":"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","sourcesContent":["const UploadTypes = {\n    UPDATE_PICTURES: 'UPDATE_PICTURES',\n    UPDATE_PROFILE_PICTURE: 'UPDATE_PROFILE_PICTURE',\n    UPDATE_COMPETITIONS: 'UPDATE_COMPETITIONS',\n    UPDATE_DOCUMENTS: 'UPDATE_DOCUMENTS',\n    CLEAR_UPLOAD: 'CLEAR_UPLOAD',\n};\n\nexport const updatePicturesToUpload = (pictures) => {\n    const updatePictures = (pictures) => {\n        return { type: UploadTypes.UPDATE_PICTURES, pictures: pictures };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to update pet', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updatePictures(pictures));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const updateProfilePicture = (pictureToUpload, pictureToRemove) => {\n    const updateProfilePictureAction = (toUpload, toRemove) => {\n        return { type: UploadTypes.UPDATE_PROFILE_PICTURE, profilePictureToUpload: toUpload, profilePictureToRemove: toRemove };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to update profile picture', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updateProfilePictureAction(pictureToUpload, pictureToRemove));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const updateDocumentsToUpload = (documents) => {\n    const updateDocuments = (documents) => {\n        return { type: UploadTypes.UPDATE_DOCUMENTS, documents: documents };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to update documents', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updateDocuments(documents));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const updateCompetitionsToUpload = (competitions) => {\n    const updateCompetitions = (documents) => {\n        return { type: UploadTypes.UPDATE_COMPETITIONS, competitions: competitions };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to update competitions', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updateCompetitions(competitions));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const clearUpdate = () => {\n    const updateCompetitions = () => {\n        return { type: UploadTypes.CLEAR_UPLOAD };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to clear update', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updateCompetitions());\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}