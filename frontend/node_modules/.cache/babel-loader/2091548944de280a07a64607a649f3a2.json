{"ast":null,"code":"import { NotificationService } from 'services';\nimport TransactionService from '../../services/TransactionService';\nconst TransactionTypes = {\n  GET_TRANSACTIONS: 'GET_TRANSACTIONS',\n  DELETE_TRANSACTION: 'DELETE_TRANSACTION',\n  UPDATE_TRANSACTION: 'UPDATE_TRANSACTION',\n  CREATE_TRANSACTION: 'CREATE_TRANSACTION',\n  GET_TRANSACTION: 'GET_TRANSACTION'\n};\nexport const getTransactions = userId => {\n  function getTransactionsAction(transactions) {\n    return {\n      type: TransactionTypes.GET_TRANSACTIONS,\n      transactions: transactions\n    };\n  } // when the backend call was failed\n\n\n  function onFailure(error) {\n    // error handling\n    NotificationService.notify('error', 'Transactions Error', 'Error while retrieving the transactions.' + error);\n  }\n\n  return async dispatch => {\n    try {\n      // ask for the pets in the backend\n      let transactions = await TransactionService.getTransactions(userId); // call onSuccess in context of redux\n\n      dispatch(getTransactionsAction(transactions));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const deleteTransaction = (id, userId) => {\n  const deleteTransactionAction = transactions => {\n    return {\n      type: TransactionTypes.DELETE_TRANSACTION,\n      transactions: transactions\n    };\n  };\n\n  const onFailure = error => {\n    NotificationService.notify('error', 'Transactions Error', 'Error while deleting a transaction.');\n  };\n\n  return async dispatch => {\n    try {\n      await TransactionService.deleteTransaction(id);\n      let transactions = await TransactionService.getTransactions(userId);\n      dispatch(deleteTransactionAction(transactions));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const createTransaction = (transaction, onSuccess = () => null, onError = err => null) => {\n  const createTransactionAction = () => {\n    onSuccess();\n    return {\n      type: TransactionTypes.CREATE_TRANSACTION\n    };\n  };\n\n  const onFailure = err => {\n    onError(err);\n  };\n\n  return async dispatch => {\n    await TransactionService.createTransaction(transaction).then(() => {\n      dispatch(createTransactionAction());\n    }).catch(e => {\n      onFailure(e);\n    });\n  };\n};\nexport const updateTransaction = (transactionForUpdate, onSuccess = () => null, onError = err => null) => {\n  const updateTransactionAction = transaction => {\n    onSuccess();\n    return {\n      type: TransactionTypes.UPDATE_TRANSACTION,\n      transaction: transaction\n    };\n  };\n\n  const onFailure = error => {\n    onError();\n  };\n\n  return async dispatch => {\n    try {\n      let transaction = await TransactionService.updateTransaction(transactionForUpdate);\n      dispatch(updateTransactionAction(transaction));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getTransaction = id => {\n  const getTransactionAction = transaction => {\n    return {\n      type: TransactionTypes.GET_TRANSACTION,\n      transaction: transaction\n    };\n  };\n\n  const onFailure = error => {\n    NotificationService.notify('error', 'Transactions Error', 'Failed to load a transaction.');\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      let transaction = await TransactionService.getTransaction(id);\n      dispatch(getTransactionAction(transaction));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/transactionActions.js"],"names":["NotificationService","TransactionService","TransactionTypes","GET_TRANSACTIONS","DELETE_TRANSACTION","UPDATE_TRANSACTION","CREATE_TRANSACTION","GET_TRANSACTION","getTransactions","userId","getTransactionsAction","transactions","type","onFailure","error","notify","dispatch","e","deleteTransaction","id","deleteTransactionAction","createTransaction","transaction","onSuccess","onError","err","createTransactionAction","then","catch","updateTransaction","transactionForUpdate","updateTransactionAction","getTransaction","getTransactionAction","getState"],"mappings":"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","sourcesContent":["import { NotificationService } from 'services';\nimport TransactionService from '../../services/TransactionService';\n\nconst TransactionTypes = {\n    GET_TRANSACTIONS: 'GET_TRANSACTIONS',\n    DELETE_TRANSACTION: 'DELETE_TRANSACTION',\n    UPDATE_TRANSACTION: 'UPDATE_TRANSACTION',\n    CREATE_TRANSACTION: 'CREATE_TRANSACTION',\n    GET_TRANSACTION: 'GET_TRANSACTION',\n};\n\nexport const getTransactions = (userId) => {\n    function getTransactionsAction(transactions) {\n        return { type: TransactionTypes.GET_TRANSACTIONS, transactions: transactions };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        NotificationService.notify('error', 'Transactions Error', 'Error while retrieving the transactions.' +  error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // ask for the pets in the backend\n            let transactions = await TransactionService.getTransactions(userId);\n            // call onSuccess in context of redux\n            dispatch(getTransactionsAction(transactions));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const deleteTransaction = (id, userId) => {\n    const deleteTransactionAction = (transactions) => {\n        return { type: TransactionTypes.DELETE_TRANSACTION, transactions: transactions };\n    };\n    const onFailure = (error) => {\n        NotificationService.notify('error', 'Transactions Error', 'Error while deleting a transaction.');\n    };\n\n    return async (dispatch) => {\n        try {\n            await TransactionService.deleteTransaction(id);\n            let transactions = await TransactionService.getTransactions(userId);\n            dispatch(deleteTransactionAction(transactions));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const createTransaction = (transaction, onSuccess = () => null, onError = (err) => null) => {\n    const createTransactionAction = () => {\n        onSuccess();\n        return { type: TransactionTypes.CREATE_TRANSACTION };\n    };\n    const onFailure = (err) => {\n        onError(err);\n    };\n\n    return async (dispatch) => {\n        await TransactionService.createTransaction(transaction)\n            .then(() => {\n                dispatch(createTransactionAction());\n            })\n            .catch((e) => {\n                onFailure(e);\n            });\n    };\n};\n\nexport const updateTransaction = (transactionForUpdate, onSuccess = () => null, onError = (err) => null) => {\n    const updateTransactionAction = (transaction) => {\n        onSuccess();\n        return { type: TransactionTypes.UPDATE_TRANSACTION, transaction: transaction };\n    };\n\n    const onFailure = (error) => {\n        onError();\n    };\n\n    return async (dispatch) => {\n        try {\n            let transaction = await TransactionService.updateTransaction(transactionForUpdate);\n            dispatch(updateTransactionAction(transaction));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getTransaction = (id) => {\n    const getTransactionAction = (transaction) => {\n        return { type: TransactionTypes.GET_TRANSACTION, transaction: transaction };\n    };\n    const onFailure = (error) => {\n        NotificationService.notify('error', 'Transactions Error', 'Failed to load a transaction.');\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            let transaction = await TransactionService.getTransaction(id);\n            dispatch(getTransactionAction(transaction));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};"]},"metadata":{},"sourceType":"module"}