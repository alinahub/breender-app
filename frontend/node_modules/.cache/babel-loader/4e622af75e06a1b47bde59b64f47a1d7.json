{"ast":null,"code":"import { getUserFromToken } from 'helper/helpers';\nimport { NotificationService } from 'services';\nimport UserService from '../../services/UserService';\nexport function resetError() {\n  return {\n    type: 'RESET_ERROR'\n  };\n}\nexport function login(username, password) {\n  function onSuccess(user) {\n    return {\n      type: 'LOGIN_SUCCESS',\n      user: user,\n      isAuthenticated: true\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'LOGIN_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.login(username, password);\n      dispatch(onSuccess(resp.user));\n    } catch (e) {\n      dispatch(onFailure(e));\n      NotificationService.notify('error', 'Login Error', 'During login occurred an error. Please try again.');\n    }\n  };\n}\nexport function confirmEmail(email, token) {\n  function onSuccess(confirmation) {\n    return {\n      type: 'CONFIRM_EMAIL_SUCCESS',\n      confirmation: confirmation\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'CONFIRM_EMAIL_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.confirmEmail(email, token);\n      dispatch(onSuccess(resp));\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport function checkUser(email, username, isAdmin) {\n  function onSuccess() {\n    return {\n      type: 'USER_UNIQUE_SUCCESS'\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'USER_UNIQUE_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.checkUser(email, username, isAdmin);\n      dispatch(onSuccess());\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport function logout() {\n  UserService.logout();\n  return {\n    type: 'LOGOUT'\n  };\n}\nexport function loginReset() {\n  function onSuccess(user, isAuthenticated) {\n    return {\n      type: 'LOGIN_RESET',\n      user: user,\n      isAuthenticated: isAuthenticated\n    };\n  }\n\n  return dispatch => {\n    let {\n      isAuthenticated,\n      user\n    } = getUserFromToken();\n    dispatch(onSuccess(user, isAuthenticated));\n  };\n}\nexport function register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) {\n  function onSuccess(user) {\n    return {\n      type: 'LOGIN_SUCCESS',\n      user: user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'LOGIN_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod);\n      dispatch(onSuccess(resp.user));\n    } catch (e) {\n      dispatch(onFailure(e));\n      NotificationService.notify('error', 'Registration Error', 'During registration occurred an error. Please try again.');\n    }\n  };\n}\nexport const getUsersInfo = id => {\n  const getUsersInfoAction = user => {\n    return {\n      type: 'GET_USER_INFO',\n      user: user\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to load a user', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      const user = await UserService.getUsersInfo(id);\n      dispatch(getUsersInfoAction(user));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getUserPets = ownerId => {\n  // when the backend call was successfull and the pets are retrieved\n  // in the dispatcher the pets will be added to the global state\n  const onSuccess = pets => {\n    return {\n      type: 'GET_USER_PETS',\n      pets: pets\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('Failed to get the pets', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      // ask for the pets in the backend\n      const pets = await UserService.getUserPets(ownerId); // call onSuccess in context of redux\n\n      dispatch(onSuccess(pets));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const updateUser = (user, onSuccess = () => null, onError = err => null) => {\n  const updateUserAction = user => {\n    onSuccess();\n    let user_for_redux = {\n      id: user._id,\n      username: user.username,\n      role: user.role\n    };\n    return {\n      type: 'UPDATE_USER',\n      user: user_for_redux,\n      userInfo: user\n    };\n  };\n\n  const onFailure = error => {\n    onError();\n    console.log('Failed to update user', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      let updatedUser = await UserService.updateUser(user);\n      dispatch(updateUserAction(updatedUser));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getUser = id => {\n  const getUsersInfoAction = user => {\n    return {\n      type: 'GET_SELECTED_USER',\n      user: user\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to load a user', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      const user = await UserService.getUsersInfo(id);\n      dispatch(getUsersInfoAction(user));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getSelectedUserPets = ownerId => {\n  // when the backend call was successfull and the pets are retrieved\n  // in the dispatcher the pets will be added to the global state\n  const onSuccess = pets => {\n    return {\n      type: 'GET_SELECTED_USER_PETS',\n      pets: pets\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('Failed to get the pets', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      console.log('I am in actions'); // ask for the pets in the backend\n\n      const pets = await UserService.getUserPets(ownerId);\n      console.log('The pets are in the actions: ', pets); // call onSuccess in context of redux\n\n      dispatch(onSuccess(pets));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getReviewsOnUser = id => {\n  // when the backend call was successfull and the reviews are retrieved\n  // in the dispatcher the reviews will be added to the global state\n  const onSuccess = reviews => {\n    return {\n      type: 'GET_REVIEWS_ON_USER',\n      reviews: reviews\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('Failed to get the reviews', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      console.log('I am in actions'); // ask for the reviews in the backend\n\n      const reviews = await UserService.getReviewsOnUser(id);\n      console.log('The reviews are in the actions: ', reviews); // call onSuccess in context of redux\n\n      dispatch(onSuccess(reviews));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getReviewsOnSelectedUser = id => {\n  // when the backend call was successfull and the reviews are retrieved\n  // in the dispatcher the reviews will be added to the global state\n  const onSuccess = reviews => {\n    return {\n      type: 'GET_REVIEWS_ON_SELECTED_USER',\n      reviews: reviews\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('Failed to get the reviews', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      console.log('I am in actions'); // ask for the reviews in the backend\n\n      const reviews = await UserService.getReviewsOnUser(id);\n      console.log('The reviews are in the actions: ', reviews); // call onSuccess in context of redux\n\n      dispatch(onSuccess(reviews));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const addReview = (review, onSuccess = () => null, onError = err => null) => {\n  const addReviewAction = () => {\n    onSuccess();\n    return {\n      type: 'ADD_REVIEW'\n    };\n  };\n\n  const onFailure = err => {\n    onError();\n    console.log('Failed to save the review', err);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      // save the review in the backend\n      await UserService.addReview(review); // call onSuccess in context of redux\n\n      dispatch(addReviewAction());\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/userActions.js"],"names":["getUserFromToken","NotificationService","UserService","resetError","type","login","username","password","onSuccess","user","isAuthenticated","onFailure","error","dispatch","resp","e","notify","confirmEmail","email","token","confirmation","checkUser","isAdmin","logout","loginReset","register","city","province","subscriptionPlan","paymentPlan","paymentMethod","getUsersInfo","id","getUsersInfoAction","console","log","getState","getUserPets","ownerId","pets","updateUser","onError","err","updateUserAction","user_for_redux","_id","role","userInfo","updatedUser","getUser","getSelectedUserPets","getReviewsOnUser","reviews","getReviewsOnSelectedUser","addReview","review","addReviewAction"],"mappings":"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","sourcesContent":["import { getUserFromToken } from 'helper/helpers';\nimport { NotificationService } from 'services';\nimport UserService from '../../services/UserService';\n\nexport function resetError() {\n    return {\n        type: 'RESET_ERROR',\n    };\n}\n\nexport function login(username, password) {\n    function onSuccess(user) {\n        return { type: 'LOGIN_SUCCESS', user: user, isAuthenticated: true };\n    }\n    function onFailure(error) {\n        return { type: 'LOGIN_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.login(username, password);\n            dispatch(onSuccess(resp.user));\n        } catch (e) {\n            dispatch(onFailure(e));\n            NotificationService.notify('error', 'Login Error', 'During login occurred an error. Please try again.');\n        }\n    };\n}\n\nexport function confirmEmail(email, token) {\n    function onSuccess(confirmation) {\n        return { type: 'CONFIRM_EMAIL_SUCCESS', confirmation: confirmation };\n    }\n    function onFailure(error) {\n        return { type: 'CONFIRM_EMAIL_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.confirmEmail(email, token);\n            dispatch(onSuccess(resp));\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport function checkUser(email, username, isAdmin) {\n    function onSuccess() {\n        return { type: 'USER_UNIQUE_SUCCESS' };\n    }\n    function onFailure(error) {\n        return { type: 'USER_UNIQUE_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.checkUser(email, username, isAdmin);\n            dispatch(onSuccess());\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport function logout() {\n    UserService.logout();\n    return { type: 'LOGOUT' };\n}\n\nexport function loginReset() {\n    function onSuccess(user, isAuthenticated) {\n        return { type: 'LOGIN_RESET', user: user, isAuthenticated: isAuthenticated };\n    }\n    return (dispatch) => {\n        let { isAuthenticated, user } = getUserFromToken();\n        dispatch(onSuccess(user, isAuthenticated));\n    };\n}\n\nexport function register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) {\n    function onSuccess(user) {\n        return { type: 'LOGIN_SUCCESS', user: user };\n    }\n    function onFailure(error) {\n        return { type: 'LOGIN_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod);\n            dispatch(onSuccess(resp.user));\n        } catch (e) {\n            dispatch(onFailure(e));\n            NotificationService.notify('error', 'Registration Error', 'During registration occurred an error. Please try again.');\n        }\n    };\n}\n\nexport const getUsersInfo = (id) => {\n    const getUsersInfoAction = (user) => {\n        return { type: 'GET_USER_INFO', user: user };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to load a user', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            const user = await UserService.getUsersInfo(id);\n            dispatch(getUsersInfoAction(user));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getUserPets = (ownerId) => {\n    // when the backend call was successfull and the pets are retrieved\n    // in the dispatcher the pets will be added to the global state\n    const onSuccess = (pets) => {\n        return { type: 'GET_USER_PETS', pets: pets };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('Failed to get the pets', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            // ask for the pets in the backend\n            const pets = await UserService.getUserPets(ownerId);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(pets));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const updateUser = (user, onSuccess = () => null, onError = (err) => null) => {\n    const updateUserAction = (user) => {\n        onSuccess();\n        let user_for_redux = {\n            id: user._id,\n            username: user.username,\n            role: user.role,\n        };\n        return { type: 'UPDATE_USER', user: user_for_redux, userInfo: user };\n    };\n    const onFailure = (error) => {\n        onError();\n        console.log('Failed to update user', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            let updatedUser = await UserService.updateUser(user);\n            dispatch(updateUserAction(updatedUser));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getUser = (id) => {\n    const getUsersInfoAction = (user) => {\n        return { type: 'GET_SELECTED_USER', user: user };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to load a user', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            const user = await UserService.getUsersInfo(id);\n            dispatch(getUsersInfoAction(user));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getSelectedUserPets = (ownerId) => {\n    // when the backend call was successfull and the pets are retrieved\n    // in the dispatcher the pets will be added to the global state\n    const onSuccess = (pets) => {\n        return { type: 'GET_SELECTED_USER_PETS', pets: pets };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('Failed to get the pets', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            console.log('I am in actions');\n            // ask for the pets in the backend\n            const pets = await UserService.getUserPets(ownerId);\n            console.log('The pets are in the actions: ', pets);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(pets));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getReviewsOnUser = (id) => {\n    // when the backend call was successfull and the reviews are retrieved\n    // in the dispatcher the reviews will be added to the global state\n    const onSuccess = (reviews) => {\n        return { type: 'GET_REVIEWS_ON_USER', reviews: reviews };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('Failed to get the reviews', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            console.log('I am in actions');\n            // ask for the reviews in the backend\n            const reviews = await UserService.getReviewsOnUser(id);\n            console.log('The reviews are in the actions: ', reviews);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(reviews));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getReviewsOnSelectedUser = (id) => {\n    // when the backend call was successfull and the reviews are retrieved\n    // in the dispatcher the reviews will be added to the global state\n    const onSuccess = (reviews) => {\n        return { type: 'GET_REVIEWS_ON_SELECTED_USER', reviews: reviews };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('Failed to get the reviews', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            console.log('I am in actions');\n            // ask for the reviews in the backend\n            const reviews = await UserService.getReviewsOnUser(id);\n            console.log('The reviews are in the actions: ', reviews);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(reviews));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const addReview = (review, onSuccess = () => null, onError = (err) => null) => {\n    const addReviewAction = () => {\n        onSuccess();\n        return { type: 'ADD_REVIEW' };\n    };\n    const onFailure = (err) => {\n        onError();\n        console.log('Failed to save the review', err);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            // save the review in the backend\n            await UserService.addReview(review);\n            // call onSuccess in context of redux\n            dispatch(addReviewAction());\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}