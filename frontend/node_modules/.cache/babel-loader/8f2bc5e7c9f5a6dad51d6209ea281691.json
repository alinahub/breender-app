{"ast":null,"code":"import HttpService from './HttpService';\nimport axios from 'axios';\nexport default class UserService {\n  static baseURL() {\n    return 'http://localhost:4000/auth';\n  }\n\n  static baseUserURL() {\n    return 'http://localhost:4000/user';\n  }\n\n  static setToken() {\n    const token = localStorage.getItem('jwtToken');\n    axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n  }\n\n  static register(email, user, pass, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) {\n    return new Promise((resolve, reject) => {\n      HttpService.post(`${UserService.baseURL()}/register`, {\n        username: user,\n        password: pass,\n        isAdmin: isAdmin,\n        email: email,\n        city: city,\n        province: province,\n        subscriptionPlan: subscriptionPlan,\n        paymentPlan: paymentPlan,\n        paymentMethod: paymentMethod\n      }, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static checkUser(email, username, isAdmin) {\n    return new Promise((resolve, reject) => {\n      HttpService.get(`${UserService.baseURL()}/checkUser/${email}/${username}/${isAdmin}`, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static confirmEmail(email, token) {\n    return new Promise((resolve, reject) => {\n      HttpService.get(`${UserService.baseURL()}/confirmation/${email}/${token}`, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static login(user, pass) {\n    return new Promise((resolve, reject) => {\n      HttpService.post(`${UserService.baseURL()}/login`, {\n        username: user,\n        password: pass\n      }, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static logout() {\n    window.localStorage.removeItem('jwtToken');\n  }\n\n  static update(id, subscriptionPlan, paymentPlan, paymentMethod) {\n    return new Promise((resolve, reject) => {\n      HttpService.post(`${UserService.baseURL()}/update`, {\n        id: id,\n        subscriptionPlan: subscriptionPlan,\n        paymentPlan: paymentPlan,\n        paymentMethod: paymentMethod\n      }, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static getUsersInfo(id) {\n    return new Promise(async (resolve, reject) => {\n      HttpService.get(`${UserService.baseUserURL()}/${id}`, function (data) {\n        if (data !== undefined || Object.keys(data).length !== 0) {\n          resolve(data);\n        } else {\n          reject(\"Error while retrieving user\");\n        }\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static updateUser(user) {\n    return new Promise((resolve, reject) => {\n      HttpService.put(`${this.baseUserURL()}/${user._id}`, user, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static getUserPets(ownerId) {\n    return new Promise((resolve, reject) => {\n      HttpService.get(`${this.baseUserURL()}/pets/${ownerId}`, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static getReviewsOnUser(id) {\n    return new Promise((resolve, reject) => {\n      HttpService.get(`${this.baseUserURL()}/${id}/reviews`, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n  static addReview(review) {\n    return new Promise((resolve, reject) => {\n      HttpService.post(`${UserService.baseUserURL()}/add-review`, {\n        review: review\n      }, function (data) {\n        resolve(data);\n      }, function (textStatus) {\n        reject(textStatus);\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/services/UserService.js"],"names":["HttpService","axios","UserService","baseURL","baseUserURL","setToken","token","localStorage","getItem","defaults","headers","common","register","email","user","pass","city","province","isAdmin","subscriptionPlan","paymentPlan","paymentMethod","Promise","resolve","reject","post","username","password","data","textStatus","checkUser","get","confirmEmail","login","logout","window","removeItem","update","id","getUsersInfo","undefined","Object","keys","length","updateUser","put","_id","getUserPets","ownerId","getReviewsOnUser","addReview","review"],"mappings":"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","sourcesContent":["import HttpService from './HttpService';\nimport axios from 'axios';\n\nexport default class UserService {\n    static baseURL() {\n        return 'http://localhost:4000/auth';\n    }\n    static baseUserURL() {\n        return 'http://localhost:4000/user';\n    }\n\n    static setToken() {\n        const token = localStorage.getItem('jwtToken');\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n    }\n\n    static register(email, user, pass, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) {\n        return new Promise((resolve, reject) => {\n            HttpService.post(\n                `${UserService.baseURL()}/register`,\n                {\n                    username: user,\n                    password: pass,\n                    isAdmin: isAdmin,\n                    email: email,\n                    city: city,\n                    province: province,\n                    subscriptionPlan: subscriptionPlan,\n                    paymentPlan: paymentPlan,\n                    paymentMethod: paymentMethod,\n                },\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static checkUser(email, username, isAdmin) {\n        return new Promise((resolve, reject) => {\n            HttpService.get(\n                `${UserService.baseURL()}/checkUser/${email}/${username}/${isAdmin}`,\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static confirmEmail(email, token) {\n        return new Promise((resolve, reject) => {\n            HttpService.get(\n                `${UserService.baseURL()}/confirmation/${email}/${token}`,\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static login(user, pass) {\n        return new Promise((resolve, reject) => {\n            HttpService.post(\n                `${UserService.baseURL()}/login`,\n                {\n                    username: user,\n                    password: pass,\n                },\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static logout() {\n        window.localStorage.removeItem('jwtToken');\n    }\n\n    static update(id, subscriptionPlan, paymentPlan, paymentMethod) {\n        return new Promise((resolve, reject) => {\n            HttpService.post(\n                `${UserService.baseURL()}/update`,\n                {\n                    id: id,\n                    subscriptionPlan: subscriptionPlan,\n                    paymentPlan: paymentPlan,\n                    paymentMethod: paymentMethod\n                },\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static getUsersInfo(id) {\n        return new Promise(async (resolve, reject) => {\n            HttpService.get(\n                `${UserService.baseUserURL()}/${id}`,\n                function (data) {\n                    if (data !== undefined || Object.keys(data).length !== 0) {\n                        resolve(data);\n                    } else {\n                        reject(\"Error while retrieving user\");\n                    }\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static updateUser(user) {\n        return new Promise((resolve, reject) => {\n            HttpService.put(\n                `${this.baseUserURL()}/${user._id}`,\n                user,\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static getUserPets(ownerId) {\n        return new Promise((resolve, reject) => {\n            HttpService.get(\n                `${this.baseUserURL()}/pets/${ownerId}`,\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static getReviewsOnUser(id) {\n        return new Promise((resolve, reject) => {\n            HttpService.get(\n                `${this.baseUserURL()}/${id}/reviews`,\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n\n    static addReview(review) {\n        return new Promise((resolve, reject) => {\n            HttpService.post(\n                `${UserService.baseUserURL()}/add-review`,\n                {\n                    review: review\n                },\n                function (data) {\n                    resolve(data);\n                },\n                function (textStatus) {\n                    reject(textStatus);\n                }\n            );\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}