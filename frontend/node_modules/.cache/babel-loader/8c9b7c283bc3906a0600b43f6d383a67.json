{"ast":null,"code":"import UserService from '../../services/UserService';\nexport function resetError() {\n  return {\n    type: 'RESET_ERROR'\n  };\n}\nexport function login(username, password) {\n  function onSuccess(user) {\n    return {\n      type: 'LOGIN_SUCCESS',\n      user: user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'LOGIN_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.login(username, password);\n      dispatch(onSuccess(resp.user));\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport function confirmEmail(email, token) {\n  function onSuccess(confirmation) {\n    return {\n      type: 'CONFIRM_EMAIL_SUCCESS',\n      confirmation: confirmation\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'CONFIRM_EMAIL_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.confirmEmail(email, token);\n      dispatch(onSuccess(resp));\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport function checkUser(email, username, isAdmin) {\n  function onSuccess() {\n    return {\n      type: 'USER_UNIQUE_SUCCESS'\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'USER_UNIQUE_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.checkUser(email, username, isAdmin);\n      dispatch(onSuccess());\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport function logout() {\n  UserService.logout();\n  return {\n    type: 'LOGOUT'\n  };\n}\nexport function loginReset() {\n  return {\n    type: 'LOGIN_RESET'\n  };\n}\nexport function register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) {\n  function onSuccess(user) {\n    return {\n      type: 'LOGIN_SUCCESS',\n      user: user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'LOGIN_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod);\n      dispatch(onSuccess(resp.user));\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport const getUsersInfo = id => {\n  const getUsersInfoAction = user => {\n    return {\n      type: 'GET_USER_INFO',\n      user: user\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to load a user', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      const user = await UserService.getUsersInfo(id);\n      dispatch(getUsersInfoAction(user));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getUserPets = ownerId => {\n  // when the backend call was successfull and the pets are retrieved\n  // in the dispatcher the pets will be added to the global state\n  const onSuccess = pets => {\n    return {\n      type: 'GET_USER_PETS',\n      pets: pets\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('failed to get the pets', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      console.log('I am in actions'); // ask for the pets in the backend\n\n      const pets = await UserService.getUserPets(ownerId);\n      console.log('The pets are in the actions: ', pets); // call onSuccess in context of redux\n\n      dispatch(onSuccess(pets));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const updateUser = (user, onSuccess = () => null, onError = err => null) => {\n  const updateUserAction = user => {\n    onSuccess();\n    let user_for_redux = {\n      id: user._id,\n      username: user.username,\n      role: user.role\n    };\n    return {\n      type: 'UPDATE_USER',\n      user: user_for_redux,\n      userInfo: user\n    };\n  };\n\n  const onFailure = error => {\n    onError();\n    console.log('Failed to update user', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      let updatedUser = await UserService.updateUser(user);\n      dispatch(updateUserAction(updatedUser));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getUser = id => {\n  const getUsersInfoAction = user => {\n    return {\n      type: 'GET_SELECTED_USER',\n      user: user\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to load a user', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      const user = await UserService.getUsersInfo(id);\n      dispatch(getUsersInfoAction(user));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getSelectedUserPets = ownerId => {\n  // when the backend call was successfull and the pets are retrieved\n  // in the dispatcher the pets will be added to the global state\n  const onSuccess = pets => {\n    return {\n      type: 'GET_SELECTED_USER_PETS',\n      pets: pets\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('failed to get the pets', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      console.log('I am in actions'); // ask for the pets in the backend\n\n      const pets = await UserService.getUserPets(ownerId);\n      console.log('The pets are in the actions: ', pets); // call onSuccess in context of redux\n\n      dispatch(onSuccess(pets));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport function update(id, subscriptionPlan, paymentPlan, paymentMethod, onSuccess = () => null, onError = err => null) {\n  const updateUserAction = user => {\n    onSuccess();\n    return {\n      type: 'UPDATE_SUCCESS',\n      user: user\n    };\n  };\n\n  return async dispatch => {\n    await UserService.update(id, subscriptionPlan, paymentPlan, paymentMethod).then(resp => dispatch(updateUserAction(resp.user))).catch(e => {\n      onError(e);\n    });\n  };\n}\n;\nexport const getReviewsOnUser = id => {\n  // when the backend call was successfull and the reviews are retrieved\n  // in the dispatcher the reviews will be added to the global state\n  const onSuccess = reviews => {\n    return {\n      type: 'GET_REVIEWS_ON_USER',\n      reviews: reviews\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('failed to get the reviews', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      console.log('I am in actions'); // ask for the reviews in the backend\n\n      const reviews = await UserService.getReviewsOnUser(id);\n      console.log('The reviews are in the actions: ', reviews); // call onSuccess in context of redux\n\n      dispatch(onSuccess(reviews));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getReviewsOnSelectedUser = id => {\n  // when the backend call was successfull and the reviews are retrieved\n  // in the dispatcher the reviews will be added to the global state\n  const onSuccess = reviews => {\n    return {\n      type: 'GET_REVIEWS_ON_SELECTED_USER',\n      reviews: reviews\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('failed to get the reviews', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      console.log('I am in actions'); // ask for the reviews in the backend\n\n      const reviews = await UserService.getReviewsOnUser(id);\n      console.log('The reviews are in the actions: ', reviews); // call onSuccess in context of redux\n\n      dispatch(onSuccess(reviews));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const addReview = (review, onSuccess = () => null, onError = err => null) => {\n  const addReviewAction = () => {\n    onSuccess();\n    return {\n      type: \"ADD_REVIEW\"\n    };\n  };\n\n  const onFailure = err => {\n    onError();\n    console.log('failed to save the review', err);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      // save the review in the backend\n      await UserService.addReview(review); // call onSuccess in context of redux\n\n      dispatch(addReviewAction());\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport function me(id) {\n  function onSuccess(user) {\n    return {\n      type: 'GET_LOGGEDINUSER',\n      loggedInUser: user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'LOGIN_RESET'\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.getLoggedInUser(id);\n      dispatch(onSuccess(resp));\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/userActions.js"],"names":["UserService","resetError","type","login","username","password","onSuccess","user","onFailure","error","dispatch","resp","e","confirmEmail","email","token","confirmation","checkUser","isAdmin","logout","loginReset","register","city","province","subscriptionPlan","paymentPlan","paymentMethod","getUsersInfo","id","getUsersInfoAction","console","log","getState","getUserPets","ownerId","pets","updateUser","onError","err","updateUserAction","user_for_redux","_id","role","userInfo","updatedUser","getUser","getSelectedUserPets","update","then","catch","getReviewsOnUser","reviews","getReviewsOnSelectedUser","addReview","review","addReviewAction","me","loggedInUser","getLoggedInUser"],"mappings":"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","sourcesContent":["import UserService from '../../services/UserService';\n\nexport function resetError() {\n    return {\n        type: 'RESET_ERROR',\n    };\n}\n\nexport function login(username, password) {\n    function onSuccess(user) {\n        return { type: 'LOGIN_SUCCESS', user: user };\n    }\n    function onFailure(error) {\n        return { type: 'LOGIN_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.login(username, password);\n            dispatch(onSuccess(resp.user));\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport function confirmEmail(email, token) {\n    function onSuccess(confirmation) {\n        return { type: 'CONFIRM_EMAIL_SUCCESS', confirmation: confirmation };\n    }\n    function onFailure(error) {\n        return { type: 'CONFIRM_EMAIL_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.confirmEmail(email, token);\n            dispatch(onSuccess(resp));\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport function checkUser(email, username, isAdmin) {\n    function onSuccess() {\n        return { type: 'USER_UNIQUE_SUCCESS' };\n    }\n    function onFailure(error) {\n        return { type: 'USER_UNIQUE_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.checkUser(email, username, isAdmin);\n            dispatch(onSuccess());\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport function logout() {\n    UserService.logout();\n    return { type: 'LOGOUT' };\n}\n\nexport function loginReset() {\n    return { type: 'LOGIN_RESET' };\n}\n\nexport function register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) {\n    function onSuccess(user) {\n        return { type: 'LOGIN_SUCCESS', user: user };\n    }\n    function onFailure(error) {\n        return { type: 'LOGIN_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod);\n            dispatch(onSuccess(resp.user));\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport const getUsersInfo = (id) => {\n    const getUsersInfoAction = (user) => {\n        return { type: 'GET_USER_INFO', user: user };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to load a user', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            const user = await UserService.getUsersInfo(id);\n            dispatch(getUsersInfoAction(user));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getUserPets = (ownerId) => {\n    // when the backend call was successfull and the pets are retrieved\n    // in the dispatcher the pets will be added to the global state\n    const onSuccess = (pets) => {\n        return { type: 'GET_USER_PETS', pets: pets };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the pets', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            console.log('I am in actions')\n            // ask for the pets in the backend\n            const pets = await UserService.getUserPets(ownerId);\n            console.log('The pets are in the actions: ', pets)\n            // call onSuccess in context of redux\n            dispatch(onSuccess(pets));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const updateUser = (user, onSuccess = () => null, onError = (err) => null) => {\n    const updateUserAction = (user) => {\n        onSuccess();\n        let user_for_redux = {\n            id: user._id,\n            username: user.username,\n            role: user.role\n        };\n        return { type: 'UPDATE_USER', user: user_for_redux, userInfo: user };\n    };\n    const onFailure = (error) => {\n        onError();\n        console.log('Failed to update user', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            let updatedUser = await UserService.updateUser(user);\n            dispatch(updateUserAction(updatedUser));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getUser = (id) => {\n    const getUsersInfoAction = (user) => {\n        return { type: 'GET_SELECTED_USER', user: user };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to load a user', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            const user = await UserService.getUsersInfo(id);\n            dispatch(getUsersInfoAction(user));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getSelectedUserPets = (ownerId) => {\n    // when the backend call was successfull and the pets are retrieved\n    // in the dispatcher the pets will be added to the global state\n    const onSuccess = (pets) => {\n        return { type: 'GET_SELECTED_USER_PETS', pets: pets };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the pets', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            console.log('I am in actions')\n            // ask for the pets in the backend\n            const pets = await UserService.getUserPets(ownerId);\n            console.log('The pets are in the actions: ', pets)\n            // call onSuccess in context of redux\n            dispatch(onSuccess(pets));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport function update(id, subscriptionPlan, paymentPlan, paymentMethod, onSuccess = () => null, onError = (err) => null) {\n    const updateUserAction = (user) => {\n        onSuccess();\n        return { type: 'UPDATE_SUCCESS', user: user };\n    };\n\n    return async (dispatch) => {\n        await UserService.update(id, subscriptionPlan, paymentPlan, paymentMethod).then((resp) => dispatch(updateUserAction(resp.user))).catch((e) => {\n            onError(e);\n        });\n\n    };\n};\n\nexport const getReviewsOnUser = (id) => {\n    // when the backend call was successfull and the reviews are retrieved\n    // in the dispatcher the reviews will be added to the global state\n    const onSuccess = (reviews) => {\n        return { type: 'GET_REVIEWS_ON_USER', reviews: reviews };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the reviews', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            console.log('I am in actions')\n            // ask for the reviews in the backend\n            const reviews = await UserService.getReviewsOnUser(id);\n            console.log('The reviews are in the actions: ', reviews)\n            // call onSuccess in context of redux\n            dispatch(onSuccess(reviews));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getReviewsOnSelectedUser = (id) => {\n    // when the backend call was successfull and the reviews are retrieved\n    // in the dispatcher the reviews will be added to the global state\n    const onSuccess = (reviews) => {\n        return { type: 'GET_REVIEWS_ON_SELECTED_USER', reviews: reviews };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the reviews', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            console.log('I am in actions')\n            // ask for the reviews in the backend\n            const reviews = await UserService.getReviewsOnUser(id);\n            console.log('The reviews are in the actions: ', reviews)\n            // call onSuccess in context of redux\n            dispatch(onSuccess(reviews));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const addReview = (review, onSuccess = () => null, onError = (err) => null) => {\n    const addReviewAction = () => {\n        onSuccess();\n        return { type: \"ADD_REVIEW\" };\n    };\n    const onFailure = (err) => {\n        onError();\n        console.log('failed to save the review', err);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            // save the review in the backend\n            await UserService.addReview(review);\n            // call onSuccess in context of redux\n            dispatch(addReviewAction());\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\nexport function me(id) {\n    function onSuccess(user) {\n        return { type: 'GET_LOGGEDINUSER', loggedInUser: user };\n    }\n    function onFailure(error) {\n        return { type: 'LOGIN_RESET' };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.getLoggedInUser(id);\n            dispatch(onSuccess(resp));\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}