{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/views/SelectedUserProfileView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect, useSelector } from \"react-redux\";\nimport UserProfile from \"../components/user-profile/UserProfile\";\nimport { getUser, getSelectedUserPets, getReviewsOnSelectedUser } from 'redux/actions';\nimport { useLocation } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SelectedUserProfileView(props) {\n  _s();\n\n  const location = useLocation();\n  const userId = location.pathname.split('/user/')[1]; //get selectedUser, pets and reviews from Redux store\n\n  var selectedUser = useSelector(state => state.user.selectedUser);\n  var pets = useSelector(state => state.user.selectedUserPets);\n  var reviews = useSelector(state => state.user.reviewsOnSelectedUser);\n\n  const loadUser = async id => {\n    // trigger the redux action getUser\n    selectedUser = props.dispatch(getUser(id));\n  };\n\n  const loadUserPets = async () => {\n    // trigger the redux action getSelectedUserPets\n    pets = props.dispatch(getSelectedUserPets(userId));\n  };\n\n  const loadReviews = async () => {\n    // trigger the redux action getReviewsOnSelectedUser\n    reviews = props.dispatch(getReviewsOnSelectedUser(userId));\n  };\n\n  useEffect(() => {\n    // load user when the page is loaded\n    if (!selectedUser || selectedUser && selectedUser._id !== userId) {\n      loadUser(userId);\n      loadReviews();\n    }\n  }, [selectedUser, reviews]);\n  useEffect(() => {\n    // load pets of a user when the page is loaded\n    if (!pets || pets && pets.length > 0 && pets[0].ownerId !== userId) {\n      loadUserPets();\n    }\n  }, [pets]);\n  useEffect(() => {\n    // load reviews on a user when the page is loaded\n    if (!reviews || reviews && reviews.length > 0 && reviews[0].revieweeId !== userId) {\n      loadReviews();\n    }\n  }, [reviews]);\n  return !selectedUser || selectedUser._id !== userId ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(UserProfile, {\n    user: selectedUser,\n    pets: pets,\n    profileOfLoggedInUser: false,\n    reviews: reviews\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SelectedUserProfileView, \"iPMStmODfv/rplhruWtmCcM7SCc=\", false, function () {\n  return [useLocation, useSelector, useSelector, useSelector];\n});\n\n_c = SelectedUserProfileView;\nexport default connect()(SelectedUserProfileView);\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectedUserProfileView\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/views/SelectedUserProfileView.js"],"names":["React","useEffect","connect","useSelector","UserProfile","getUser","getSelectedUserPets","getReviewsOnSelectedUser","useLocation","Loading","SelectedUserProfileView","props","location","userId","pathname","split","selectedUser","state","user","pets","selectedUserPets","reviews","reviewsOnSelectedUser","loadUser","id","dispatch","loadUserPets","loadReviews","_id","length","ownerId","revieweeId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AACA,SAASC,OAAT,EAAkBC,mBAAlB,EAAuCC,wBAAvC,QAAuE,eAAvE;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,uBAApB;;;AAEA,SAASC,uBAAT,CAAiCC,KAAjC,EAAwC;AAAA;;AACpC,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,QAAMK,MAAM,GAAGD,QAAQ,CAACE,QAAT,CAAkBC,KAAlB,CAAwB,QAAxB,EAAkC,CAAlC,CAAf,CAHoC,CAIpC;;AACA,MAAIC,YAAY,GAAGb,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,YAAvB,CAA9B;AACA,MAAIG,IAAI,GAAGhB,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWE,gBAAvB,CAAtB;AACA,MAAIC,OAAO,GAAGlB,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWI,qBAAvB,CAAzB;;AAEA,QAAMC,QAAQ,GAAG,MAAOC,EAAP,IAAc;AAC3B;AACAR,IAAAA,YAAY,GAAGL,KAAK,CAACc,QAAN,CAAepB,OAAO,CAACmB,EAAD,CAAtB,CAAf;AACH,GAHD;;AAKA,QAAME,YAAY,GAAG,YAAY;AAC7B;AACAP,IAAAA,IAAI,GAAGR,KAAK,CAACc,QAAN,CAAenB,mBAAmB,CAACO,MAAD,CAAlC,CAAP;AACH,GAHD;;AAKA,QAAMc,WAAW,GAAG,YAAY;AAC5B;AACAN,IAAAA,OAAO,GAAGV,KAAK,CAACc,QAAN,CAAelB,wBAAwB,CAACM,MAAD,CAAvC,CAAV;AACH,GAHD;;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAI,CAACe,YAAD,IAAkBA,YAAY,IAAIA,YAAY,CAACY,GAAb,KAAqBf,MAA3D,EAAoE;AAChEU,MAAAA,QAAQ,CAACV,MAAD,CAAR;AACAc,MAAAA,WAAW;AACd;AACJ,GANQ,EAMN,CAACX,YAAD,EAAeK,OAAf,CANM,CAAT;AAQApB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAI,CAACkB,IAAD,IAAUA,IAAI,IAAIA,IAAI,CAACU,MAAL,GAAc,CAAtB,IAA2BV,IAAI,CAAC,CAAD,CAAJ,CAAQW,OAAR,KAAoBjB,MAA7D,EAAsE;AAClEa,MAAAA,YAAY;AACf;AACJ,GALQ,EAKN,CAACP,IAAD,CALM,CAAT;AAOAlB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAI,CAACoB,OAAD,IAAaA,OAAO,IAAIA,OAAO,CAACQ,MAAR,GAAiB,CAA5B,IAAiCR,OAAO,CAAC,CAAD,CAAP,CAAWU,UAAX,KAA0BlB,MAA5E,EAAqF;AACjFc,MAAAA,WAAW;AACd;AACJ,GALQ,EAKN,CAACN,OAAD,CALM,CAAT;AAOA,SAAO,CAACL,YAAD,IAAiBA,YAAY,CAACY,GAAb,KAAqBf,MAAtC,gBACH,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UADG,gBAEH,QAAC,WAAD;AAAa,IAAA,IAAI,EAAEG,YAAnB;AAAiC,IAAA,IAAI,EAAEG,IAAvC;AAA6C,IAAA,qBAAqB,EAAE,KAApE;AAA2E,IAAA,OAAO,EAAEE;AAApF;AAAA;AAAA;AAAA;AAAA,UAFJ;AAGH;;GAjDQX,uB;UACYF,W,EAIEL,W,EACRA,W,EACGA,W;;;KAPTO,uB;AAmDT,eAAeR,OAAO,GAAGQ,uBAAH,CAAtB","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect, useSelector } from \"react-redux\";\nimport UserProfile from \"../components/user-profile/UserProfile\";\nimport { getUser, getSelectedUserPets, getReviewsOnSelectedUser } from 'redux/actions';\nimport { useLocation } from 'react-router-dom';\nimport Loading from '../components/Loading';\n\nfunction SelectedUserProfileView(props) {\n    const location = useLocation();\n\n    const userId = location.pathname.split('/user/')[1];\n    //get selectedUser, pets and reviews from Redux store\n    var selectedUser = useSelector((state) => state.user.selectedUser);\n    var pets = useSelector((state) => state.user.selectedUserPets);\n    var reviews = useSelector((state) => state.user.reviewsOnSelectedUser);\n\n    const loadUser = async (id) => {\n        // trigger the redux action getUser\n        selectedUser = props.dispatch(getUser(id));\n    };\n\n    const loadUserPets = async () => {\n        // trigger the redux action getSelectedUserPets\n        pets = props.dispatch(getSelectedUserPets(userId));\n    };\n\n    const loadReviews = async () => {\n        // trigger the redux action getReviewsOnSelectedUser\n        reviews = props.dispatch(getReviewsOnSelectedUser(userId));\n    };\n\n    useEffect(() => {\n        // load user when the page is loaded\n        if (!selectedUser || (selectedUser && selectedUser._id !== userId)) {\n            loadUser(userId);\n            loadReviews();\n        }\n    }, [selectedUser, reviews]);\n\n    useEffect(() => {\n        // load pets of a user when the page is loaded\n        if (!pets || (pets && pets.length > 0 && pets[0].ownerId !== userId)) {\n            loadUserPets();\n        }\n    }, [pets]);\n\n    useEffect(() => {\n        // load reviews on a user when the page is loaded\n        if (!reviews || (reviews && reviews.length > 0 && reviews[0].revieweeId !== userId)) {\n            loadReviews();\n        }\n    }, [reviews]);\n\n    return !selectedUser || selectedUser._id !== userId ? (\n        <Loading />\n    ) : <UserProfile user={selectedUser} pets={pets} profileOfLoggedInUser={false} reviews={reviews} />\n}\n\nexport default connect()(SelectedUserProfileView);"]},"metadata":{},"sourceType":"module"}