{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/transactions/PaymentStepper.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport { Check } from '@material-ui/icons';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  instructions: {\n    marginTop: theme.spacing(0.5),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nfunction getSteps() {\n  return ['Confirm general information', 'Confirm payment', 'Finish'];\n}\n\nconst PaymentStepper = () => {\n  _s();\n\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const steps = getSteps();\n\n  const handleNext = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Stepper, {\n      alternativeLabel: true,\n      activeStep: activeStep,\n      connector: /*#__PURE__*/_jsxDEV(AlternativeConnector, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 74\n      }, this),\n      children: steps.map((label, index) => {\n        const stepProps = {};\n        const labelProps = {};\n        return /*#__PURE__*/_jsxDEV(Step, { ...stepProps,\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            StepIconComponent: StepIcon,\n            ...labelProps,\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this)\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: activeStep === steps.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.instructions,\n          children: \"All steps completed - you're finished\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleReset,\n          className: classes.button,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            disabled: activeStep === 0,\n            onClick: handleBack,\n            className: classes.button,\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleNext,\n            className: classes.button,\n            children: activeStep === steps.length - 1 ? 'Finish' : 'Next'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n/**\n * This function are used for the alternative styling of the stepper.\n */\n\n\n_s(PaymentStepper, \"5/ANSN4aidVPv0P4apAyeUUfwXQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = PaymentStepper;\nconst AlternativeConnector = withStyles({\n  alternativeLabel: {\n    top: 10,\n    left: 'calc(-50% + 16px)',\n    right: 'calc(50% + 16px)'\n  },\n  active: {\n    '& $line': {\n      borderColor: '#D37F65'\n    }\n  },\n  completed: {\n    '& $line': {\n      borderColor: '#D37F65'\n    }\n  },\n  line: {\n    borderColor: '#eaeaf0',\n    borderTopWidth: 2,\n    borderRadius: 1\n  }\n})(StepConnector);\nconst useStepIconStyles = makeStyles({\n  root: {\n    color: '#eaeaf0',\n    display: 'flex',\n    height: 22,\n    alignItems: 'center'\n  },\n  active: {\n    color: '#D37F65'\n  },\n  circle: {\n    width: 12,\n    height: 12,\n    borderRadius: '50%',\n    backgroundColor: 'currentColor'\n  },\n  completed: {\n    color: '#D37F65',\n    zIndex: 1,\n    fontSize: 18\n  }\n});\n\nfunction StepIcon(props) {\n  _s2();\n\n  const classes = useStepIconStyles();\n  const {\n    active,\n    completed\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: clsx(classes.root, {\n      [classes.active]: active\n    }),\n    children: completed ? /*#__PURE__*/_jsxDEV(Check, {\n      className: classes.completed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.circle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 68\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(StepIcon, \"0qRSEY3fD9fMcAZ3ibczG4IV00w=\", false, function () {\n  return [useStepIconStyles];\n});\n\n_c2 = StepIcon;\nStepIcon.propTypes = {\n  active: PropTypes.bool,\n  // Whether this step is active.\n  completed: PropTypes.bool // Mark the step as completed. Is passed to child components.\n\n};\nexport default PaymentStepper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PaymentStepper\");\n$RefreshReg$(_c2, \"StepIcon\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/transactions/PaymentStepper.js"],"names":["React","makeStyles","withStyles","Stepper","Step","StepLabel","Button","Typography","StepConnector","Check","clsx","PropTypes","useStyles","theme","root","width","button","marginRight","spacing","instructions","marginTop","marginBottom","getSteps","PaymentStepper","classes","activeStep","setActiveStep","useState","steps","handleNext","prevActiveStep","handleBack","handleReset","map","label","index","stepProps","labelProps","StepIcon","length","AlternativeConnector","alternativeLabel","top","left","right","active","borderColor","completed","line","borderTopWidth","borderRadius","useStepIconStyles","color","display","height","alignItems","circle","backgroundColor","zIndex","fontSize","props","propTypes","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport { Check } from '@material-ui/icons';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(0.5),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\nfunction getSteps() {\n    return ['Confirm general information', 'Confirm payment', 'Finish'];\n}\n\nconst PaymentStepper = () => {\n    const classes = useStyles();\n    const [activeStep, setActiveStep] = React.useState(0);\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Stepper alternativeLabel activeStep={activeStep} connector={<AlternativeConnector />}>\n                {steps.map((label, index) => {\n                    const stepProps = {};\n                    const labelProps = {};\n                    return (\n                        <Step key={label} {...stepProps}>\n                            <StepLabel StepIconComponent={StepIcon} {...labelProps}>\n                                {label}\n                            </StepLabel>\n                        </Step>\n                    );\n                })}\n            </Stepper>\n            <div>\n                {activeStep === steps.length ? (\n                    <div>\n                        <Typography className={classes.instructions}>All steps completed - you&apos;re finished</Typography>\n                        <Button onClick={handleReset} className={classes.button}>\n                            Reset\n                        </Button>\n                    </div>\n                ) : (\n                    <div>\n                        <div>\n                            <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\n                                Back\n                            </Button>\n                            <Button variant=\"contained\" color=\"primary\" onClick={handleNext} className={classes.button}>\n                                {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                            </Button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\n/**\n * This function are used for the alternative styling of the stepper.\n */\nconst AlternativeConnector = withStyles({\n    alternativeLabel: {\n        top: 10,\n        left: 'calc(-50% + 16px)',\n        right: 'calc(50% + 16px)',\n    },\n    active: {\n        '& $line': {\n            borderColor: '#D37F65',\n        },\n    },\n    completed: {\n        '& $line': {\n            borderColor: '#D37F65',\n        },\n    },\n    line: {\n        borderColor: '#eaeaf0',\n        borderTopWidth: 2,\n        borderRadius: 1,\n    },\n})(StepConnector);\n\nconst useStepIconStyles = makeStyles({\n    root: {\n        color: '#eaeaf0',\n        display: 'flex',\n        height: 22,\n        alignItems: 'center',\n    },\n    active: {\n        color: '#D37F65',\n    },\n    circle: {\n        width: 12,\n        height: 12,\n        borderRadius: '50%',\n        backgroundColor: 'currentColor',\n    },\n    completed: {\n        color: '#D37F65',\n        zIndex: 1,\n        fontSize: 18,\n    },\n});\n\nfunction StepIcon(props) {\n    const classes = useStepIconStyles();\n    const { active, completed } = props;\n\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active,\n            })}\n        >\n            {completed ? <Check className={classes.completed} /> : <div className={classes.circle} />}\n        </div>\n    );\n}\n\nStepIcon.propTypes = {\n    active: PropTypes.bool, // Whether this step is active.\n    completed: PropTypes.bool, // Mark the step as completed. Is passed to child components.\n};\n\nexport default PaymentStepper;\n"]},"metadata":{},"sourceType":"module"}