{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/upload/multiple-photos.upload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload, Modal } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { sha256 } from 'js-sha256';\nimport { useDispatch } from 'react-redux';\nimport { updateSelectedPet } from 'redux/actions';\nimport { usePet } from 'helper/hooks/pets.hooks';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst prepareFileList = pet => {\n  let petList = [];\n  pet.pictures.forEach((value, index) => {\n    petList.push({\n      uid: index,\n      name: value.title,\n      status: 'done',\n      url: value.src\n    });\n  });\n  return petList;\n};\n\nconst MultiplePhotosUpload = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    mode\n  } = props;\n  const pet = usePet();\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const [previewImage, setPreviewImage] = useState('');\n  const [previewTitle, setPreviewTitle] = useState('');\n  const [fileList, setFileList] = useState(mode === 'add' ? [] : prepareFileList(pet));\n  const user = useUser(); // get base64 format of the uploaded picture\n\n  const getBase64 = photo => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(photo);\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = error => reject(error);\n    });\n  };\n\n  const handleCancel = () => setPreviewVisible(false); // update file list\n\n\n  const handleChange = ({\n    fileList\n  }) => setFileList(fileList);\n\n  const handlePreview = async photo => {\n    if (!photo.url && !photo.preview) {\n      photo.preview = await getBase64(photo.originFileObj);\n    } // if photo is uploaded, show modal, set preview image and preview title\n\n\n    setPreviewImage(photo.url || photo.preview);\n    setPreviewVisible(true);\n    setPreviewTitle(photo.name || photo.url.substring(photo.url.lastIndexOf('/') + 1));\n  }; // upload image to the firebase\n\n\n  const customUpload = async data => {\n    const imageName = sha256(data.file.name); //a unique name for the image\n\n    /** Firebase structure\n     * -| users\n     *   -| userId\n     *     -| pets\n     *      -| images\n     */\n\n    const imgPath = `users/${user.id}/pets/images/${imageName}`; // set status upload to upload it later to firebase\n\n    const newData = {\n      title: data.file.name,\n      path: imgPath,\n      src: undefined,\n      description: '',\n      status: 'upload',\n      data: data\n    };\n    let petData = pet;\n    let pics = [...pet.pictures, newData];\n    petData.pictures = pics; // set global state\n\n    dispatch(updateSelectedPet(petData));\n    data.onSuccess(null);\n  }; // remove the image from firebase\n\n\n  const handleRemove = async file => {\n    let petData = pet;\n    let picTemp = [...pet.pictures];\n\n    if (file.url) {\n      // set status delete to remove it later onSave from firebase\n      picTemp.map(value => value.title === file.name ? value.status = 'delete' : value);\n      petData.pictures = picTemp;\n      dispatch(updateSelectedPet(petData));\n    } else {\n      let pics = picTemp.filter(value => value.title !== file.name);\n      petData.pictures = pics;\n      dispatch(updateSelectedPet(petData));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Upload, {\n      listType: \"picture-card\",\n      fileList: fileList,\n      onPreview: handlePreview,\n      onChange: handleChange,\n      customRequest: customUpload,\n      onRemove: handleRemove,\n      children: fileList.length >= 8 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 8\n          },\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      visible: previewVisible,\n      title: previewTitle,\n      footer: null,\n      onCancel: handleCancel,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"preview\",\n        style: {\n          width: '100%'\n        },\n        src: previewImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MultiplePhotosUpload, \"Ti/ENk9r0oPby9uYDgmHD5yA10U=\", false, function () {\n  return [useDispatch, usePet, useUser];\n});\n\n_c = MultiplePhotosUpload;\nexport default MultiplePhotosUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiplePhotosUpload\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/upload/multiple-photos.upload.js"],"names":["React","useState","Upload","Modal","PlusOutlined","sha256","useDispatch","updateSelectedPet","usePet","useUser","prepareFileList","pet","petList","pictures","forEach","value","index","push","uid","name","title","status","url","src","MultiplePhotosUpload","props","dispatch","mode","previewVisible","setPreviewVisible","previewImage","setPreviewImage","previewTitle","setPreviewTitle","fileList","setFileList","user","getBase64","photo","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","handleCancel","handleChange","handlePreview","preview","originFileObj","substring","lastIndexOf","customUpload","data","imageName","file","imgPath","id","newData","path","undefined","description","petData","pics","onSuccess","handleRemove","picTemp","map","filter","length","marginTop","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload, Modal } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { sha256 } from 'js-sha256';\nimport { useDispatch } from 'react-redux';\nimport { updateSelectedPet } from 'redux/actions';\nimport { usePet } from 'helper/hooks/pets.hooks';\nimport { useUser } from 'helper/hooks/auth.hooks';\n\nconst prepareFileList = (pet) => {\n    let petList = [];\n    pet.pictures.forEach((value, index) => {\n        petList.push({\n            uid: index,\n            name: value.title,\n            status: 'done',\n            url: value.src,\n        });\n    });\n    return petList;\n};\n\nconst MultiplePhotosUpload = (props) => {\n    const dispatch = useDispatch();\n    const { mode } = props;\n    const pet = usePet();\n\n    const [previewVisible, setPreviewVisible] = useState(false);\n    const [previewImage, setPreviewImage] = useState('');\n    const [previewTitle, setPreviewTitle] = useState('');\n    const [fileList, setFileList] = useState(mode === 'add' ? [] : prepareFileList(pet));\n\n    const user = useUser();\n\n    // get base64 format of the uploaded picture\n    const getBase64 = (photo) => {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(photo);\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = (error) => reject(error);\n        });\n    };\n\n    const handleCancel = () => setPreviewVisible(false);\n\n    // update file list\n    const handleChange = ({ fileList }) => setFileList(fileList);\n\n    const handlePreview = async (photo) => {\n        if (!photo.url && !photo.preview) {\n            photo.preview = await getBase64(photo.originFileObj);\n        }\n        // if photo is uploaded, show modal, set preview image and preview title\n        setPreviewImage(photo.url || photo.preview);\n        setPreviewVisible(true);\n        setPreviewTitle(photo.name || photo.url.substring(photo.url.lastIndexOf('/') + 1));\n    };\n\n    // upload image to the firebase\n    const customUpload = async (data) => {\n        const imageName = sha256(data.file.name); //a unique name for the image\n\n        /** Firebase structure\n         * -| users\n         *   -| userId\n         *     -| pets\n         *      -| images\n         */\n\n        const imgPath = `users/${user.id}/pets/images/${imageName}`;\n\n        // set status upload to upload it later to firebase\n        const newData = {\n            title: data.file.name,\n            path: imgPath,\n            src: undefined,\n            description: '',\n            status: 'upload',\n            data: data,\n        };\n\n        let petData = pet;\n        let pics = [...pet.pictures, newData];\n        petData.pictures = pics;\n\n        // set global state\n        dispatch(updateSelectedPet(petData));\n\n        data.onSuccess(null);\n    };\n\n    // remove the image from firebase\n    const handleRemove = async (file) => {\n        let petData = pet;\n        let picTemp = [...pet.pictures];\n        if (file.url) {\n            // set status delete to remove it later onSave from firebase\n            picTemp.map((value) => (value.title === file.name ? (value.status = 'delete') : value));\n            petData.pictures = picTemp;\n            dispatch(updateSelectedPet(petData));\n        } else {\n            let pics = picTemp.filter((value) => value.title !== file.name);\n            petData.pictures = pics;\n            dispatch(updateSelectedPet(petData));\n        }\n    };\n\n    return (\n        <div>\n            <Upload listType=\"picture-card\" fileList={fileList} onPreview={handlePreview} onChange={handleChange} customRequest={customUpload} onRemove={handleRemove}>\n                {fileList.length >= 8 ? null : (\n                    <div>\n                        <PlusOutlined />\n                        <div style={{ marginTop: 8 }}>Upload</div>\n                    </div>\n                )}\n            </Upload>\n            <Modal visible={previewVisible} title={previewTitle} footer={null} onCancel={handleCancel}>\n                <img alt=\"preview\" style={{ width: '100%' }} src={previewImage} />\n            </Modal>\n        </div>\n    );\n};\n\nexport default MultiplePhotosUpload;\n"]},"metadata":{},"sourceType":"module"}