{"ast":null,"code":"import UserService from '../../services/UserService';\nexport function resetError() {\n  return {\n    type: 'RESET_ERROR'\n  };\n}\nexport function login(username, password) {\n  function onSuccess(user) {\n    return {\n      type: 'LOGIN_SUCCESS',\n      user: user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'LOGIN_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.login(username, password);\n      dispatch(onSuccess(resp.user));\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport function confirmEmail(email, token) {\n  function onSuccess(confirmation) {\n    return {\n      type: 'CONFIRM_EMAIL_SUCCESS',\n      confirmation: confirmation\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'CONFIRM_EMAIL_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.confirmEmail(email, token);\n      dispatch(onSuccess(resp));\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport function checkUser(email, username, isAdmin) {\n  function onSuccess() {\n    return {\n      type: 'USER_UNIQUE_SUCCESS'\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'USER_UNIQUE_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.checkUser(email, username, isAdmin);\n      dispatch(onSuccess());\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport function logout() {\n  UserService.logout();\n  return {\n    type: 'LOGOUT'\n  };\n}\nexport function loginReset() {\n  return {\n    type: 'LOGIN_RESET'\n  };\n}\nexport function register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) {\n  function onSuccess(user) {\n    return {\n      type: 'LOGIN_SUCCESS',\n      user: user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'LOGIN_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod);\n      dispatch(onSuccess(resp.user));\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/userActions.js"],"names":["UserService","resetError","type","login","username","password","onSuccess","user","onFailure","error","dispatch","resp","e","confirmEmail","email","token","confirmation","checkUser","isAdmin","logout","loginReset","register","city","province","subscriptionPlan","paymentPlan","paymentMethod"],"mappings":"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","sourcesContent":["import UserService from '../../services/UserService';\n\nexport function resetError()  {\n    return {\n        type: 'RESET_ERROR'\n    }\n}\n\nexport function login(username, password) {\n    function onSuccess(user) {\n        return { type: 'LOGIN_SUCCESS', user: user };\n    }\n    function onFailure(error) {\n        return { type: 'LOGIN_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.login(username, password);\n            dispatch(onSuccess(resp.user));\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport function confirmEmail(email, token) {\n    function onSuccess(confirmation) {\n        return { type: 'CONFIRM_EMAIL_SUCCESS', confirmation: confirmation };\n    }\n    function onFailure(error) {\n        return { type: 'CONFIRM_EMAIL_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.confirmEmail(email, token);\n            dispatch(onSuccess(resp));\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport function checkUser(email, username, isAdmin) {\n    function onSuccess() {\n        return { type: 'USER_UNIQUE_SUCCESS' };\n    }\n    function onFailure(error) {\n        return { type: 'USER_UNIQUE_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n             let resp = await UserService.checkUser(email, username, isAdmin);\n            dispatch(onSuccess());\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport function logout() {\n    UserService.logout();\n    return { type: 'LOGOUT' };\n}\n\nexport function loginReset() {\n    return { type: 'LOGIN_RESET' };\n}\n\nexport function register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) {\n    function onSuccess(user) {\n        return { type: 'LOGIN_SUCCESS', user: user };\n    }\n    function onFailure(error) {\n        return { type: 'LOGIN_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            \n            let resp = await UserService.register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod);\n            dispatch(onSuccess(resp.user));\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}