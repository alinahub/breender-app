{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/views/EditPetView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { useHistory, useLocation } from 'react-router-dom'; // components import\n\nimport { PetInformationForm, PetPhotosForm } from 'components/forms';\nimport Loading from 'components/Loading'; // state imports\n\nimport { usePet, usePetCompetitions, usePetDocuments, usePetPictures, usePetProfilePictureToRemove, usePetProfilePictureToUpload } from 'helper/hooks/pets.hooks';\nimport { changePet, getPet, updateCompetitionsToUpload, updateDocumentsToUpload, updatePicturesToUpload, updateProfilePicture } from 'redux/actions'; // helpers import\n\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { UPLOAD_STATUS } from 'helper/types';\nimport { isObjEmpty } from 'helper/helpers'; // services import\n\nimport { NotificationService, FirebaseService } from 'services';\n/**\n * \n * @param {*} props \n * Main view to edit/modify an existing pet\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditPetView = props => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n  const id = location.pathname.split('/edit/pet/')[1];\n  const pet = usePet();\n  const user = useUser(); // get pet upload states\n\n  const petDocuments = usePetDocuments();\n  const petCompetitions = usePetCompetitions();\n  const petPictures = usePetPictures();\n  const petProfilePictureToUpload = usePetProfilePictureToUpload();\n  const petProfilePictureToRemove = usePetProfilePictureToRemove();\n  const [loading, setLoading] = useState(true);\n  const [buttonLoading, setButtonLoading] = useState(false);\n  const [formIsDisabled, setFormIsDisabled] = useState(false);\n  const [name, setName] = useState(pet.officialName);\n  const [nickname, setNickname] = useState(pet.nickname);\n  const [sex, setSex] = useState(pet.sex);\n  const [birthDate, setBirthDate] = useState(new Date(pet.birthDate));\n  const [species, setSpecies] = useState(pet.species);\n  const [breed, setBreed] = useState(pet.breed);\n  const [price, setPrice] = useState(pet.price);\n  useEffect(() => {\n    // update upload states\n    if (loading) {\n      dispatch(updateProfilePicture(pet.profilePicture, {}));\n      dispatch(updatePicturesToUpload(pet.pictures));\n      dispatch(updateCompetitionsToUpload(pet.competitions));\n      dispatch(updateDocumentsToUpload(pet.documents));\n    }\n\n    if (pet.officialName) {\n      setLoading(false);\n    } else {\n      const fetchPet = () => {\n        dispatch(getPet(id));\n        setLoading(false);\n      };\n\n      fetchPet();\n    }\n  }, [dispatch, id, pet.documents, pet.competitions, pet.profilePicture, pet.pictures, pet.officialName, loading]);\n\n  const isEmpty = str => str === '' || str === undefined;\n\n  useEffect(() => {\n    const disabled = isEmpty(name) || isObjEmpty(petProfilePictureToUpload) || isEmpty(sex) || isEmpty(species) || isEmpty(breed);\n    setFormIsDisabled(disabled);\n  }, [name, sex, breed, species, petProfilePictureToUpload]);\n  useEffect(() => {\n    if (pet.ownerId !== user.id) {\n      history.goBack();\n      NotificationService.notify('error', 'Navigation Error', 'This information is restricted');\n    }\n  }, [pet.ownerId, user.id, history]);\n\n  const uploadCompetitions = async () => {\n    const competitionsData = [...petCompetitions];\n\n    for (let index = 0; index < competitionsData.length; index++) {\n      let value = competitionsData[index];\n\n      if (value.certificate && Object.keys(value.certificate).length !== 0) {\n        if (value.certificate.status === UPLOAD_STATUS.UPLOAD) {\n          const metadata = {\n            contentType: value.certificate.type\n          };\n          let url = await FirebaseService.upload(value.certificate.path, value.certificate.data, metadata);\n          competitionsData[index].certificate.url = url;\n        } else if (value.certificate.status === UPLOAD_STATUS.DELETE) {\n          await FirebaseService.remove(value.certificate.path);\n        }\n      }\n    }\n\n    let competitions = competitionsData.filter(value => value.certificate.status !== UPLOAD_STATUS.DELETE);\n    await dispatch(updateCompetitionsToUpload(competitions));\n    return competitions;\n  };\n\n  const uploadDocuments = async () => {\n    const documentsData = [...petDocuments];\n\n    for (let index = 0; index < documentsData.length; index++) {\n      let value = documentsData[index];\n\n      if (value.status === UPLOAD_STATUS.UPLOAD) {\n        const metadata = {\n          contentType: value.type\n        };\n        let url = await FirebaseService.upload(value.path, value.data, metadata);\n        documentsData[index].url = url;\n      } else if (value.status === UPLOAD_STATUS.DELETE) {\n        await FirebaseService.remove(value.path);\n      }\n    }\n\n    let docs = documentsData.filter(value => value.status !== UPLOAD_STATUS.DELETE);\n    await dispatch(updateDocumentsToUpload(docs));\n    return docs;\n  };\n\n  const uploadPictures = async () => {\n    const picturesData = [...petPictures];\n\n    for (let index = 0; index < picturesData.length; index++) {\n      let value = picturesData[index];\n\n      if (value.status === UPLOAD_STATUS.UPLOAD) {\n        const metadata = {\n          contentType: 'image/png'\n        };\n        let url = await FirebaseService.upload(value.path, value.data, metadata);\n        picturesData[index].src = url;\n      } else if (value.status === UPLOAD_STATUS.DELETE) {\n        await FirebaseService.remove(value.path);\n      }\n    }\n\n    const pics = picturesData.filter(value => value.status !== UPLOAD_STATUS.DELETE);\n    await dispatch(updatePicturesToUpload(pics));\n    return pics;\n  };\n\n  const uploadProfilePicture = async () => {\n    // update profile picture only if new was uploaded\n    if (Object.keys(petProfilePictureToRemove).length !== 0 && (petProfilePictureToRemove === null || petProfilePictureToRemove === void 0 ? void 0 : petProfilePictureToRemove.src) !== '') {\n      // delete old one\n      await FirebaseService.remove(petProfilePictureToRemove.path); // upload new one\n\n      let value = petProfilePictureToUpload;\n      const metadata = {\n        contentType: 'image/png'\n      };\n      let url = await FirebaseService.upload(value.path, value.data, metadata);\n      value.src = url;\n      await dispatch(updateProfilePicture(value, {}));\n      return value;\n    } else {\n      return pet.profilePicture;\n    }\n  };\n\n  const updatePet = async () => {\n    setButtonLoading(true); // upload documents and pics to firebase first\n\n    const documents = await uploadDocuments();\n    const competitions = await uploadCompetitions();\n    const pictures = await uploadPictures();\n    const profilePicture = await uploadProfilePicture();\n    const dateCreated = Date.now(); // combine all information about a pet\n\n    let petToUpload = {\n      id: id,\n      ownerId: user.id,\n      officialName: name,\n      nickname: nickname,\n      birthDate: birthDate,\n      sex: sex,\n      price: price,\n      profilePicture: profilePicture,\n      pictures: pictures,\n      dateCreated: dateCreated,\n      breed: breed,\n      species: species,\n      competitions: competitions,\n      documents: documents\n    };\n\n    const onSuccess = () => {\n      NotificationService.notify('success', 'Success', 'Your four-legged friend was successfully updated!');\n      history.push('/');\n    };\n\n    const onError = () => {\n      NotificationService.notify('error', 'Error', 'There was a problem updating your pet.');\n    };\n\n    await dispatch(changePet(petToUpload, onSuccess, onError));\n    setButtonLoading(false);\n  }; // on canceling the view\n\n\n  const onCancel = async () => {\n    history.goBack();\n  };\n\n  return pet && !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.layout,\n      children: [/*#__PURE__*/_jsxDEV(PetPhotosForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PetInformationForm, {\n        nameProp: {\n          name,\n          setName\n        },\n        nicknameProp: {\n          nickname,\n          setNickname\n        },\n        sexProp: {\n          sex,\n          setSex\n        },\n        birthDateProp: {\n          birthDate,\n          setBirthDate\n        },\n        speciesProp: {\n          species,\n          setSpecies\n        },\n        breedProp: {\n          breed,\n          setBreed\n        },\n        priceProp: {\n          price,\n          setPrice\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.button,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: onCancel,\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"large\",\n        style: {\n          marginRight: 20\n        },\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: formIsDisabled,\n        onClick: updatePet,\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        children: [buttonLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20,\n          color: \"ffff\",\n          style: {\n            marginRight: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 38\n        }, this) : '', \" Save\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditPetView, \"crVC6gl54yuWR4sZAd0Buw0xrKw=\", false, function () {\n  return [useStyles, useDispatch, useHistory, useLocation, usePet, useUser, usePetDocuments, usePetCompetitions, usePetPictures, usePetProfilePictureToUpload, usePetProfilePictureToRemove];\n});\n\n_c = EditPetView;\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'center',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n      width: 'auto',\n      alignItems: 'center'\n    }\n  },\n  button: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    marginRight: 20\n  }\n})); // connect() establishes the connection to the redux functionalities\n\nexport default connect()(EditPetView);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPetView\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/views/EditPetView.js"],"names":["React","useEffect","useState","connect","useDispatch","makeStyles","Button","CircularProgress","useHistory","useLocation","PetInformationForm","PetPhotosForm","Loading","usePet","usePetCompetitions","usePetDocuments","usePetPictures","usePetProfilePictureToRemove","usePetProfilePictureToUpload","changePet","getPet","updateCompetitionsToUpload","updateDocumentsToUpload","updatePicturesToUpload","updateProfilePicture","useUser","UPLOAD_STATUS","isObjEmpty","NotificationService","FirebaseService","EditPetView","props","classes","useStyles","dispatch","history","location","id","pathname","split","pet","user","petDocuments","petCompetitions","petPictures","petProfilePictureToUpload","petProfilePictureToRemove","loading","setLoading","buttonLoading","setButtonLoading","formIsDisabled","setFormIsDisabled","name","setName","officialName","nickname","setNickname","sex","setSex","birthDate","setBirthDate","Date","species","setSpecies","breed","setBreed","price","setPrice","profilePicture","pictures","competitions","documents","fetchPet","isEmpty","str","undefined","disabled","ownerId","goBack","notify","uploadCompetitions","competitionsData","index","length","value","certificate","Object","keys","status","UPLOAD","metadata","contentType","type","url","upload","path","data","DELETE","remove","filter","uploadDocuments","documentsData","docs","uploadPictures","picturesData","src","pics","uploadProfilePicture","updatePet","dateCreated","now","petToUpload","onSuccess","push","onError","onCancel","layout","button","marginRight","theme","display","width","justifyContent","breakpoints","down","flexDirection","alignItems"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { useHistory, useLocation } from 'react-router-dom';\n// components import\nimport { PetInformationForm, PetPhotosForm } from 'components/forms';\nimport Loading from 'components/Loading';\n// state imports\nimport { usePet, usePetCompetitions, usePetDocuments, usePetPictures, usePetProfilePictureToRemove, usePetProfilePictureToUpload } from 'helper/hooks/pets.hooks';\nimport { changePet, getPet, updateCompetitionsToUpload, updateDocumentsToUpload, updatePicturesToUpload, updateProfilePicture } from 'redux/actions';\n// helpers import\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { UPLOAD_STATUS } from 'helper/types';\nimport { isObjEmpty } from 'helper/helpers';\n// services import\nimport { NotificationService, FirebaseService } from 'services';\n\n/**\n * \n * @param {*} props \n * Main view to edit/modify an existing pet\n */\nconst EditPetView = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = useLocation();\n\n    const id = location.pathname.split('/edit/pet/')[1];\n    const pet = usePet();\n    const user = useUser();\n\n    // get pet upload states\n    const petDocuments = usePetDocuments();\n    const petCompetitions = usePetCompetitions();\n    const petPictures = usePetPictures();\n    const petProfilePictureToUpload = usePetProfilePictureToUpload();\n    const petProfilePictureToRemove = usePetProfilePictureToRemove();\n\n    const [loading, setLoading] = useState(true);\n    const [buttonLoading, setButtonLoading] = useState(false);\n    const [formIsDisabled, setFormIsDisabled] = useState(false);\n    const [name, setName] = useState(pet.officialName);\n    const [nickname, setNickname] = useState(pet.nickname);\n    const [sex, setSex] = useState(pet.sex);\n    const [birthDate, setBirthDate] = useState(new Date(pet.birthDate));\n    const [species, setSpecies] = useState(pet.species);\n    const [breed, setBreed] = useState(pet.breed);\n    const [price, setPrice] = useState(pet.price);\n\n    useEffect(() => {\n        // update upload states\n        if (loading) {\n            dispatch(updateProfilePicture(pet.profilePicture, {}));\n            dispatch(updatePicturesToUpload(pet.pictures));\n            dispatch(updateCompetitionsToUpload(pet.competitions));\n            dispatch(updateDocumentsToUpload(pet.documents));\n        }\n\n        if (pet.officialName) {\n            setLoading(false);\n        } else {\n            const fetchPet = () => {\n                dispatch(getPet(id));\n                setLoading(false);\n            };\n            fetchPet();\n        }\n    }, [dispatch, id, pet.documents, pet.competitions, pet.profilePicture, pet.pictures, pet.officialName, loading]);\n\n    const isEmpty = (str) => str === '' || str === undefined;\n\n    useEffect(() => {\n        const disabled = isEmpty(name) || isObjEmpty(petProfilePictureToUpload) || isEmpty(sex) || isEmpty(species) || isEmpty(breed);\n        setFormIsDisabled(disabled);\n    }, [name, sex, breed, species, petProfilePictureToUpload]);\n\n    useEffect(() => {\n        if (pet.ownerId !== user.id) {\n            history.goBack();\n            NotificationService.notify('error', 'Navigation Error', 'This information is restricted');\n        }\n    }, [pet.ownerId, user.id, history]);\n\n    const uploadCompetitions = async () => {\n        const competitionsData = [...petCompetitions];\n        for (let index = 0; index < competitionsData.length; index++) {\n            let value = competitionsData[index];\n\n            if (value.certificate && Object.keys(value.certificate).length !== 0) {\n                if (value.certificate.status === UPLOAD_STATUS.UPLOAD) {\n                    const metadata = {\n                        contentType: value.certificate.type,\n                    };\n                    let url = await FirebaseService.upload(value.certificate.path, value.certificate.data, metadata);\n                    competitionsData[index].certificate.url = url;\n                } else if (value.certificate.status === UPLOAD_STATUS.DELETE) {\n                    await FirebaseService.remove(value.certificate.path);\n                }\n            }\n        }\n\n        let competitions = competitionsData.filter((value) => value.certificate.status !== UPLOAD_STATUS.DELETE);\n        await dispatch(updateCompetitionsToUpload(competitions));\n\n        return competitions;\n    };\n\n    const uploadDocuments = async () => {\n        const documentsData = [...petDocuments];\n        for (let index = 0; index < documentsData.length; index++) {\n            let value = documentsData[index];\n\n            if (value.status === UPLOAD_STATUS.UPLOAD) {\n                const metadata = {\n                    contentType: value.type,\n                };\n                let url = await FirebaseService.upload(value.path, value.data, metadata);\n                documentsData[index].url = url;\n            } else if (value.status === UPLOAD_STATUS.DELETE) {\n                await FirebaseService.remove(value.path);\n            }\n        }\n\n        let docs = documentsData.filter((value) => value.status !== UPLOAD_STATUS.DELETE);\n        await dispatch(updateDocumentsToUpload(docs));\n\n        return docs;\n    };\n\n    const uploadPictures = async () => {\n        const picturesData = [...petPictures];\n        for (let index = 0; index < picturesData.length; index++) {\n            let value = picturesData[index];\n\n            if (value.status === UPLOAD_STATUS.UPLOAD) {\n                const metadata = {\n                    contentType: 'image/png',\n                };\n\n                let url = await FirebaseService.upload(value.path, value.data, metadata);\n                picturesData[index].src = url;\n            } else if (value.status === UPLOAD_STATUS.DELETE) {\n                await FirebaseService.remove(value.path);\n            }\n        }\n        const pics = picturesData.filter((value) => value.status !== UPLOAD_STATUS.DELETE);\n        await dispatch(updatePicturesToUpload(pics));\n\n        return pics;\n    };\n\n    const uploadProfilePicture = async () => {\n        // update profile picture only if new was uploaded\n        if (Object.keys(petProfilePictureToRemove).length !== 0 && petProfilePictureToRemove?.src !== '') {\n            // delete old one\n            await FirebaseService.remove(petProfilePictureToRemove.path);\n\n            // upload new one\n            let value = petProfilePictureToUpload;\n            const metadata = {\n                contentType: 'image/png',\n            };\n\n            let url = await FirebaseService.upload(value.path, value.data, metadata);\n            value.src = url;\n\n            await dispatch(updateProfilePicture(value, {}));\n\n            return value;\n        } else {\n            return pet.profilePicture;\n        }\n    };\n\n    const updatePet = async () => {\n        setButtonLoading(true);\n\n        // upload documents and pics to firebase first\n        const documents = await uploadDocuments();\n        const competitions = await uploadCompetitions();\n        const pictures = await uploadPictures();\n        const profilePicture = await uploadProfilePicture();\n\n        const dateCreated = Date.now();\n        // combine all information about a pet\n        let petToUpload = {\n            id: id,\n            ownerId: user.id,\n            officialName: name,\n            nickname: nickname,\n            birthDate: birthDate,\n            sex: sex,\n            price: price,\n            profilePicture: profilePicture,\n            pictures: pictures,\n            dateCreated: dateCreated,\n            breed: breed,\n            species: species,\n            competitions: competitions,\n            documents: documents,\n        };\n\n        const onSuccess = () => {\n            NotificationService.notify('success', 'Success', 'Your four-legged friend was successfully updated!');\n            history.push('/');\n        };\n\n        const onError = () => {\n            NotificationService.notify('error', 'Error', 'There was a problem updating your pet.');\n        };\n\n        await dispatch(changePet(petToUpload, onSuccess, onError));\n        setButtonLoading(false);\n    };\n\n    // on canceling the view\n    const onCancel = async () => {\n        history.goBack();\n    };\n\n    return pet && !loading ? (\n        <div>\n            <div className={classes.layout}>\n                <PetPhotosForm />\n                <PetInformationForm\n                    nameProp={{ name, setName }}\n                    nicknameProp={{ nickname, setNickname }}\n                    sexProp={{ sex, setSex }}\n                    birthDateProp={{ birthDate, setBirthDate }}\n                    speciesProp={{ species, setSpecies }}\n                    breedProp={{ breed, setBreed }}\n                    priceProp={{ price, setPrice }}\n                />\n            </div>\n            <div className={classes.button}>\n                <Button onClick={onCancel} variant=\"contained\" color=\"secondary\" size=\"large\" style={{ marginRight: 20 }}>\n                    Cancel\n                </Button>\n                <Button disabled={formIsDisabled} onClick={updatePet} type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\">\n                    {buttonLoading ? <CircularProgress size={20} color={\"ffff\"} style={{ marginRight: 10 }} /> : ''} Save\n                </Button>\n            </div>\n        </div>\n    ) : (\n        <Loading />\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        display: 'flex',\n        width: '100%',\n        justifyContent: 'center',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'column',\n            width: 'auto',\n            alignItems: 'center',\n        },\n    },\n    button: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginRight: 20,\n    },\n}));\n\n// connect() establishes the connection to the redux functionalities\nexport default connect()(EditPetView);\n"]},"metadata":{},"sourceType":"module"}