{"ast":null,"code":"import _regeneratorRuntime from\"/Users/alinaturbina/Uni Projects/seba/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/alinaturbina/Uni Projects/seba/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import MessageService from'../../services/MessageService';var MessageTypes={GET_MESSAGES:'GET_MESSAGES',GET_UNREAD_MESSAGES:'GET_UNREAD_MESSAGES',UPDATE_MESSAGES_TO_READ:'UPDATE_MESSAGES_TO_READ',ADD_MESSAGE:'ADD_MESSAGE'};export var addMessage=function addMessage(message){var addMessageAction=function addMessageAction(){return{type:MessageTypes.ADD_MESSAGE};};var onFailure=function onFailure(err){console.log(err);};return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return MessageService.createMessage(message).then(function(){dispatch(addMessageAction());}).catch(function(e){onFailure(e);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();};export var updateMessagesToSeen=function updateMessagesToSeen(messageIds){var onSuccess=function onSuccess(){return{type:MessageTypes.UPDATE_MESSAGES_TO_READ};};var onFailure=function onFailure(err){console.log(err);};return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return MessageService.updateMessagesToSeen(messageIds).then(function(){dispatch(onSuccess());}).catch(function(e){onFailure(e);});case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var getMessages=function getMessages(conversationId){// when the backend call was successfull and the messages are retrieved\n// in the dispatcher the messages will be added to the global state\nvar onSuccess=function onSuccess(messages){return{type:MessageTypes.GET_MESSAGES,messages:messages};};// when the backend call was failed\nvar onFailure=function onFailure(error){// error handling\nconsole.log('failed to get the messages',error);};return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch,getState){var messages;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return MessageService.getMessages(conversationId);case 3:messages=_context3.sent;// call onSuccess in context of redux\ndispatch(onSuccess(messages));_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](0);onFailure(_context3.t0);case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[0,7]]);}));return function(_x3,_x4){return _ref3.apply(this,arguments);};}();};export var getUnseenMessages=function getUnseenMessages(userId){// when the backend call was successfull and the messages are retrieved\n// in the dispatcher the messages will be added to the global state\nvar onSuccess=function onSuccess(unseenMessages){return{type:MessageTypes.GET_UNREAD_MESSAGES,unseenMessages:unseenMessages};};// when the backend call was failed\nvar onFailure=function onFailure(error){// error handling\nconsole.log('failed to get the messages',error);};return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch,getState){var unseenMessages;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return MessageService.getUnseenMessages(userId);case 3:unseenMessages=_context4.sent;// call onSuccess in context of redux\ndispatch(onSuccess(unseenMessages));_context4.next=10;break;case 7:_context4.prev=7;_context4.t0=_context4[\"catch\"](0);onFailure(_context4.t0);case 10:case\"end\":return _context4.stop();}}},_callee4,null,[[0,7]]);}));return function(_x5,_x6){return _ref4.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/messageActions.js"],"names":["MessageService","MessageTypes","GET_MESSAGES","GET_UNREAD_MESSAGES","UPDATE_MESSAGES_TO_READ","ADD_MESSAGE","addMessage","message","addMessageAction","type","onFailure","err","console","log","dispatch","createMessage","then","catch","e","updateMessagesToSeen","messageIds","onSuccess","getMessages","conversationId","messages","error","getState","getUnseenMessages","userId","unseenMessages"],"mappings":"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","sourcesContent":["import MessageService from '../../services/MessageService';\n\nconst MessageTypes = {\n    GET_MESSAGES: 'GET_MESSAGES',\n    GET_UNREAD_MESSAGES: 'GET_UNREAD_MESSAGES',\n    UPDATE_MESSAGES_TO_READ: 'UPDATE_MESSAGES_TO_READ',\n    ADD_MESSAGE: 'ADD_MESSAGE',\n};\n\nexport const addMessage = (message) => {\n    const addMessageAction = () => {\n        return { type: MessageTypes.ADD_MESSAGE };\n    };\n    const onFailure = (err) => {\n        console.log(err);\n    };\n\n    return async (dispatch) => {\n        await MessageService.createMessage(message)\n            .then(() => {\n                dispatch(addMessageAction());\n            })\n            .catch((e) => {\n                onFailure(e);\n            });\n    };\n};\n\nexport const updateMessagesToSeen = (messageIds) => {\n    const onSuccess = () => {\n        return { type: MessageTypes.UPDATE_MESSAGES_TO_READ };\n    };\n    const onFailure = (err) => {\n        console.log(err);\n    };\n\n    return async (dispatch) => {\n        await MessageService.updateMessagesToSeen(messageIds)\n            .then(() => {\n                dispatch(onSuccess());\n            })\n            .catch((e) => {\n                onFailure(e);\n            });\n    };\n};\n\nexport const getMessages = (conversationId) => {\n    // when the backend call was successfull and the messages are retrieved\n    // in the dispatcher the messages will be added to the global state\n    const onSuccess = (messages) => {\n        return { type: MessageTypes.GET_MESSAGES, messages: messages };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the messages', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            // ask for the messages in the backend\n            let messages = await MessageService.getMessages(conversationId);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(messages));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getUnseenMessages = (userId) => {\n    // when the backend call was successfull and the messages are retrieved\n    // in the dispatcher the messages will be added to the global state\n    const onSuccess = (unseenMessages) => {\n        return { type: MessageTypes.GET_UNREAD_MESSAGES, unseenMessages: unseenMessages };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the messages', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            // ask for the unread messages in the backend\n            let unseenMessages = await MessageService.getUnseenMessages(userId);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(unseenMessages));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}