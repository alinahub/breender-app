{"ast":null,"code":"import axios from 'axios';\nexport default class TransactionService {\n  static URL() {\n    return 'http://localhost:4000/transaction';\n  }\n\n  static setToken() {\n    const token = localStorage.getItem('jwtToken');\n    axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n  }\n\n  static getTransactions(userId) {\n    this.setToken();\n    return new Promise(async (resolve, reject) => {\n      try {\n        const {\n          data\n        } = await axios.get(`/transaction/`, {\n          params: {\n            userId\n          }\n        });\n        resolve(data);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  static getAdminTransactions(userId) {\n    this.setToken();\n    return new Promise(async (resolve, reject) => {\n      try {\n        const {\n          data\n        } = await axios.get(`/transaction/all/`, {\n          params: {\n            userId\n          }\n        });\n        resolve(data);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  static getTransaction(id) {\n    this.setToken();\n    return new Promise(async (resolve, reject) => {\n      try {\n        const {\n          data\n        } = await axios.get(`/transaction/${id}`);\n        resolve(data);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  static deleteTransaction(id) {\n    this.setToken();\n    return new Promise(async (resolve, reject) => {\n      try {\n        const {\n          data\n        } = await axios.delete(`/transaction/${id}`);\n        resolve(data);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  static async updateTransaction(transaction) {\n    this.setToken();\n    const {\n      data\n    } = await axios.put(`/transaction/${transaction.id}`, transaction);\n    return data;\n  }\n\n  static async createTransaction(transaction) {\n    this.setToken();\n    const {\n      data\n    } = await axios.post(`/transaction/`, transaction);\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/services/TransactionService.js"],"names":["axios","TransactionService","URL","setToken","token","localStorage","getItem","defaults","headers","common","getTransactions","userId","Promise","resolve","reject","data","get","params","err","getAdminTransactions","getTransaction","id","deleteTransaction","delete","updateTransaction","transaction","put","createTransaction","post"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport default class TransactionService {\n    static URL() {\n        return 'http://localhost:4000/transaction';\n    }\n\n    static setToken() {\n        const token = localStorage.getItem('jwtToken');\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n    }\n\n    static getTransactions(userId) {\n        this.setToken();\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await axios.get(`/transaction/`, { params: { userId } });\n                resolve(data);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    static getAdminTransactions(userId) {\n        this.setToken();\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await axios.get(`/transaction/all/`, { params: { userId } });\n                resolve(data);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    static getTransaction(id) {\n        this.setToken();\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await axios.get(`/transaction/${id}`);\n                resolve(data);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    static deleteTransaction(id) {\n        this.setToken();\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await axios.delete(`/transaction/${id}`);\n                resolve(data);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    static async updateTransaction(transaction) {\n        this.setToken();\n        const { data } = await axios.put(`/transaction/${transaction.id}`, transaction);\n        return data;\n    }\n\n    static async createTransaction(transaction) {\n        this.setToken();\n        const { data } = await axios.post(`/transaction/`, transaction);\n        return data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}