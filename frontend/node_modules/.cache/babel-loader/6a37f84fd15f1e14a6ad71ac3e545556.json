{"ast":null,"code":"import _regeneratorRuntime from\"/Users/alinaturbina/Uni Projects/seba/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/alinaturbina/Uni Projects/seba/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React,{useEffect,useState}from'react';import{connect,useSelector,dispatch}from'react-redux';import{getConversations}from'../redux/actions/conversationActions';import MessengerComponent from'../components/messenger/MessengerComponent';import Loading from'../components/Loading';import{useDispatch}from'react-redux';import{jsx as _jsx}from\"react/jsx-runtime\";function MessengerView(props){var dispatch=useDispatch();var user=useSelector(function(state){return state.user.user;});useEffect(function(){var userId=user.id;function loadConversations(_x){return _loadConversations.apply(this,arguments);}function _loadConversations(){_loadConversations=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(id){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return dispatch(getConversations(id));case 2:case\"end\":return _context.stop();}}},_callee);}));return _loadConversations.apply(this,arguments);}return loadConversations(userId);},[dispatch]);var loadedConversations=useSelector(function(state){return state.conversations;});return!loadedConversations.conversations?/*#__PURE__*/_jsx(Loading,{}):!Array.isArray(loadedConversations.conversations)?/*#__PURE__*/_jsx(\"div\",{children:\"error\"}):loadedConversations.conversations?/*#__PURE__*/_jsx(MessengerComponent,{conversations:loadedConversations.conversations,currentUser:user,currentConversationId:props.currentConversationId,petId:props.petId}):null;}// connect() establishes allows the usage of redux functionality\nexport default connect()(MessengerView);","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/views/MessengerView.js"],"names":["React","useEffect","useState","connect","useSelector","dispatch","getConversations","MessengerComponent","Loading","useDispatch","MessengerView","props","user","state","userId","id","loadConversations","loadedConversations","conversations","Array","isArray","currentConversationId","petId"],"mappings":"uUAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,OAAT,CAAkBC,WAAlB,CAA+BC,QAA/B,KAA+C,aAA/C,CACA,OAASC,gBAAT,KAAiC,sCAAjC,CACA,MAAOC,CAAAA,kBAAP,KAA+B,4CAA/B,CACA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,CACA,OAASC,WAAT,KAA4B,aAA5B,C,2CAEA,QAASC,CAAAA,aAAT,CAAuBC,KAAvB,CAA8B,CAC1B,GAAMN,CAAAA,QAAQ,CAAGI,WAAW,EAA5B,CAEA,GAAMG,CAAAA,IAAI,CAAGR,WAAW,CAAC,SAACS,KAAD,QAAWA,CAAAA,KAAK,CAACD,IAAN,CAAWA,IAAtB,EAAD,CAAxB,CAEAX,SAAS,CAAC,UAAM,CACZ,GAAIa,CAAAA,MAAM,CAAGF,IAAI,CAACG,EAAlB,CADY,QAGGC,CAAAA,iBAHH,+JAGZ,iBAAiCD,EAAjC,wIACUV,CAAAA,QAAQ,CAACC,gBAAgB,CAACS,EAAD,CAAjB,CADlB,uDAHY,oDAOZ,MAAOC,CAAAA,iBAAiB,CAACF,MAAD,CAAxB,CACH,CARQ,CAQN,CAACT,QAAD,CARM,CAAT,CAUA,GAAMY,CAAAA,mBAAmB,CAAGb,WAAW,CAAC,SAACS,KAAD,QAAWA,CAAAA,KAAK,CAACK,aAAjB,EAAD,CAAvC,CAEA,MAAO,CAACD,mBAAmB,CAACC,aAArB,cACH,KAAC,OAAD,IADG,CAEH,CAACC,KAAK,CAACC,OAAN,CAAcH,mBAAmB,CAACC,aAAlC,CAAD,cACA,8BADA,CAEAD,mBAAmB,CAACC,aAApB,cACA,KAAC,kBAAD,EAAoB,aAAa,CAAED,mBAAmB,CAACC,aAAvD,CAAsE,WAAW,CAAEN,IAAnF,CAAyF,qBAAqB,CAAED,KAAK,CAACU,qBAAtH,CAA6I,KAAK,CAAEV,KAAK,CAACW,KAA1J,EADA,CAEA,IANJ,CAOH,CAED;AACA,cAAenB,CAAAA,OAAO,GAAGO,aAAH,CAAtB","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect, useSelector, dispatch } from 'react-redux';\nimport { getConversations } from '../redux/actions/conversationActions';\nimport MessengerComponent from '../components/messenger/MessengerComponent';\nimport Loading from '../components/Loading';\nimport { useDispatch } from 'react-redux';\n\nfunction MessengerView(props) {\n    const dispatch = useDispatch();\n\n    const user = useSelector((state) => state.user.user);\n\n    useEffect(() => {\n        let userId = user.id;\n\n        async function loadConversations(id) {\n            await dispatch(getConversations(id));\n        }\n\n        return loadConversations(userId);\n    }, [dispatch]);\n\n    const loadedConversations = useSelector((state) => state.conversations);\n\n    return !loadedConversations.conversations ? (\n        <Loading />\n    ) : !Array.isArray(loadedConversations.conversations) ? (\n        <div>error</div>\n    ) : loadedConversations.conversations ? (\n        <MessengerComponent conversations={loadedConversations.conversations} currentUser={user} currentConversationId={props.currentConversationId} petId={props.petId} />\n    ) : null;\n}\n\n// connect() establishes allows the usage of redux functionality\nexport default connect()(MessengerView);\n"]},"metadata":{},"sourceType":"module"}