{"ast":null,"code":"import _regeneratorRuntime from\"/Users/alinaturbina/Uni Projects/seba/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/alinaturbina/Uni Projects/seba/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import DocumentService from'services/DocumentService';export function verifyDocument(docId,docType,ownerId,officialName){// when the backend call was successfull and the was verified\nfunction onSuccess(){return{type:'VERIFY_DOCUMENT_SUCCESS'};}// when the backend call was failed\nfunction onFailure(error){// error handling\nconsole.log('failed to verify document',error);}return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return DocumentService.verifyDocument(docId,docType,ownerId,officialName);case 3:// call onSuccess in context of redux\ndispatch(onSuccess());_context.next=9;break;case 6:_context.prev=6;_context.t0=_context[\"catch\"](0);onFailure(_context.t0);case 9:case\"end\":return _context.stop();}}},_callee,null,[[0,6]]);}));return function(_x){return _ref.apply(this,arguments);};}();}export function declineDocument(docId,docType,ownerId,officialName){// when the backend call was successfull and the document was declined\nfunction onSuccess(){return{type:'DECLINE_DOCUMENT_SUCCESS'};}// when the backend call was failed\nfunction onFailure(error){// error handling\nconsole.log('failed to decline document',error);}return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return DocumentService.declineDocument(docId,docType,ownerId,officialName);case 3:// call onSuccess in context of redux\ndispatch(onSuccess());_context2.next=9;break;case 6:_context2.prev=6;_context2.t0=_context2[\"catch\"](0);onFailure(_context2.t0);case 9:case\"end\":return _context2.stop();}}},_callee2,null,[[0,6]]);}));return function(_x2){return _ref2.apply(this,arguments);};}();}export function getDocuments(){// when the backend call was successfull and unprocessed docs are retrieved\n// in the dispatcher unprocessed docs will be added to the global state\nfunction onSuccess(documents){return{type:'GET_DOCUMENTS_SUCCESS',documents:documents};}// when the backend call was failed\nfunction onFailure(error){// error handling\nconsole.log('failed to get the documents',error);}return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var documents;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return DocumentService.getDocuments();case 3:documents=_context3.sent;// call onSuccess in context of redux\ndispatch(onSuccess(documents));_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](0);onFailure(_context3.t0);case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[0,7]]);}));return function(_x3){return _ref3.apply(this,arguments);};}();}export function getDeclinedDocuments(){// when the backend call was successfull and the declined docs sare retrieved\n// in the dispatcher the declined docs will be added to the global state\nfunction onSuccess(documents){return{type:'GET_PROCESSED_DOCUMENTS_SUCCESS',documents:documents};}// when the backend call was failed\nfunction onFailure(error){// error handling\nconsole.log('failed to get processed documents',error);}return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var documents;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return DocumentService.getProcessedDocuments('declined');case 3:documents=_context4.sent;// call onSuccess in context of redux\ndispatch(onSuccess(documents));_context4.next=10;break;case 7:_context4.prev=7;_context4.t0=_context4[\"catch\"](0);onFailure(_context4.t0);case 10:case\"end\":return _context4.stop();}}},_callee4,null,[[0,7]]);}));return function(_x4){return _ref4.apply(this,arguments);};}();}export function getVerifiedDocuments(){// when the backend call was successfull and the verified docs are retrieved\n// in the dispatcher the verified docs will be added to the global state\nfunction onSuccess(documents){return{type:'GET_PROCESSED_DOCUMENTS_SUCCESS',documents:documents};}// when the backend call was failed\nfunction onFailure(error){// error handling\nconsole.log('failed to get processed documents',error);}return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){var documents;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return DocumentService.getProcessedDocuments('verified');case 3:documents=_context5.sent;// call onSuccess in context of redux\ndispatch(onSuccess(documents));_context5.next=10;break;case 7:_context5.prev=7;_context5.t0=_context5[\"catch\"](0);onFailure(_context5.t0);case 10:case\"end\":return _context5.stop();}}},_callee5,null,[[0,7]]);}));return function(_x5){return _ref5.apply(this,arguments);};}();}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/documentActions.js"],"names":["DocumentService","verifyDocument","docId","docType","ownerId","officialName","onSuccess","type","onFailure","error","console","log","dispatch","declineDocument","getDocuments","documents","getDeclinedDocuments","getProcessedDocuments","getVerifiedDocuments"],"mappings":"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","sourcesContent":["import DocumentService from 'services/DocumentService';\nexport function verifyDocument(docId, docType, ownerId, officialName) {\n    // when the backend call was successfull and the was verified\n    function onSuccess() {\n        return { type: 'VERIFY_DOCUMENT_SUCCESS' };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to verify document', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // verify doc in the backend\n            await DocumentService.verifyDocument(docId, docType, ownerId, officialName);\n            // call onSuccess in context of redux\n            dispatch(onSuccess());\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\nexport function declineDocument(docId, docType, ownerId, officialName) {\n    // when the backend call was successfull and the document was declined\n    function onSuccess() {\n        return { type: 'DECLINE_DOCUMENT_SUCCESS' };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to decline document', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // decline doc in the backend\n            await DocumentService.declineDocument(docId, docType, ownerId, officialName);\n            // call onSuccess in context of redux\n            dispatch(onSuccess());\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\nexport function getDocuments() {\n    // when the backend call was successfull and unprocessed docs are retrieved\n    // in the dispatcher unprocessed docs will be added to the global state\n    function onSuccess(documents) {\n        return { type: 'GET_DOCUMENTS_SUCCESS', documents: documents };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to get the documents', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // ask for the docs in the backend\n            let documents = await DocumentService.getDocuments();\n            // call onSuccess in context of redux\n            dispatch(onSuccess(documents));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\nexport function getDeclinedDocuments() {\n    // when the backend call was successfull and the declined docs sare retrieved\n    // in the dispatcher the declined docs will be added to the global state\n    function onSuccess(documents) {\n        return { type: 'GET_PROCESSED_DOCUMENTS_SUCCESS', documents: documents };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to get processed documents', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // ask for the docs in the backend\n            let documents = await DocumentService.getProcessedDocuments('declined');\n            // call onSuccess in context of redux\n            dispatch(onSuccess(documents));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\n\nexport function getVerifiedDocuments() {\n    // when the backend call was successfull and the verified docs are retrieved\n    // in the dispatcher the verified docs will be added to the global state\n    function onSuccess(documents) {\n        return { type: 'GET_PROCESSED_DOCUMENTS_SUCCESS', documents: documents };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to get processed documents', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // ask for the docsmin the backend\n            let documents = await DocumentService.getProcessedDocuments('verified');\n            // call onSuccess in context of redux\n            dispatch(onSuccess(documents));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\n\n"]},"metadata":{},"sourceType":"module"}