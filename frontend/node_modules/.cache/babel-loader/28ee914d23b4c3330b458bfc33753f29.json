{"ast":null,"code":"import axios from 'axios';\nexport default class ConversationService {\n  static URL() {\n    return 'http://localhost:4000/conversations';\n  }\n\n  static getConversations(userId) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const {\n          data\n        } = await axios.get(`/conversations/${userId}`);\n        resolve(data);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  static getConversation(id1, id2) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const {\n          data\n        } = await axios.get(`/conversations/find/${id1}&${id2}`);\n        resolve(data);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  static async createConversation(conversation) {\n    const {\n      data\n    } = await axios.post(`/conversations/`, conversation);\n    return data;\n  }\n\n  static async getOrCreateConversation(id1, id2) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const {\n          data\n        } = await axios.get(`/conversations/find/${id1}&${id2}`);\n        resolve(data);\n      } catch (err) {\n        let conversation = {\n          members: [id1, id2]\n        };\n        const {\n          data\n        } = await axios.post(`/conversations/`, conversation);\n        resolve(data);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/services/ConversationService.js"],"names":["axios","ConversationService","URL","getConversations","userId","Promise","resolve","reject","data","get","err","getConversation","id1","id2","createConversation","conversation","post","getOrCreateConversation","members"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,mBAAN,CAA0B;AAC3B,SAAHC,GAAG,GAAG;AACT,WAAO,qCAAP;AACH;;AAEsB,SAAhBC,gBAAgB,CAACC,MAAD,EAAS;AAC5B,WAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,UAAI;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMR,KAAK,CAACS,GAAN,CAAW,kBAAiBL,MAAO,EAAnC,CAAvB;AACAE,QAAAA,OAAO,CAACE,IAAD,CAAP;AACH,OAHD,CAGE,OAAOE,GAAP,EAAY;AACVH,QAAAA,MAAM,CAACG,GAAD,CAAN;AACH;AACJ,KAPM,CAAP;AAQH;;AAEqB,SAAfC,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAW;AAC7B,WAAO,IAAIR,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,UAAI;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMR,KAAK,CAACS,GAAN,CAAW,uBAAsBG,GAAI,IAAGC,GAAI,EAA5C,CAAvB;AACAP,QAAAA,OAAO,CAACE,IAAD,CAAP;AACH,OAHD,CAGE,OAAOE,GAAP,EAAY;AACVH,QAAAA,MAAM,CAACG,GAAD,CAAN;AACH;AACJ,KAPM,CAAP;AAQH;;AAE8B,eAAlBI,kBAAkB,CAACC,YAAD,EAAe;AAC1C,UAAM;AAAEP,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACgB,IAAN,CAAY,iBAAZ,EAA8BD,YAA9B,CAAvB;AACA,WAAOP,IAAP;AACH;;AAEmC,eAAvBS,uBAAuB,CAACL,GAAD,EAAMC,GAAN,EAAW;AAC3C,WAAO,IAAIR,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,UAAI;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMR,KAAK,CAACS,GAAN,CAAW,uBAAsBG,GAAI,IAAGC,GAAI,EAA5C,CAAvB;AACAP,QAAAA,OAAO,CAACE,IAAD,CAAP;AACH,OAHD,CAGE,OAAOE,GAAP,EAAY;AACV,YAAIK,YAAY,GAAG;AACfG,UAAAA,OAAO,EAAE,CAACN,GAAD,EAAMC,GAAN;AADM,SAAnB;AAGA,cAAM;AAAEL,UAAAA;AAAF,YAAW,MAAMR,KAAK,CAACgB,IAAN,CAAY,iBAAZ,EAA8BD,YAA9B,CAAvB;AACAT,QAAAA,OAAO,CAACE,IAAD,CAAP;AACH;AACJ,KAXM,CAAP;AAYH;;AA7CoC","sourcesContent":["import axios from 'axios';\n\nexport default class ConversationService {\n    static URL() {\n        return 'http://localhost:4000/conversations';\n    }\n\n    static getConversations(userId) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await axios.get(`/conversations/${userId}`);\n                resolve(data);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    static getConversation(id1, id2) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await axios.get(`/conversations/find/${id1}&${id2}`);\n                resolve(data);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    static async createConversation(conversation) {\n        const { data } = await axios.post(`/conversations/`, conversation);\n        return data;\n    }\n\n    static async getOrCreateConversation(id1, id2) {\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await axios.get(`/conversations/find/${id1}&${id2}`);\n                resolve(data);\n            } catch (err) {\n                let conversation = {\n                    members: [id1, id2],\n                };\n                const { data } = await axios.post(`/conversations/`, conversation);\n                resolve(data);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}