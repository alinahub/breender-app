{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/upload/documents.upload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { sha256 } from 'js-sha256';\nimport { Button } from '@material-ui/core';\nimport { connect, useDispatch } from 'react-redux';\nimport { usePetCompetitions, usePetDocuments } from 'helper/hooks/pets.hooks';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { updateCompetitionsToUpload, updateDocumentsToUpload } from 'redux/actions';\nimport { UPLOAD_STATUS } from 'helper/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst prepareDocumentsFileList = petDocuments => {\n  let petList = [];\n  petDocuments.forEach((value, index) => {\n    petList.push({\n      uid: index,\n      name: value.name,\n      status: UPLOAD_STATUS.DONE,\n      url: value.url\n    });\n  });\n  return petList;\n};\n\nconst prepareCompetitionsFileList = (petCompetitions, key) => {\n  let petList = [];\n  petCompetitions.forEach((value, index) => {\n    if (value.certificate) {\n      petList.push({\n        uid: index,\n        name: value.certificate.name,\n        status: UPLOAD_STATUS.DONE,\n        url: value.certificate.url\n      });\n    }\n  });\n  return petList;\n};\n/**\n *\n * @param  props\n * @returns Component to upload pet documents or certificates\n */\n\n\nconst DocumentsUpload = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    mode\n  } = props;\n  const isCompetition = props.type === 'competitions';\n  let key = isCompetition ? props.competitionId : null; // get global states\n\n  const user = useUser();\n  const petDocuments = usePetDocuments();\n  const petCompetitions = usePetCompetitions();\n  const [fileList, setFileList] = useState(mode === 'add' ? [] : isCompetition ? prepareCompetitionsFileList(petCompetitions, key) : prepareDocumentsFileList(petDocuments));\n  const pathPrefix = `users/${user.id}/pets/documents`;\n  let maxFileNumber = props.maxFiles || 8; // update file list\n\n  const handleChange = ({\n    fileList\n  }) => setFileList(fileList); // upload image\n\n\n  const customUpload = async data => {\n    const docName = sha256(data.file.name); //a unique name for the image\n\n    /** Firebase storage structure\n     * -| users\n     *   -| userId\n     *     -| pets\n     *      -| documents\n     */\n\n    const imgPath = `${pathPrefix}/${docName}`;\n    const newData = {\n      name: data.file.name,\n      type: data.file.type,\n      path: imgPath,\n      url: undefined,\n      uploadDate: new Date(),\n      verified: false,\n      data: data,\n      status: UPLOAD_STATUS.UPLOAD\n    };\n\n    if (isCompetition) {\n      let competitionData = [...petCompetitions];\n      competitionData.map((item, index) => {\n        if (item._id === key) {\n          item.certificate = newData;\n          return item;\n        }\n\n        return item;\n      });\n      dispatch(updateCompetitionsToUpload(competitionData));\n    } else {\n      let docs = [...petDocuments, newData];\n      dispatch(updateDocumentsToUpload(docs));\n    }\n\n    data.onSuccess(null);\n  }; // remove document\n\n\n  const handleRemove = async file => {\n    // remove competition\n    if (isCompetition) {\n      let competitionData = [...petCompetitions];\n      competitionData.map((item, index) => {\n        if (item._id === key) {\n          item.certificate = undefined;\n          return item;\n        }\n\n        return item;\n      });\n      dispatch(updateCompetitionsToUpload(competitionData)); // remove document\n    } else {\n      let docData = [...petDocuments];\n\n      if (file.url) {\n        // set status delete to remove it later onSave from firebase\n        docData.map(value => value.name === file.name ? value.status = UPLOAD_STATUS.DELETE : value);\n        dispatch(updateDocumentsToUpload(docData));\n      } else {\n        let docObj = docData.filter(value => value.name !== file.name);\n        dispatch(updateDocumentsToUpload(docObj));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Upload, {\n      listType: \"text\",\n      fileList: fileList,\n      onChange: handleChange,\n      customRequest: customUpload,\n      onRemove: handleRemove,\n      children: fileList.length >= maxFileNumber ? null : /*#__PURE__*/_jsxDEV(Button, {\n        size: props.size || 'medium',\n        variant: \"contained\",\n        color: \"secondary\",\n        startIcon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 108\n        }, this),\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DocumentsUpload, \"9cB72eTEUZsPCziG0YKq/5zTIis=\", false, function () {\n  return [useDispatch, useUser, usePetDocuments, usePetCompetitions];\n});\n\n_c = DocumentsUpload;\nexport default connect()(DocumentsUpload);\n\nvar _c;\n\n$RefreshReg$(_c, \"DocumentsUpload\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/upload/documents.upload.js"],"names":["React","useState","Upload","UploadOutlined","sha256","Button","connect","useDispatch","usePetCompetitions","usePetDocuments","useUser","updateCompetitionsToUpload","updateDocumentsToUpload","UPLOAD_STATUS","prepareDocumentsFileList","petDocuments","petList","forEach","value","index","push","uid","name","status","DONE","url","prepareCompetitionsFileList","petCompetitions","key","certificate","DocumentsUpload","props","dispatch","mode","isCompetition","type","competitionId","user","fileList","setFileList","pathPrefix","id","maxFileNumber","maxFiles","handleChange","customUpload","data","docName","file","imgPath","newData","path","undefined","uploadDate","Date","verified","UPLOAD","competitionData","map","item","_id","docs","onSuccess","handleRemove","docData","DELETE","docObj","filter","length","size"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { sha256 } from 'js-sha256';\nimport { Button } from '@material-ui/core';\nimport { connect, useDispatch } from 'react-redux';\nimport { usePetCompetitions, usePetDocuments } from 'helper/hooks/pets.hooks';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { updateCompetitionsToUpload, updateDocumentsToUpload } from 'redux/actions';\nimport { UPLOAD_STATUS } from 'helper/types';\n\nconst prepareDocumentsFileList = (petDocuments) => {\n    let petList = [];\n    petDocuments.forEach((value, index) => {\n        petList.push({\n            uid: index,\n            name: value.name,\n            status: UPLOAD_STATUS.DONE,\n            url: value.url,\n        });\n    });\n    return petList;\n};\n\nconst prepareCompetitionsFileList = (petCompetitions, key) => {\n    let petList = [];\n    petCompetitions.forEach((value, index) => {\n            if (value.certificate) {\n                petList.push({\n                    uid: index,\n                    name: value.certificate.name,\n                    status: UPLOAD_STATUS.DONE,\n                    url: value.certificate.url,\n                });\n            }\n    });\n    return petList;\n};\n\n/**\n *\n * @param  props\n * @returns Component to upload pet documents or certificates\n */\n\nconst DocumentsUpload = (props) => {\n    const dispatch = useDispatch();\n    const { mode } = props;\n    const isCompetition = props.type === 'competitions';\n    let key = isCompetition ? props.competitionId : null;\n\n    // get global states\n    const user = useUser();\n    const petDocuments = usePetDocuments();\n    const petCompetitions = usePetCompetitions();\n\n    const [fileList, setFileList] = useState(mode === 'add' ? [] : isCompetition ? prepareCompetitionsFileList(petCompetitions, key) : prepareDocumentsFileList(petDocuments));\n\n    const pathPrefix = `users/${user.id}/pets/documents`;\n    let maxFileNumber = props.maxFiles || 8;\n\n    // update file list\n    const handleChange = ({ fileList }) => setFileList(fileList);\n\n    // upload image\n    const customUpload = async (data) => {\n        const docName = sha256(data.file.name); //a unique name for the image\n\n        /** Firebase storage structure\n         * -| users\n         *   -| userId\n         *     -| pets\n         *      -| documents\n         */\n        const imgPath = `${pathPrefix}/${docName}`;\n\n        const newData = {\n            name: data.file.name,\n            type: data.file.type,\n            path: imgPath,\n            url: undefined,\n            uploadDate: new Date(),\n            verified: false,\n            data: data,\n            status: UPLOAD_STATUS.UPLOAD,\n        };\n\n        if (isCompetition) {\n            let competitionData = [...petCompetitions];\n            competitionData.map((item, index) => {\n                if (item._id === key) {\n                    item.certificate = newData;\n                    return item;\n                }\n                return item;\n            });\n            dispatch(updateCompetitionsToUpload(competitionData));\n        } else {\n            let docs = [...petDocuments, newData];\n            dispatch(updateDocumentsToUpload(docs));\n        }\n\n        data.onSuccess(null);\n    };\n\n    // remove document\n    const handleRemove = async (file) => {\n        // remove competition\n        if (isCompetition) {\n            let competitionData = [...petCompetitions];\n            competitionData.map((item, index) => {\n                if (item._id === key) {\n                    item.certificate = undefined;\n                    return item;\n                }\n                return item;\n            });\n\n            dispatch(updateCompetitionsToUpload(competitionData));\n            // remove document\n        } else {\n            let docData = [...petDocuments];\n\n            if (file.url) {\n                // set status delete to remove it later onSave from firebase\n                docData.map((value) => (value.name === file.name ? (value.status = UPLOAD_STATUS.DELETE) : value));\n                dispatch(updateDocumentsToUpload(docData));\n            } else {\n                let docObj = docData.filter((value) => value.name !== file.name);\n                dispatch(updateDocumentsToUpload(docObj));\n            }\n        }\n    };\n\n    return (\n        <div>\n            <Upload listType=\"text\" fileList={fileList} onChange={handleChange} customRequest={customUpload} onRemove={handleRemove}>\n                {fileList.length >= maxFileNumber ? null : (\n                    <Button size={props.size || 'medium'} variant=\"contained\" color=\"secondary\" startIcon={<UploadOutlined />}>\n                        Upload\n                    </Button>\n                )}\n            </Upload>\n        </div>\n    );\n};\n\nexport default connect()(DocumentsUpload);\n"]},"metadata":{},"sourceType":"module"}