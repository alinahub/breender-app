{"ast":null,"code":"export default class HttpService {\n  static extractUser(token) {\n    let base64Url = token.split('.')[1];\n    let base64 = base64Url.replace('-', '+').replace('_', '/');\n    let userJson = JSON.parse(atob(base64));\n    return {\n      id: userJson._id,\n      username: userJson.username,\n      role: userJson.role\n    };\n  }\n\n  static async get(url, onSuccess, onError) {\n    let token = window.localStorage['jwtToken'];\n    let header = new Headers();\n\n    if (token) {\n      header.append('Authorization', `JWT ${token}`);\n    }\n\n    try {\n      let resp = await fetch(url, {\n        method: 'GET',\n        headers: header\n      });\n\n      if (this.checkIfUnauthorized(resp)) {\n        window.location = '/login';\n      } else {\n        resp = await resp.json();\n      }\n\n      if (resp.error) {\n        onError(resp.error);\n      } else {\n        if (resp.hasOwnProperty('token')) {\n          window.localStorage['jwtToken'] = resp.token;\n          resp.user = this.extractUser(resp.token);\n        }\n\n        onSuccess(resp);\n      }\n    } catch (err) {\n      onError(err.message);\n    }\n  }\n\n  static async put(url, data, onSuccess, onError) {\n    let token = window.localStorage['jwtToken'];\n    let header = new Headers();\n\n    if (token) {\n      header.append('Authorization', `JWT ${token}`);\n    }\n\n    header.append('Content-Type', 'application/json');\n\n    try {\n      let resp = await fetch(url, {\n        method: 'PUT',\n        headers: header,\n        body: JSON.stringify(data)\n      });\n\n      if (this.checkIfUnauthorized(resp)) {\n        window.location = '/login';\n        return;\n      } else {\n        resp = await resp.json();\n      }\n\n      if (resp.error) {\n        onError(resp.error);\n      } else {\n        if (resp.hasOwnProperty('token')) {\n          window.localStorage['jwtToken'] = resp.token;\n          resp.user = this.extractUser(resp.token);\n        }\n\n        onSuccess(resp);\n      }\n    } catch (err) {\n      onError(err.message);\n    }\n  }\n\n  static async post(url, data, onSuccess, onError) {\n    let token = window.localStorage['jwtToken'];\n    let header = new Headers();\n\n    if (token) {\n      header.append('Authorization', `JWT ${token}`);\n    }\n\n    header.append('Content-Type', 'application/json');\n\n    try {\n      let resp = await fetch(url, {\n        method: 'POST',\n        headers: header,\n        body: JSON.stringify(data)\n      });\n\n      if (this.checkIfUnauthorized(resp)) {\n        window.location = '/login';\n        return;\n      } else {\n        resp = await resp.json();\n      }\n\n      if (resp.error) {\n        onError(resp.error);\n      } else {\n        if (resp.hasOwnProperty('token')) {\n          window.localStorage['jwtToken'] = resp.token;\n          resp.user = this.extractUser(resp.token);\n        }\n\n        onSuccess(resp);\n      }\n    } catch (err) {\n      onError(err.message);\n    }\n  }\n\n  static async remove(url, onSuccess, onError) {\n    let token = window.localStorage['jwtToken'];\n    let header = new Headers();\n\n    if (token) {\n      header.append('Authorization', `JWT ${token}`);\n    }\n\n    try {\n      let resp = await fetch(url, {\n        method: 'DELETE',\n        headers: header\n      });\n\n      if (this.checkIfUnauthorized(resp)) {\n        window.location = '/login';\n        return;\n      } else {\n        resp = await resp.json();\n      }\n\n      if (resp.error) {\n        onError(resp.error);\n      } else {\n        onSuccess(resp);\n      }\n    } catch (err) {\n      onError(err.message);\n    }\n  }\n\n  static checkIfUnauthorized(res) {\n    if (res.status === 401) {\n      return true;\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/services/HttpService.js"],"names":["HttpService","extractUser","token","base64Url","split","base64","replace","userJson","JSON","parse","atob","id","_id","username","role","get","url","onSuccess","onError","window","localStorage","header","Headers","append","resp","fetch","method","headers","checkIfUnauthorized","location","json","error","hasOwnProperty","user","err","message","put","data","body","stringify","post","remove","res","status"],"mappings":"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","sourcesContent":["export default class HttpService {\n    static extractUser(token) {\n        let base64Url = token.split('.')[1];\n        let base64 = base64Url.replace('-', '+').replace('_', '/');\n        let userJson = JSON.parse(atob(base64));\n        return {\n            id: userJson._id,\n            username: userJson.username,\n            role: userJson.role,\n        };\n    }\n\n    static async get(url, onSuccess, onError) {\n        let token = window.localStorage['jwtToken'];\n        let header = new Headers();\n        if (token) {\n            header.append('Authorization', `JWT ${token}`);\n        }\n\n        try {\n            let resp = await fetch(url, {\n                method: 'GET',\n                headers: header,\n            });\n\n            if (this.checkIfUnauthorized(resp)) {\n                window.location = '/login';\n            } else {\n                resp = await resp.json();\n            }\n\n            if (resp.error) {\n                onError(resp.error);\n            } else {\n                if (resp.hasOwnProperty('token')) {\n                    window.localStorage['jwtToken'] = resp.token;\n                    resp.user = this.extractUser(resp.token);\n                }\n                onSuccess(resp);\n            }\n        } catch (err) {\n            onError(err.message);\n        }\n    }\n\n    static async put(url, data, onSuccess, onError) {\n        let token = window.localStorage['jwtToken'];\n        let header = new Headers();\n        if (token) {\n            header.append('Authorization', `JWT ${token}`);\n        }\n        header.append('Content-Type', 'application/json');\n\n        try {\n            let resp = await fetch(url, {\n                method: 'PUT',\n                headers: header,\n                body: JSON.stringify(data),\n            });\n\n            if (this.checkIfUnauthorized(resp)) {\n                window.location = '/login';\n                return;\n            } else {\n                resp = await resp.json();\n            }\n\n            if (resp.error) {\n                onError(resp.error);\n            } else {\n                if (resp.hasOwnProperty('token')) {\n                    window.localStorage['jwtToken'] = resp.token;\n                    resp.user = this.extractUser(resp.token);\n                }\n                onSuccess(resp);\n            }\n        } catch (err) {\n            onError(err.message);\n        }\n    }\n\n    static async post(url, data, onSuccess, onError) {\n        let token = window.localStorage['jwtToken'];\n        let header = new Headers();\n        if (token) {\n            header.append('Authorization', `JWT ${token}`);\n        }\n        header.append('Content-Type', 'application/json');\n\n        try {\n            let resp = await fetch(url, {\n                method: 'POST',\n                headers: header,\n                body: JSON.stringify(data),\n            });\n\n            if (this.checkIfUnauthorized(resp)) {\n                window.location = '/login';\n                return;\n            } else {\n                resp = await resp.json();\n            }\n\n            if (resp.error) {\n                onError(resp.error);\n            } else {\n                if (resp.hasOwnProperty('token')) {\n                    window.localStorage['jwtToken'] = resp.token;\n                    resp.user = this.extractUser(resp.token);\n                }\n                onSuccess(resp);\n            }\n        } catch (err) {\n            onError(err.message);\n        }\n    }\n\n    static async remove(url, onSuccess, onError) {\n        let token = window.localStorage['jwtToken'];\n        let header = new Headers();\n        if (token) {\n            header.append('Authorization', `JWT ${token}`);\n        }\n\n        try {\n            let resp = await fetch(url, {\n                method: 'DELETE',\n                headers: header,\n            });\n\n            if (this.checkIfUnauthorized(resp)) {\n                window.location = '/login';\n                return;\n            } else {\n                resp = await resp.json();\n            }\n\n            if (resp.error) {\n                onError(resp.error);\n            } else {\n                onSuccess(resp);\n            }\n        } catch (err) {\n            onError(err.message);\n        }\n    }\n\n    static checkIfUnauthorized(res) {\n        if (res.status === 401) {\n            return true;\n        }\n        return false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}