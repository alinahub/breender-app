{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/views/UserLoginView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useHistory, withRouter } from 'react-router-dom';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport LoginComponent from '../components/UserLoginComponent';\nimport { login, startLoading, stopLoading, loginReset, me } from '../redux/actions';\nimport NotificationService from 'services/NotificationService';\n/**\n * For user login\n * @param {props} props\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UserLoginView(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const user = useSelector(state => state.user);\n  useEffect(() => {\n    var _user$user;\n\n    if ((_user$user = user.user) === null || _user$user === void 0 ? void 0 : _user$user.id) {\n      NotificationService.notify('success', 'Success', 'Sucessfully signed in.');\n      props.history.push('/');\n      props.dispatch(me(user.user.id));\n    }\n  }, [user, props]);\n\n  const onLogin = async (username, password) => {\n    dispatch(startLoading());\n    await dispatch(login(username, password));\n    dispatch(stopLoading());\n  };\n\n  const onCancel = () => {\n    history.push('/');\n  };\n\n  const onSignUp = () => {\n    props.history.push('/register');\n  };\n\n  return /*#__PURE__*/_jsxDEV(LoginComponent, {\n    user: user,\n    onCancel: onCancel,\n    onLogin: onLogin,\n    onSignUp: onSignUp\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 12\n  }, this);\n}\n\n_s(UserLoginView, \"qikjOdvJcVMHYrp+rrtlZYwiqL0=\", false, function () {\n  return [useDispatch, useHistory, useSelector];\n});\n\n_c = UserLoginView;\nexport default connect()(withRouter(UserLoginView));\n\nvar _c;\n\n$RefreshReg$(_c, \"UserLoginView\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/views/UserLoginView.js"],"names":["React","useEffect","useHistory","withRouter","connect","useDispatch","useSelector","LoginComponent","login","startLoading","stopLoading","loginReset","me","NotificationService","UserLoginView","props","dispatch","history","user","state","id","notify","push","onLogin","username","password","onCancel","onSignUp"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,kBAAvC;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,SAASC,KAAT,EAAgBC,YAAhB,EAA8BC,WAA9B,EAA2CC,UAA3C,EAAuDC,EAAvD,QAAiE,kBAAjE;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AAEA;AACA;AACA;AACA;;;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAC1B,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAMY,OAAO,GAAGf,UAAU,EAA1B;AACA,QAAMgB,IAAI,GAAGZ,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACZ,sBAAIiB,IAAI,CAACA,IAAT,+CAAI,WAAWE,EAAf,EAAmB;AACfP,MAAAA,mBAAmB,CAACQ,MAApB,CAA2B,SAA3B,EAAsC,SAAtC,EAAiD,wBAAjD;AACAN,MAAAA,KAAK,CAACE,OAAN,CAAcK,IAAd,CAAmB,GAAnB;AACAP,MAAAA,KAAK,CAACC,QAAN,CAAeJ,EAAE,CAACM,IAAI,CAACA,IAAL,CAAUE,EAAX,CAAjB;AACH;AACJ,GANQ,EAMN,CAACF,IAAD,EAAOH,KAAP,CANM,CAAT;;AAQA,QAAMQ,OAAO,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC1CT,IAAAA,QAAQ,CAACP,YAAY,EAAb,CAAR;AACA,UAAMO,QAAQ,CAACR,KAAK,CAACgB,QAAD,EAAWC,QAAX,CAAN,CAAd;AACAT,IAAAA,QAAQ,CAACN,WAAW,EAAZ,CAAR;AACH,GAJD;;AAMA,QAAMgB,QAAQ,GAAG,MAAM;AACnBT,IAAAA,OAAO,CAACK,IAAR,CAAa,GAAb;AACH,GAFD;;AAIA,QAAMK,QAAQ,GAAG,MAAM;AACnBZ,IAAAA,KAAK,CAACE,OAAN,CAAcK,IAAd,CAAmB,WAAnB;AACH,GAFD;;AAIA,sBAAO,QAAC,cAAD;AAAgB,IAAA,IAAI,EAAEJ,IAAtB;AAA4B,IAAA,QAAQ,EAAEQ,QAAtC;AAAgD,IAAA,OAAO,EAAEH,OAAzD;AAAkE,IAAA,QAAQ,EAAEI;AAA5E;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GA5BQb,a;UACYT,W,EACDH,U,EACHI,W;;;KAHRQ,a;AA8BT,eAAeV,OAAO,GAAGD,UAAU,CAACW,aAAD,CAAb,CAAtB","sourcesContent":["import React, { useEffect } from 'react';\nimport { useHistory, withRouter } from 'react-router-dom';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport LoginComponent from '../components/UserLoginComponent';\nimport { login, startLoading, stopLoading, loginReset, me } from '../redux/actions';\nimport NotificationService from 'services/NotificationService';\n\n/**\n * For user login\n * @param {props} props\n */\nfunction UserLoginView(props) {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const user = useSelector((state) => state.user);\n\n    useEffect(() => {\n        if (user.user?.id) {\n            NotificationService.notify('success', 'Success', 'Sucessfully signed in.');\n            props.history.push('/');\n            props.dispatch(me(user.user.id));\n        }\n    }, [user, props]);\n\n    const onLogin = async (username, password) => {\n        dispatch(startLoading());\n        await dispatch(login(username, password));\n        dispatch(stopLoading());\n    };\n\n    const onCancel = () => {\n        history.push('/');\n    };\n\n    const onSignUp = () => {\n        props.history.push('/register');\n    };\n\n    return <LoginComponent user={user} onCancel={onCancel} onLogin={onLogin} onSignUp={onSignUp} />;\n}\n\nexport default connect()(withRouter(UserLoginView));\n"]},"metadata":{},"sourceType":"module"}