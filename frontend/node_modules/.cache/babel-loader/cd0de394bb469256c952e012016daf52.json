{"ast":null,"code":"import { getUser } from 'helper/helpers';\nimport { NotificationService } from 'services';\nimport UserService from '../../services/UserService';\nexport function login(username, password) {\n  function onSuccess(user) {\n    return {\n      type: 'LOGIN_SUCCESS',\n      user: user,\n      isAuthenticated: true\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'LOGIN_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.login(username, password);\n      dispatch(onSuccess(resp.user));\n    } catch (e) {\n      dispatch(onFailure(e));\n      NotificationService.notify('error', 'Login Error', 'During login occurred an error. Please try again.');\n    }\n  };\n}\nexport function confirmEmail(email, token) {\n  function onSuccess(confirmation) {\n    return {\n      type: 'CONFIRM_EMAIL_SUCCESS',\n      confirmation: confirmation\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'CONFIRM_EMAIL_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.confirmEmail(email, token);\n      dispatch(onSuccess(resp));\n    } catch (e) {\n      NotificationService.notify('error', 'Error', 'During email confirmation occurred an error. Please try again.');\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport function logout() {\n  UserService.logout();\n  return {\n    type: 'LOGOUT'\n  };\n}\nexport function loginReset() {\n  function onSuccess(user, isAuthenticated) {\n    return {\n      type: 'LOGIN_RESET',\n      user: user,\n      isAuthenticated: isAuthenticated\n    };\n  }\n\n  return dispatch => {\n    let {\n      isAuthenticated,\n      user\n    } = getUser();\n    dispatch(onSuccess(user, isAuthenticated));\n  };\n}\nexport function register(email, username, password, city, isAdmin) {\n  function onSuccess(user) {\n    return {\n      type: 'LOGIN_SUCCESS',\n      user: user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'LOGIN_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.register(email, username, password, city, isAdmin);\n      dispatch(onSuccess(resp.user));\n    } catch (e) {\n      dispatch(onFailure(e));\n      NotificationService.notify('error', 'Registration Error', 'During registration occurred an error. Please try again.');\n    }\n  };\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/userActions.js"],"names":["getUser","NotificationService","UserService","login","username","password","onSuccess","user","type","isAuthenticated","onFailure","error","dispatch","resp","e","notify","confirmEmail","email","token","confirmation","logout","loginReset","register","city","isAdmin"],"mappings":"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","sourcesContent":["import { getUser } from 'helper/helpers';\nimport { NotificationService } from 'services';\nimport UserService from '../../services/UserService';\n\nexport function login(username, password) {\n    function onSuccess(user) {\n        return { type: 'LOGIN_SUCCESS', user: user, isAuthenticated: true };\n    }\n    function onFailure(error) {\n        return { type: 'LOGIN_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.login(username, password);\n            dispatch(onSuccess(resp.user));\n        } catch (e) {\n            dispatch(onFailure(e));\n            NotificationService.notify('error', 'Login Error', 'During login occurred an error. Please try again.');\n        }\n    };\n}\n\nexport function confirmEmail(email, token) {\n    function onSuccess(confirmation) {\n        return { type: 'CONFIRM_EMAIL_SUCCESS', confirmation: confirmation };\n    }\n    function onFailure(error) {\n        return { type: 'CONFIRM_EMAIL_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.confirmEmail(email, token);\n            dispatch(onSuccess(resp));\n        } catch (e) {\n            NotificationService.notify('error', 'Error', 'During email confirmation occurred an error. Please try again.');\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport function logout() {\n    UserService.logout();\n    return { type: 'LOGOUT' };\n}\n\nexport function loginReset() {\n    function onSuccess(user, isAuthenticated) {\n        return { type: 'LOGIN_RESET', user: user, isAuthenticated: isAuthenticated };\n    }\n    return (dispatch) => {\n        let { isAuthenticated, user } = getUser();\n        dispatch(onSuccess(user, isAuthenticated));\n    };\n}\n\nexport function register(email, username, password, city, isAdmin) {\n    function onSuccess(user) {\n        return { type: 'LOGIN_SUCCESS', user: user };\n    }\n    function onFailure(error) {\n        return { type: 'LOGIN_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.register(email, username, password, city, isAdmin);\n            dispatch(onSuccess(resp.user));\n        } catch (e) {\n            dispatch(onFailure(e));\n            NotificationService.notify('error', 'Registration Error', 'During registration occurred an error. Please try again.');\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}