{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/views/AddPetView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PetInformationForm, PetPhotosForm } from 'components/forms';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { usePet, usePetCompetitions, usePetDocuments, usePetPictures, usePetProfilePictureToUpload } from 'helper/hooks/pets.hooks';\nimport { addPet, clearPet } from 'redux/actions';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { useHistory } from 'react-router-dom';\nimport FirebaseService from 'services/FirebaseService';\nimport NotificationService from 'services/NotificationService';\nimport Loading from 'components/Loading';\nimport { updateCompetitionsToUpload, updateDocumentsToUpload, updatePicturesToUpload, updateProfilePicture } from 'redux/actions/uploadActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddPetView = props => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory(); // get user\n\n  const user = useUser(); // get pet upload states\n\n  const petDocuments = usePetDocuments();\n  const petCompetitions = usePetCompetitions();\n  const petPictures = usePetPictures();\n  const petProfilePictureToUpload = usePetProfilePictureToUpload();\n  const [loading, setLoading] = useState(true);\n  const [formIsDisabled, setFormIsDisabled] = useState(false);\n  const [name, setName] = useState('');\n  const [nickname, setNickname] = useState('');\n  const [sex, setSex] = useState('');\n  const [birthDate, setBirthDate] = useState(new Date());\n  const [species, setSpecies] = useState('');\n  const [breed, setBreed] = useState('');\n  const [price, setPrice] = useState('');\n  useEffect(() => {\n    const isEmpty = obj => obj === '' || obj === undefined;\n\n    const disabled = isEmpty(name) || Object.keys(petProfilePictureToUpload).length === 0 || isEmpty(sex) || isEmpty(species) || isEmpty(breed);\n    setFormIsDisabled(disabled);\n  }, [name, sex, breed, species, petProfilePictureToUpload]);\n  useEffect(() => {\n    let loading = true;\n\n    const clear = async () => {\n      if (!loading) return;\n      setLoading(false);\n    };\n\n    clear();\n    return () => {\n      loading = false;\n    };\n  }, [dispatch]);\n\n  window.onbeforeunload = event => {\n    dispatch(clearPet()); // dispatch(updateProfilePicture({}));\n  };\n\n  const uploadCompetitions = async () => {\n    const competitionsData = [...petCompetitions];\n\n    for (let index = 0; index < competitionsData.length; index++) {\n      let value = competitionsData[index];\n\n      if (value.certificate) {\n        const metadata = {\n          contentType: value.certificate.type\n        };\n        let url = await FirebaseService.upload(value.certificate.path, value.certificate.data, metadata);\n        competitionsData[index].certificate.url = url;\n      }\n    }\n\n    await dispatch(updateCompetitionsToUpload(competitionsData));\n  };\n\n  const uploadDocuments = async () => {\n    const documentsData = [...petDocuments];\n\n    for (let index = 0; index < documentsData.length; index++) {\n      let value = documentsData[index];\n      const metadata = {\n        contentType: value.type\n      };\n      let url = await FirebaseService.upload(value.path, value.data, metadata);\n      documentsData[index].url = url;\n    }\n\n    await dispatch(updateDocumentsToUpload(documentsData));\n  };\n\n  const uploadPictures = async () => {\n    const picturesData = [...petPictures];\n\n    for (let index = 0; index < picturesData.length; index++) {\n      let value = picturesData[index];\n      const metadata = {\n        contentType: 'image/png'\n      };\n      let url = await FirebaseService.upload(value.path, value.data, metadata);\n      picturesData[index].src = url;\n    }\n\n    await dispatch(updatePicturesToUpload(picturesData));\n  };\n\n  const uploadProfilePicture = async () => {\n    let value = petProfilePictureToUpload;\n    const metadata = {\n      contentType: 'image/png'\n    };\n    let url = await FirebaseService.upload(value.path, value.data, metadata);\n    value.src = url;\n    await dispatch(updateProfilePicture(value, {}));\n  };\n\n  const createPet = async () => {\n    setLoading(true); // upload documents and pics to firebase first\n\n    await uploadDocuments();\n    await uploadCompetitions();\n    await uploadPictures();\n    await uploadProfilePicture();\n    const dateCreated = Date.now(); // combine all information about a pet\n\n    let petToUpload = {\n      ownerId: user.id,\n      officialName: name,\n      nickname: nickname,\n      birthDate: birthDate,\n      sex: sex,\n      price: price,\n      profilePicture: petProfilePictureToUpload,\n      pictures: petPictures,\n      dateCreated: dateCreated,\n      breed: breed,\n      species: species,\n      competitions: petCompetitions,\n      documents: petDocuments\n    };\n\n    const onSuccess = () => {\n      NotificationService.notify('success', 'Success', 'Your four-legged friend was added to your profile!');\n      history.push('/'); //dispatch(clearPetInfos());\n    };\n\n    const onError = () => {\n      NotificationService.notify('error', 'Error', 'There was a problem uploading your pet.');\n    };\n\n    dispatch(addPet(petToUpload, onSuccess, onError));\n    setLoading(false);\n  };\n\n  return loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.layout,\n      children: [/*#__PURE__*/_jsxDEV(PetPhotosForm, {\n        mode: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PetInformationForm, {\n        mode: \"add\",\n        nameProp: {\n          name,\n          setName\n        },\n        nicknameProp: {\n          nickname,\n          setNickname\n        },\n        sexProp: {\n          sex,\n          setSex\n        },\n        birthDateProp: {\n          birthDate,\n          setBirthDate\n        },\n        speciesProp: {\n          species,\n          setSpecies\n        },\n        breedProp: {\n          breed,\n          setBreed\n        },\n        priceProp: {\n          price,\n          setPrice\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.button,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        disabled: formIsDisabled,\n        onClick: createPet,\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"large\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20,\n          color: \"white\",\n          style: {\n            marginRight: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 32\n        }, this) : '', \" Save\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddPetView, \"F6C8Vqgq9fZ9XjL5YwmmwOOChew=\", false, function () {\n  return [useStyles, useDispatch, useHistory, useUser, usePetDocuments, usePetCompetitions, usePetPictures, usePetProfilePictureToUpload];\n});\n\n_c = AddPetView;\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'center',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n      width: 'auto',\n      alignItems: 'center'\n    }\n  },\n  button: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    marginRight: 50\n  }\n})); // connect() establishes the connection to the redux functionalities\n\nexport default connect()(AddPetView);\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPetView\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/views/AddPetView.js"],"names":["React","useEffect","useState","connect","useDispatch","makeStyles","PetInformationForm","PetPhotosForm","Button","CircularProgress","usePet","usePetCompetitions","usePetDocuments","usePetPictures","usePetProfilePictureToUpload","addPet","clearPet","useUser","useHistory","FirebaseService","NotificationService","Loading","updateCompetitionsToUpload","updateDocumentsToUpload","updatePicturesToUpload","updateProfilePicture","AddPetView","props","classes","useStyles","dispatch","history","user","petDocuments","petCompetitions","petPictures","petProfilePictureToUpload","loading","setLoading","formIsDisabled","setFormIsDisabled","name","setName","nickname","setNickname","sex","setSex","birthDate","setBirthDate","Date","species","setSpecies","breed","setBreed","price","setPrice","isEmpty","obj","undefined","disabled","Object","keys","length","clear","window","onbeforeunload","event","uploadCompetitions","competitionsData","index","value","certificate","metadata","contentType","type","url","upload","path","data","uploadDocuments","documentsData","uploadPictures","picturesData","src","uploadProfilePicture","createPet","dateCreated","now","petToUpload","ownerId","id","officialName","profilePicture","pictures","competitions","documents","onSuccess","notify","push","onError","layout","button","marginRight","theme","display","width","justifyContent","breakpoints","down","flexDirection","alignItems"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PetInformationForm, PetPhotosForm } from 'components/forms';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { usePet, usePetCompetitions, usePetDocuments, usePetPictures, usePetProfilePictureToUpload } from 'helper/hooks/pets.hooks';\nimport { addPet, clearPet } from 'redux/actions';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { useHistory } from 'react-router-dom';\nimport FirebaseService from 'services/FirebaseService';\nimport NotificationService from 'services/NotificationService';\nimport Loading from 'components/Loading';\nimport { updateCompetitionsToUpload, updateDocumentsToUpload, updatePicturesToUpload, updateProfilePicture } from 'redux/actions/uploadActions';\n\nconst AddPetView = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    // get user\n    const user = useUser();\n\n    // get pet upload states\n    const petDocuments = usePetDocuments();\n    const petCompetitions = usePetCompetitions();\n    const petPictures = usePetPictures();\n    const petProfilePictureToUpload = usePetProfilePictureToUpload();\n\n    const [loading, setLoading] = useState(true);\n    const [formIsDisabled, setFormIsDisabled] = useState(false);\n    const [name, setName] = useState('');\n    const [nickname, setNickname] = useState('');\n    const [sex, setSex] = useState('');\n    const [birthDate, setBirthDate] = useState(new Date());\n    const [species, setSpecies] = useState('');\n    const [breed, setBreed] = useState('');\n    const [price, setPrice] = useState('');\n\n    useEffect(() => {\n        const isEmpty = (obj) => obj === '' || obj === undefined;\n        const disabled = isEmpty(name) || Object.keys(petProfilePictureToUpload).length === 0 || isEmpty(sex) || isEmpty(species) || isEmpty(breed);\n        setFormIsDisabled(disabled);\n    }, [name, sex, breed, species, petProfilePictureToUpload]);\n\n    useEffect(() => {\n        let loading = true;\n\n        const clear = async () => {\n            if (!loading) return;\n            setLoading(false);\n        };\n\n        clear();\n\n        return () => {\n            loading = false;\n        };\n    }, [dispatch]);\n\n    window.onbeforeunload = (event) => {\n       dispatch(clearPet());\n       // dispatch(updateProfilePicture({}));\n    };\n\n    const uploadCompetitions = async () => {\n        const competitionsData = [...petCompetitions];\n        for (let index = 0; index < competitionsData.length; index++) {\n            let value = competitionsData[index];\n            if (value.certificate) {\n                const metadata = {\n                    contentType: value.certificate.type,\n                };\n                let url = await FirebaseService.upload(value.certificate.path, value.certificate.data, metadata);\n                competitionsData[index].certificate.url = url;\n            }\n        }\n\n        await dispatch(updateCompetitionsToUpload(competitionsData));\n    };\n\n    const uploadDocuments = async () => {\n        const documentsData = [...petDocuments];\n        for (let index = 0; index < documentsData.length; index++) {\n            let value = documentsData[index];\n            const metadata = {\n                contentType: value.type,\n            };\n            let url = await FirebaseService.upload(value.path, value.data, metadata);\n            documentsData[index].url = url;\n        }\n\n        await dispatch(updateDocumentsToUpload(documentsData));\n    };\n\n    const uploadPictures = async () => {\n        const picturesData = [...petPictures];\n        for (let index = 0; index < picturesData.length; index++) {\n            let value = picturesData[index];\n            const metadata = {\n                contentType: 'image/png',\n            };\n\n            let url = await FirebaseService.upload(value.path, value.data, metadata);\n            picturesData[index].src = url;\n        }\n\n        await dispatch(updatePicturesToUpload(picturesData));\n    };\n\n    const uploadProfilePicture = async () => {\n        let value = petProfilePictureToUpload;\n        const metadata = {\n            contentType: 'image/png',\n        };\n\n        let url = await FirebaseService.upload(value.path, value.data, metadata);\n        value.src = url;\n\n        await dispatch(updateProfilePicture(value, {}));\n    };\n\n    const createPet = async () => {\n        setLoading(true);\n\n        // upload documents and pics to firebase first\n        await uploadDocuments();\n        await uploadCompetitions();\n        await uploadPictures();\n        await uploadProfilePicture();\n        \n        const dateCreated = Date.now();\n        // combine all information about a pet\n        let petToUpload = {\n            ownerId: user.id,\n            officialName: name,\n            nickname: nickname,\n            birthDate: birthDate,\n            sex: sex,\n            price: price,\n            profilePicture: petProfilePictureToUpload,\n            pictures: petPictures,\n            dateCreated: dateCreated,\n            breed: breed,\n            species: species,\n            competitions: petCompetitions,\n            documents: petDocuments,\n        };\n\n        const onSuccess = () => {\n            NotificationService.notify('success', 'Success', 'Your four-legged friend was added to your profile!');\n            history.push('/');\n            //dispatch(clearPetInfos());\n        };\n\n        const onError = () => {\n            NotificationService.notify('error', 'Error', 'There was a problem uploading your pet.');\n        };\n\n        dispatch(addPet(petToUpload, onSuccess, onError));\n        setLoading(false);\n    };\n\n    return loading ? (\n        <Loading />\n    ) : (\n        <div>\n            <div className={classes.layout}>\n                <PetPhotosForm mode=\"add\"/>\n                <PetInformationForm\n                    mode=\"add\"\n                    nameProp={{ name, setName }}\n                    nicknameProp={{ nickname, setNickname }}\n                    sexProp={{ sex, setSex }}\n                    birthDateProp={{ birthDate, setBirthDate }}\n                    speciesProp={{ species, setSpecies }}\n                    breedProp={{ breed, setBreed }}\n                    priceProp={{ price, setPrice }}\n                />\n            </div>\n            <div className={classes.button}>\n                <Button disabled={formIsDisabled} onClick={createPet} type=\"submit\" variant=\"contained\" color=\"secondary\" size=\"large\">\n                    {loading ? <CircularProgress size={20} color=\"white\" style={{ marginRight: 10 }} /> : ''} Save\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        display: 'flex',\n        width: '100%',\n        justifyContent: 'center',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'column',\n            width: 'auto',\n            alignItems: 'center',\n        },\n    },\n    button: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginRight: 50,\n    },\n}));\n\n// connect() establishes the connection to the redux functionalities\nexport default connect()(AddPetView);\n"]},"metadata":{},"sourceType":"module"}