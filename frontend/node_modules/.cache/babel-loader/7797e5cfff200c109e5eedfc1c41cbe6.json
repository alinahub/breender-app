{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/views/EditPetView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PetInformationForm, PetPhotosForm } from 'components/forms';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { usePet, usePetCompetitions, usePetDocuments, usePetPictures, usePetProfilePictureToRemove, usePetProfilePictureToUpload } from 'helper/hooks/pets.hooks';\nimport { changePet, getPet, updateCompetitionsToUpload, updateDocumentsToUpload, updatePicturesToUpload, updateProfilePicture } from 'redux/actions';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport Loading from 'components/Loading';\nimport { NotificationService, FirebaseService } from 'services';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditPetView = props => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n  const id = location.pathname.split('/edit/pet/')[1];\n  const pet = usePet();\n  const user = useUser(); // get pet upload states\n\n  const petDocuments = usePetDocuments();\n  const petCompetitions = usePetCompetitions();\n  const petPictures = usePetPictures();\n  const petProfilePictureToUpload = usePetProfilePictureToUpload();\n  const petProfilePictureToRemove = usePetProfilePictureToRemove();\n  useEffect(() => {\n    // update upload states\n    if (loading) {\n      dispatch(updateProfilePicture(pet.profilePicture, {}));\n      dispatch(updatePicturesToUpload(pet.pictures));\n      dispatch(updateCompetitionsToUpload(pet.competitions));\n      dispatch(updateDocumentsToUpload(pet.documents));\n    }\n\n    if (pet.officialName) {\n      setLoading(false);\n    } else {\n      const fetchPet = () => {\n        dispatch(getPet(id));\n        setLoading(false);\n      };\n\n      fetchPet();\n    }\n  }, [dispatch, id, pet]);\n  const [loading, setLoading] = useState(true);\n  const [formIsDisabled, setFormIsDisabled] = useState(false);\n  const [name, setName] = useState(pet.officialName);\n  const [nickname, setNickname] = useState(pet.nickname);\n  const [sex, setSex] = useState(pet.sex);\n  const [birthDate, setBirthDate] = useState(new Date(pet.birthDate));\n  const [species, setSpecies] = useState(pet.species);\n  const [breed, setBreed] = useState(pet.breed);\n  const [price, setPrice] = useState(pet.price);\n  const [documents, setDocuments] = useState(petDocuments);\n\n  const isEmpty = str => str === '' || str === undefined;\n\n  useEffect(() => {\n    const disabled = isEmpty(name) || Object.keys(petProfilePictureToUpload).length === 0 || isEmpty(sex) || isEmpty(species) || isEmpty(breed);\n    setFormIsDisabled(disabled);\n  }, [name, sex, breed, species, petProfilePictureToUpload]);\n  useEffect(() => {\n    if (pet.ownerId !== user.id) {\n      history.goBack();\n      NotificationService.notify('error', 'Navigation Error', 'This information is restricted');\n    }\n  }, [pet.ownerId, user.id, history]);\n\n  const uploadCompetitions = async () => {\n    const competitionsData = [...petCompetitions];\n\n    for (let index = 0; index < competitionsData.length; index++) {\n      let value = competitionsData[index];\n\n      if (value.certificate && Object.keys(value.certificate).length !== 0) {\n        if (value.certificate.status === 'upload') {\n          const metadata = {\n            contentType: value.certificate.type\n          };\n          let url = await FirebaseService.upload(value.certificate.path, value.certificate.data, metadata);\n          competitionsData[index].certificate.url = url;\n        } else if (value.certificate.status === 'delete') {\n          await FirebaseService.remove(value.certificate.path);\n        }\n      }\n    }\n\n    let competitions = competitionsData.filter(value => {\n      var _value$certificate;\n\n      return ((_value$certificate = value.certificate) === null || _value$certificate === void 0 ? void 0 : _value$certificate.status) !== 'delete';\n    });\n    await dispatch(updateCompetitionsToUpload(competitions));\n  };\n\n  const uploadDocuments = async () => {\n    const documentsData = [...petDocuments];\n\n    for (let index = 0; index < documentsData.length; index++) {\n      let value = documentsData[index];\n\n      if (value.status === 'upload') {\n        const metadata = {\n          contentType: value.type\n        };\n        let url = await FirebaseService.upload(value.path, value.data, metadata);\n        documentsData[index].url = url;\n      } else if (value.status === 'delete') {\n        await FirebaseService.remove(value.path);\n      }\n    }\n\n    let docs = documentsData.filter(value => value.status !== 'delete');\n    await dispatch(updateDocumentsToUpload(docs));\n  };\n\n  const uploadPictures = async () => {\n    const picturesData = [...petPictures];\n\n    for (let index = 0; index < picturesData.length; index++) {\n      let value = picturesData[index];\n\n      if (value.status === 'upload') {\n        const metadata = {\n          contentType: 'image/png'\n        };\n        let url = await FirebaseService.upload(value.path, value.data, metadata);\n        picturesData[index].src = url;\n      } else if (value.status === 'delete') {\n        await FirebaseService.remove(value.path);\n      }\n    }\n\n    let pics = picturesData.filter(value => value.status !== 'delete');\n    await dispatch(updatePicturesToUpload(pics));\n  };\n\n  const uploadProfilePicture = async () => {\n    // update profile picture only if new was uploaded\n    if (Object.keys(petProfilePictureToRemove).length !== 0 && (petProfilePictureToRemove === null || petProfilePictureToRemove === void 0 ? void 0 : petProfilePictureToRemove.src) !== '') {\n      // delete old one\n      await FirebaseService.remove(petProfilePictureToRemove.path); // upload new one\n\n      let value = petProfilePictureToUpload;\n      const metadata = {\n        contentType: 'image/png'\n      };\n      let url = await FirebaseService.upload(value.path, value.data, metadata);\n      value.src = url;\n      await dispatch(updateProfilePicture(value, {}));\n    }\n  };\n\n  const updatePet = async () => {\n    if (pet.profilePicture.path) {\n      setLoading(true); // upload documents and pics to firebase first\n\n      await uploadDocuments();\n      await uploadCompetitions();\n      await uploadPictures();\n      await uploadProfilePicture();\n      const dateCreated = Date.now(); // combine all information about a pet\n\n      let petToUpload = {\n        id: id,\n        ownerId: user.id,\n        officialName: name,\n        nickname: nickname,\n        birthDate: birthDate,\n        sex: sex,\n        price: price,\n        profilePicture: petProfilePictureToUpload,\n        pictures: petPictures,\n        dateCreated: dateCreated,\n        breed: breed,\n        species: species,\n        competitions: petCompetitions,\n        documents: petDocuments\n      };\n\n      const onSuccess = () => {\n        NotificationService.notify('success', 'Success', 'Your four-legged friend was successfully updated!');\n        history.push('/');\n      };\n\n      const onError = () => {\n        NotificationService.notify('error', 'Error', 'There was a problem updating your pet.');\n      };\n\n      dispatch(changePet(petToUpload, onSuccess, onError));\n      setLoading(false);\n    } else {\n      NotificationService.notify('error', 'Upload Error', 'Upload of the pet profile picture is required!');\n    }\n  }; // on canceling the view\n\n\n  const onCancel = async () => {\n    history.goBack();\n  };\n\n  return pet && !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.layout,\n      children: [/*#__PURE__*/_jsxDEV(PetPhotosForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PetInformationForm, {\n        nameProp: {\n          name,\n          setName\n        },\n        nicknameProp: {\n          nickname,\n          setNickname\n        },\n        sexProp: {\n          sex,\n          setSex\n        },\n        birthDateProp: {\n          birthDate,\n          setBirthDate\n        },\n        speciesProp: {\n          species,\n          setSpecies\n        },\n        breedProp: {\n          breed,\n          setBreed\n        },\n        priceProp: {\n          price,\n          setPrice\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.button,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: onCancel,\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"large\",\n        style: {\n          marginRight: 20\n        },\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: formIsDisabled,\n        onClick: updatePet,\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20,\n          color: \"white\",\n          style: {\n            marginRight: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 32\n        }, this) : '', \" Save\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditPetView, \"Bl5V39PvqTfI4NsWU0BOI9RN0hw=\", false, function () {\n  return [useStyles, useDispatch, useHistory, useLocation, usePet, useUser, usePetDocuments, usePetCompetitions, usePetPictures, usePetProfilePictureToUpload, usePetProfilePictureToRemove];\n});\n\n_c = EditPetView;\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'center',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n      width: 'auto',\n      alignItems: 'center'\n    }\n  },\n  button: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    marginRight: 20\n  }\n})); // connect() establishes the connection to the redux functionalities\n\nexport default connect()(EditPetView);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPetView\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/views/EditPetView.js"],"names":["React","useEffect","useState","connect","useDispatch","makeStyles","PetInformationForm","PetPhotosForm","Button","CircularProgress","usePet","usePetCompetitions","usePetDocuments","usePetPictures","usePetProfilePictureToRemove","usePetProfilePictureToUpload","changePet","getPet","updateCompetitionsToUpload","updateDocumentsToUpload","updatePicturesToUpload","updateProfilePicture","useUser","Loading","NotificationService","FirebaseService","useHistory","useLocation","EditPetView","props","classes","useStyles","dispatch","history","location","id","pathname","split","pet","user","petDocuments","petCompetitions","petPictures","petProfilePictureToUpload","petProfilePictureToRemove","loading","profilePicture","pictures","competitions","documents","officialName","setLoading","fetchPet","formIsDisabled","setFormIsDisabled","name","setName","nickname","setNickname","sex","setSex","birthDate","setBirthDate","Date","species","setSpecies","breed","setBreed","price","setPrice","setDocuments","isEmpty","str","undefined","disabled","Object","keys","length","ownerId","goBack","notify","uploadCompetitions","competitionsData","index","value","certificate","status","metadata","contentType","type","url","upload","path","data","remove","filter","uploadDocuments","documentsData","docs","uploadPictures","picturesData","src","pics","uploadProfilePicture","updatePet","dateCreated","now","petToUpload","onSuccess","push","onError","onCancel","layout","button","marginRight","theme","display","width","justifyContent","breakpoints","down","flexDirection","alignItems"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,kBAAT,EAA6BC,aAA7B,QAAkD,kBAAlD;AACA,SAASC,MAAT,EAAiBC,gBAAjB,QAAyC,mBAAzC;AACA,SAASC,MAAT,EAAiBC,kBAAjB,EAAqCC,eAArC,EAAsDC,cAAtD,EAAsEC,4BAAtE,EAAoGC,4BAApG,QAAwI,yBAAxI;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,0BAA5B,EAAwDC,uBAAxD,EAAiFC,sBAAjF,EAAyGC,oBAAzG,QAAqI,eAArI;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,mBAAT,EAA8BC,eAA9B,QAAqD,UAArD;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAMC,OAAO,GAAGC,SAAS,EAAzB;AACA,QAAMC,QAAQ,GAAG5B,WAAW,EAA5B;AACA,QAAM6B,OAAO,GAAGP,UAAU,EAA1B;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAMQ,EAAE,GAAGD,QAAQ,CAACE,QAAT,CAAkBC,KAAlB,CAAwB,YAAxB,EAAsC,CAAtC,CAAX;AACA,QAAMC,GAAG,GAAG5B,MAAM,EAAlB;AACA,QAAM6B,IAAI,GAAGjB,OAAO,EAApB,CAR2B,CAU3B;;AACA,QAAMkB,YAAY,GAAG5B,eAAe,EAApC;AACA,QAAM6B,eAAe,GAAG9B,kBAAkB,EAA1C;AACA,QAAM+B,WAAW,GAAG7B,cAAc,EAAlC;AACA,QAAM8B,yBAAyB,GAAG5B,4BAA4B,EAA9D;AACA,QAAM6B,yBAAyB,GAAG9B,4BAA4B,EAA9D;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAI4C,OAAJ,EAAa;AACTb,MAAAA,QAAQ,CAACX,oBAAoB,CAACiB,GAAG,CAACQ,cAAL,EAAqB,EAArB,CAArB,CAAR;AACAd,MAAAA,QAAQ,CAACZ,sBAAsB,CAACkB,GAAG,CAACS,QAAL,CAAvB,CAAR;AACAf,MAAAA,QAAQ,CAACd,0BAA0B,CAACoB,GAAG,CAACU,YAAL,CAA3B,CAAR;AACAhB,MAAAA,QAAQ,CAACb,uBAAuB,CAACmB,GAAG,CAACW,SAAL,CAAxB,CAAR;AAEH;;AAED,QAAIX,GAAG,CAACY,YAAR,EAAsB;AAClBC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAFD,MAEO;AACH,YAAMC,QAAQ,GAAG,MAAM;AACnBpB,QAAAA,QAAQ,CAACf,MAAM,CAACkB,EAAD,CAAP,CAAR;AACAgB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAHD;;AAIAC,MAAAA,QAAQ;AACX;AACJ,GAnBQ,EAmBN,CAACpB,QAAD,EAAWG,EAAX,EAAeG,GAAf,CAnBM,CAAT;AAqBA,QAAM,CAACO,OAAD,EAAUM,UAAV,IAAwBjD,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACmD,cAAD,EAAiBC,iBAAjB,IAAsCpD,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACqD,IAAD,EAAOC,OAAP,IAAkBtD,QAAQ,CAACoC,GAAG,CAACY,YAAL,CAAhC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BxD,QAAQ,CAACoC,GAAG,CAACmB,QAAL,CAAxC;AACA,QAAM,CAACE,GAAD,EAAMC,MAAN,IAAgB1D,QAAQ,CAACoC,GAAG,CAACqB,GAAL,CAA9B;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4B5D,QAAQ,CAAC,IAAI6D,IAAJ,CAASzB,GAAG,CAACuB,SAAb,CAAD,CAA1C;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwB/D,QAAQ,CAACoC,GAAG,CAAC0B,OAAL,CAAtC;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBjE,QAAQ,CAACoC,GAAG,CAAC4B,KAAL,CAAlC;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBnE,QAAQ,CAACoC,GAAG,CAAC8B,KAAL,CAAlC;AAEA,QAAM,CAACnB,SAAD,EAAYqB,YAAZ,IAA4BpE,QAAQ,CAACsC,YAAD,CAA1C;;AAEA,QAAM+B,OAAO,GAAIC,GAAD,IAASA,GAAG,KAAK,EAAR,IAAcA,GAAG,KAAKC,SAA/C;;AAEAxE,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMyE,QAAQ,GAAGH,OAAO,CAAChB,IAAD,CAAP,IAAiBoB,MAAM,CAACC,IAAP,CAAYjC,yBAAZ,EAAuCkC,MAAvC,KAAkD,CAAnE,IAAwEN,OAAO,CAACZ,GAAD,CAA/E,IAAwFY,OAAO,CAACP,OAAD,CAA/F,IAA4GO,OAAO,CAACL,KAAD,CAApI;AACAZ,IAAAA,iBAAiB,CAACoB,QAAD,CAAjB;AACH,GAHQ,EAGN,CAACnB,IAAD,EAAOI,GAAP,EAAYO,KAAZ,EAAmBF,OAAnB,EAA4BrB,yBAA5B,CAHM,CAAT;AAKA1C,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIqC,GAAG,CAACwC,OAAJ,KAAgBvC,IAAI,CAACJ,EAAzB,EAA6B;AACzBF,MAAAA,OAAO,CAAC8C,MAAR;AACAvD,MAAAA,mBAAmB,CAACwD,MAApB,CAA2B,OAA3B,EAAoC,kBAApC,EAAwD,gCAAxD;AACH;AACJ,GALQ,EAKN,CAAC1C,GAAG,CAACwC,OAAL,EAAcvC,IAAI,CAACJ,EAAnB,EAAuBF,OAAvB,CALM,CAAT;;AAOA,QAAMgD,kBAAkB,GAAG,YAAY;AACnC,UAAMC,gBAAgB,GAAG,CAAC,GAAGzC,eAAJ,CAAzB;;AACA,SAAK,IAAI0C,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,gBAAgB,CAACL,MAA7C,EAAqDM,KAAK,EAA1D,EAA8D;AAC1D,UAAIC,KAAK,GAAGF,gBAAgB,CAACC,KAAD,CAA5B;;AAEA,UAAIC,KAAK,CAACC,WAAN,IAAqBV,MAAM,CAACC,IAAP,CAAYQ,KAAK,CAACC,WAAlB,EAA+BR,MAA/B,KAA0C,CAAnE,EAAsE;AAClE,YAAIO,KAAK,CAACC,WAAN,CAAkBC,MAAlB,KAA6B,QAAjC,EAA2C;AACvC,gBAAMC,QAAQ,GAAG;AACbC,YAAAA,WAAW,EAAEJ,KAAK,CAACC,WAAN,CAAkBI;AADlB,WAAjB;AAGA,cAAIC,GAAG,GAAG,MAAMjE,eAAe,CAACkE,MAAhB,CAAuBP,KAAK,CAACC,WAAN,CAAkBO,IAAzC,EAA+CR,KAAK,CAACC,WAAN,CAAkBQ,IAAjE,EAAuEN,QAAvE,CAAhB;AACAL,UAAAA,gBAAgB,CAACC,KAAD,CAAhB,CAAwBE,WAAxB,CAAoCK,GAApC,GAA0CA,GAA1C;AACH,SAND,MAMO,IAAIN,KAAK,CAACC,WAAN,CAAkBC,MAAlB,KAA6B,QAAjC,EAA2C;AAC9C,gBAAM7D,eAAe,CAACqE,MAAhB,CAAuBV,KAAK,CAACC,WAAN,CAAkBO,IAAzC,CAAN;AACH;AACJ;AACJ;;AAED,QAAI5C,YAAY,GAAGkC,gBAAgB,CAACa,MAAjB,CAAyBX,KAAD;AAAA;;AAAA,aAAW,uBAAAA,KAAK,CAACC,WAAN,0EAAmBC,MAAnB,MAA8B,QAAzC;AAAA,KAAxB,CAAnB;AACA,UAAMtD,QAAQ,CAACd,0BAA0B,CAAC8B,YAAD,CAA3B,CAAd;AACH,GApBD;;AAsBA,QAAMgD,eAAe,GAAG,YAAY;AAChC,UAAMC,aAAa,GAAG,CAAC,GAAGzD,YAAJ,CAAtB;;AACA,SAAK,IAAI2C,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGc,aAAa,CAACpB,MAA1C,EAAkDM,KAAK,EAAvD,EAA2D;AACvD,UAAIC,KAAK,GAAGa,aAAa,CAACd,KAAD,CAAzB;;AAEA,UAAIC,KAAK,CAACE,MAAN,KAAiB,QAArB,EAA+B;AAC3B,cAAMC,QAAQ,GAAG;AACbC,UAAAA,WAAW,EAAEJ,KAAK,CAACK;AADN,SAAjB;AAGA,YAAIC,GAAG,GAAG,MAAMjE,eAAe,CAACkE,MAAhB,CAAuBP,KAAK,CAACQ,IAA7B,EAAmCR,KAAK,CAACS,IAAzC,EAA+CN,QAA/C,CAAhB;AACAU,QAAAA,aAAa,CAACd,KAAD,CAAb,CAAqBO,GAArB,GAA2BA,GAA3B;AACH,OAND,MAMO,IAAIN,KAAK,CAACE,MAAN,KAAiB,QAArB,EAA+B;AAClC,cAAM7D,eAAe,CAACqE,MAAhB,CAAuBV,KAAK,CAACQ,IAA7B,CAAN;AACH;AACJ;;AAED,QAAIM,IAAI,GAAGD,aAAa,CAACF,MAAd,CAAsBX,KAAD,IAAWA,KAAK,CAACE,MAAN,KAAiB,QAAjD,CAAX;AACA,UAAMtD,QAAQ,CAACb,uBAAuB,CAAC+E,IAAD,CAAxB,CAAd;AACH,GAlBD;;AAoBA,QAAMC,cAAc,GAAG,YAAY;AAC/B,UAAMC,YAAY,GAAG,CAAC,GAAG1D,WAAJ,CAArB;;AACA,SAAK,IAAIyC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGiB,YAAY,CAACvB,MAAzC,EAAiDM,KAAK,EAAtD,EAA0D;AACtD,UAAIC,KAAK,GAAGgB,YAAY,CAACjB,KAAD,CAAxB;;AAEA,UAAIC,KAAK,CAACE,MAAN,KAAiB,QAArB,EAA+B;AAC3B,cAAMC,QAAQ,GAAG;AACbC,UAAAA,WAAW,EAAE;AADA,SAAjB;AAIA,YAAIE,GAAG,GAAG,MAAMjE,eAAe,CAACkE,MAAhB,CAAuBP,KAAK,CAACQ,IAA7B,EAAmCR,KAAK,CAACS,IAAzC,EAA+CN,QAA/C,CAAhB;AACAa,QAAAA,YAAY,CAACjB,KAAD,CAAZ,CAAoBkB,GAApB,GAA0BX,GAA1B;AACH,OAPD,MAOO,IAAIN,KAAK,CAACE,MAAN,KAAiB,QAArB,EAA+B;AAClC,cAAM7D,eAAe,CAACqE,MAAhB,CAAuBV,KAAK,CAACQ,IAA7B,CAAN;AACH;AACJ;;AACD,QAAIU,IAAI,GAAGF,YAAY,CAACL,MAAb,CAAqBX,KAAD,IAAWA,KAAK,CAACE,MAAN,KAAiB,QAAhD,CAAX;AACA,UAAMtD,QAAQ,CAACZ,sBAAsB,CAACkF,IAAD,CAAvB,CAAd;AACH,GAlBD;;AAoBA,QAAMC,oBAAoB,GAAG,YAAY;AACrC;AACA,QAAI5B,MAAM,CAACC,IAAP,CAAYhC,yBAAZ,EAAuCiC,MAAvC,KAAkD,CAAlD,IAAuD,CAAAjC,yBAAyB,SAAzB,IAAAA,yBAAyB,WAAzB,YAAAA,yBAAyB,CAAEyD,GAA3B,MAAmC,EAA9F,EAAkG;AAC9F;AACA,YAAM5E,eAAe,CAACqE,MAAhB,CAAuBlD,yBAAyB,CAACgD,IAAjD,CAAN,CAF8F,CAI9F;;AACA,UAAIR,KAAK,GAAGzC,yBAAZ;AACA,YAAM4C,QAAQ,GAAG;AACbC,QAAAA,WAAW,EAAE;AADA,OAAjB;AAIA,UAAIE,GAAG,GAAG,MAAMjE,eAAe,CAACkE,MAAhB,CAAuBP,KAAK,CAACQ,IAA7B,EAAmCR,KAAK,CAACS,IAAzC,EAA+CN,QAA/C,CAAhB;AACAH,MAAAA,KAAK,CAACiB,GAAN,GAAYX,GAAZ;AAEA,YAAM1D,QAAQ,CAACX,oBAAoB,CAAC+D,KAAD,EAAQ,EAAR,CAArB,CAAd;AACH;AACJ,GAjBD;;AAmBA,QAAMoB,SAAS,GAAG,YAAY;AAC1B,QAAIlE,GAAG,CAACQ,cAAJ,CAAmB8C,IAAvB,EAA6B;AACzBzC,MAAAA,UAAU,CAAC,IAAD,CAAV,CADyB,CAGzB;;AAEA,YAAM6C,eAAe,EAArB;AACA,YAAMf,kBAAkB,EAAxB;AACA,YAAMkB,cAAc,EAApB;AACA,YAAMI,oBAAoB,EAA1B;AAEA,YAAME,WAAW,GAAG1C,IAAI,CAAC2C,GAAL,EAApB,CAVyB,CAWzB;;AACA,UAAIC,WAAW,GAAG;AACdxE,QAAAA,EAAE,EAAEA,EADU;AAEd2C,QAAAA,OAAO,EAAEvC,IAAI,CAACJ,EAFA;AAGde,QAAAA,YAAY,EAAEK,IAHA;AAIdE,QAAAA,QAAQ,EAAEA,QAJI;AAKdI,QAAAA,SAAS,EAAEA,SALG;AAMdF,QAAAA,GAAG,EAAEA,GANS;AAOdS,QAAAA,KAAK,EAAEA,KAPO;AAQdtB,QAAAA,cAAc,EAAEH,yBARF;AASdI,QAAAA,QAAQ,EAAEL,WATI;AAUd+D,QAAAA,WAAW,EAAEA,WAVC;AAWdvC,QAAAA,KAAK,EAAEA,KAXO;AAYdF,QAAAA,OAAO,EAAEA,OAZK;AAadhB,QAAAA,YAAY,EAAEP,eAbA;AAcdQ,QAAAA,SAAS,EAAET;AAdG,OAAlB;;AAiBA,YAAMoE,SAAS,GAAG,MAAM;AACpBpF,QAAAA,mBAAmB,CAACwD,MAApB,CAA2B,SAA3B,EAAsC,SAAtC,EAAiD,mDAAjD;AACA/C,QAAAA,OAAO,CAAC4E,IAAR,CAAa,GAAb;AACH,OAHD;;AAKA,YAAMC,OAAO,GAAG,MAAM;AAClBtF,QAAAA,mBAAmB,CAACwD,MAApB,CAA2B,OAA3B,EAAoC,OAApC,EAA6C,wCAA7C;AACH,OAFD;;AAIAhD,MAAAA,QAAQ,CAAChB,SAAS,CAAC2F,WAAD,EAAcC,SAAd,EAAyBE,OAAzB,CAAV,CAAR;AACA3D,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAxCD,MAwCO;AACH3B,MAAAA,mBAAmB,CAACwD,MAApB,CAA2B,OAA3B,EAAoC,cAApC,EAAoD,gDAApD;AACH;AACJ,GA5CD,CAjJ2B,CA+L3B;;;AACA,QAAM+B,QAAQ,GAAG,YAAY;AACzB9E,IAAAA,OAAO,CAAC8C,MAAR;AACH,GAFD;;AAIA,SAAOzC,GAAG,IAAI,CAACO,OAAR,gBACH;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEf,OAAO,CAACkF,MAAxB;AAAA,8BACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,kBAAD;AACI,QAAA,QAAQ,EAAE;AAAEzD,UAAAA,IAAF;AAAQC,UAAAA;AAAR,SADd;AAEI,QAAA,YAAY,EAAE;AAAEC,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,SAFlB;AAGI,QAAA,OAAO,EAAE;AAAEC,UAAAA,GAAF;AAAOC,UAAAA;AAAP,SAHb;AAII,QAAA,aAAa,EAAE;AAAEC,UAAAA,SAAF;AAAaC,UAAAA;AAAb,SAJnB;AAKI,QAAA,WAAW,EAAE;AAAEE,UAAAA,OAAF;AAAWC,UAAAA;AAAX,SALjB;AAMI,QAAA,SAAS,EAAE;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT,SANf;AAOI,QAAA,SAAS,EAAE;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT;AAPf;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAaI;AAAK,MAAA,SAAS,EAAEvC,OAAO,CAACmF,MAAxB;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEF,QAAjB;AAA2B,QAAA,OAAO,EAAC,WAAnC;AAA+C,QAAA,KAAK,EAAC,WAArD;AAAiE,QAAA,IAAI,EAAC,OAAtE;AAA8E,QAAA,KAAK,EAAE;AAAEG,UAAAA,WAAW,EAAE;AAAf,SAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE7D,cAAlB;AAAkC,QAAA,OAAO,EAAEmD,SAA3C;AAAsD,QAAA,IAAI,EAAC,QAA3D;AAAoE,QAAA,OAAO,EAAC,WAA5E;AAAwF,QAAA,KAAK,EAAC,SAA9F;AAAwG,QAAA,IAAI,EAAC,OAA7G;AAAA,mBACK3D,OAAO,gBAAG,QAAC,gBAAD;AAAkB,UAAA,IAAI,EAAE,EAAxB;AAA4B,UAAA,KAAK,EAAC,OAAlC;AAA0C,UAAA,KAAK,EAAE;AAAEqE,YAAAA,WAAW,EAAE;AAAf;AAAjD;AAAA;AAAA;AAAA;AAAA,gBAAH,GAA8E,EAD1F;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADG,gBAwBH,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAxBJ;AA0BH,CA9ND;;GAAMtF,W;UACcG,S,EACC3B,W,EACDsB,U,EACCC,W,EAGLjB,M,EACCY,O,EAGQV,e,EACGD,kB,EACJE,c,EACcE,4B,EACAD,4B;;;KAfhCc,W;AAgON,MAAMG,SAAS,GAAG1B,UAAU,CAAE8G,KAAD,KAAY;AACrCH,EAAAA,MAAM,EAAE;AACJI,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,KAAK,EAAE,MAFH;AAGJC,IAAAA,cAAc,EAAE,QAHZ;AAIJ,KAACH,KAAK,CAACI,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AAC5BC,MAAAA,aAAa,EAAE,QADa;AAE5BJ,MAAAA,KAAK,EAAE,MAFqB;AAG5BK,MAAAA,UAAU,EAAE;AAHgB;AAJ5B,GAD6B;AAWrCT,EAAAA,MAAM,EAAE;AACJG,IAAAA,OAAO,EAAE,MADL;AAEJE,IAAAA,cAAc,EAAE,UAFZ;AAGJJ,IAAAA,WAAW,EAAE;AAHT;AAX6B,CAAZ,CAAD,CAA5B,C,CAkBA;;AACA,eAAe/G,OAAO,GAAGyB,WAAH,CAAtB","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PetInformationForm, PetPhotosForm } from 'components/forms';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { usePet, usePetCompetitions, usePetDocuments, usePetPictures, usePetProfilePictureToRemove, usePetProfilePictureToUpload } from 'helper/hooks/pets.hooks';\nimport { changePet, getPet, updateCompetitionsToUpload, updateDocumentsToUpload, updatePicturesToUpload, updateProfilePicture } from 'redux/actions';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport Loading from 'components/Loading';\nimport { NotificationService, FirebaseService } from 'services';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nconst EditPetView = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = useLocation();\n\n    const id = location.pathname.split('/edit/pet/')[1];\n    const pet = usePet();\n    const user = useUser();\n\n    // get pet upload states\n    const petDocuments = usePetDocuments();\n    const petCompetitions = usePetCompetitions();\n    const petPictures = usePetPictures();\n    const petProfilePictureToUpload = usePetProfilePictureToUpload();\n    const petProfilePictureToRemove = usePetProfilePictureToRemove();\n\n    useEffect(() => {\n        // update upload states\n        if (loading) {\n            dispatch(updateProfilePicture(pet.profilePicture, {}));\n            dispatch(updatePicturesToUpload(pet.pictures));\n            dispatch(updateCompetitionsToUpload(pet.competitions));\n            dispatch(updateDocumentsToUpload(pet.documents));\n    \n        }\n\n        if (pet.officialName) {\n            setLoading(false);\n        } else {\n            const fetchPet = () => {\n                dispatch(getPet(id));\n                setLoading(false);\n            };\n            fetchPet();\n        }\n    }, [dispatch, id, pet]);\n\n    const [loading, setLoading] = useState(true);\n    const [formIsDisabled, setFormIsDisabled] = useState(false);\n    const [name, setName] = useState(pet.officialName);\n    const [nickname, setNickname] = useState(pet.nickname);\n    const [sex, setSex] = useState(pet.sex);\n    const [birthDate, setBirthDate] = useState(new Date(pet.birthDate));\n    const [species, setSpecies] = useState(pet.species);\n    const [breed, setBreed] = useState(pet.breed);\n    const [price, setPrice] = useState(pet.price);\n\n    const [documents, setDocuments] = useState(petDocuments);\n\n    const isEmpty = (str) => str === '' || str === undefined;\n\n    useEffect(() => {\n        const disabled = isEmpty(name) || Object.keys(petProfilePictureToUpload).length === 0 || isEmpty(sex) || isEmpty(species) || isEmpty(breed);\n        setFormIsDisabled(disabled);\n    }, [name, sex, breed, species, petProfilePictureToUpload]);\n\n    useEffect(() => {\n        if (pet.ownerId !== user.id) {\n            history.goBack();\n            NotificationService.notify('error', 'Navigation Error', 'This information is restricted');\n        }\n    }, [pet.ownerId, user.id, history]);\n\n    const uploadCompetitions = async () => {\n        const competitionsData = [...petCompetitions];\n        for (let index = 0; index < competitionsData.length; index++) {\n            let value = competitionsData[index];\n\n            if (value.certificate && Object.keys(value.certificate).length !== 0) {\n                if (value.certificate.status === 'upload') {\n                    const metadata = {\n                        contentType: value.certificate.type,\n                    };\n                    let url = await FirebaseService.upload(value.certificate.path, value.certificate.data, metadata);\n                    competitionsData[index].certificate.url = url;\n                } else if (value.certificate.status === 'delete') {\n                    await FirebaseService.remove(value.certificate.path);\n                }\n            }\n        }\n\n        let competitions = competitionsData.filter((value) => value.certificate?.status !== 'delete');\n        await dispatch(updateCompetitionsToUpload(competitions));\n    };\n\n    const uploadDocuments = async () => {\n        const documentsData = [...petDocuments];\n        for (let index = 0; index < documentsData.length; index++) {\n            let value = documentsData[index];\n\n            if (value.status === 'upload') {\n                const metadata = {\n                    contentType: value.type,\n                };\n                let url = await FirebaseService.upload(value.path, value.data, metadata);\n                documentsData[index].url = url;\n            } else if (value.status === 'delete') {\n                await FirebaseService.remove(value.path);\n            }\n        }\n\n        let docs = documentsData.filter((value) => value.status !== 'delete');\n        await dispatch(updateDocumentsToUpload(docs));\n    };\n\n    const uploadPictures = async () => {\n        const picturesData = [...petPictures];\n        for (let index = 0; index < picturesData.length; index++) {\n            let value = picturesData[index];\n\n            if (value.status === 'upload') {\n                const metadata = {\n                    contentType: 'image/png',\n                };\n\n                let url = await FirebaseService.upload(value.path, value.data, metadata);\n                picturesData[index].src = url;\n            } else if (value.status === 'delete') {\n                await FirebaseService.remove(value.path);\n            }\n        }\n        let pics = picturesData.filter((value) => value.status !== 'delete');\n        await dispatch(updatePicturesToUpload(pics));\n    };\n\n    const uploadProfilePicture = async () => {\n        // update profile picture only if new was uploaded\n        if (Object.keys(petProfilePictureToRemove).length !== 0 && petProfilePictureToRemove?.src !== '') {\n            // delete old one\n            await FirebaseService.remove(petProfilePictureToRemove.path);\n\n            // upload new one\n            let value = petProfilePictureToUpload;\n            const metadata = {\n                contentType: 'image/png',\n            };\n\n            let url = await FirebaseService.upload(value.path, value.data, metadata);\n            value.src = url;\n\n            await dispatch(updateProfilePicture(value, {}));\n        }\n    };\n\n    const updatePet = async () => {\n        if (pet.profilePicture.path) {\n            setLoading(true);\n\n            // upload documents and pics to firebase first\n            \n            await uploadDocuments();\n            await uploadCompetitions();\n            await uploadPictures();\n            await uploadProfilePicture();\n\n            const dateCreated = Date.now();\n            // combine all information about a pet\n            let petToUpload = {\n                id: id,\n                ownerId: user.id,\n                officialName: name,\n                nickname: nickname,\n                birthDate: birthDate,\n                sex: sex,\n                price: price,\n                profilePicture: petProfilePictureToUpload,\n                pictures: petPictures,\n                dateCreated: dateCreated,\n                breed: breed,\n                species: species,\n                competitions: petCompetitions,\n                documents: petDocuments,\n            };\n\n            const onSuccess = () => {\n                NotificationService.notify('success', 'Success', 'Your four-legged friend was successfully updated!');\n                history.push('/');\n            };\n\n            const onError = () => {\n                NotificationService.notify('error', 'Error', 'There was a problem updating your pet.');\n            };\n\n            dispatch(changePet(petToUpload, onSuccess, onError));\n            setLoading(false);\n        } else {\n            NotificationService.notify('error', 'Upload Error', 'Upload of the pet profile picture is required!');\n        }\n    };\n\n    // on canceling the view\n    const onCancel = async () => {\n        history.goBack();\n    };\n\n    return pet && !loading ? (\n        <div>\n            <div className={classes.layout}>\n                <PetPhotosForm />\n                <PetInformationForm\n                    nameProp={{ name, setName }}\n                    nicknameProp={{ nickname, setNickname }}\n                    sexProp={{ sex, setSex }}\n                    birthDateProp={{ birthDate, setBirthDate }}\n                    speciesProp={{ species, setSpecies }}\n                    breedProp={{ breed, setBreed }}\n                    priceProp={{ price, setPrice }}\n                />\n            </div>\n            <div className={classes.button}>\n                <Button onClick={onCancel} variant=\"contained\" color=\"secondary\" size=\"large\" style={{ marginRight: 20 }}>\n                    Cancel\n                </Button>\n                <Button disabled={formIsDisabled} onClick={updatePet} type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\">\n                    {loading ? <CircularProgress size={20} color=\"white\" style={{ marginRight: 10 }} /> : ''} Save\n                </Button>\n            </div>\n        </div>\n    ) : (\n        <Loading />\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        display: 'flex',\n        width: '100%',\n        justifyContent: 'center',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'column',\n            width: 'auto',\n            alignItems: 'center',\n        },\n    },\n    button: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginRight: 20,\n    },\n}));\n\n// connect() establishes the connection to the redux functionalities\nexport default connect()(EditPetView);\n"]},"metadata":{},"sourceType":"module"}