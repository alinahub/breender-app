{"ast":null,"code":"import PetService from '../../services/PetService';\nconst PetTypes = {\n  GET_PETS: 'GET_PETS',\n  DELETE_PET: 'DELETE_PET',\n  UPDATE_PET: 'UPDATE_PET',\n  ADD_PET: 'ADD_PET',\n  GET_PET: 'GET_PET',\n  UPDATE_SELECTED_PET: 'UPDATE_SELECTED_PET',\n  UPDATE_PROFILE_PICTURE: 'UPDATE_PROFILE_PICTURE',\n  CLEAR_PET: 'CLEAR_PET'\n};\nexport const getPets = (species, sex, breed, age, page) => {\n  // when the backend call was successfull and the movies are retrieved\n  // in the dispatcher the movies will be added to the global state\n  function onSuccess(pets, totalPages) {\n    return {\n      type: 'GETPETS_SUCCESS',\n      pets: pets,\n      totalPages: totalPages\n    };\n  } // when the backend call was failed\n\n\n  function onFailure(error) {\n    // error handling\n    console.log('failed to get the pets', error);\n  }\n\n  return async dispatch => {\n    try {\n      // ask for the pets in the backend\n      let pets = await PetService.getPets(species, sex, breed, age, page); // call onSuccess in context of redux\n\n      dispatch(onSuccess(pets, pets.totalPages));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const deletePet = (id, onSuccess = () => null, onError = err => null) => {\n  const deletePetAction = () => {\n    onSuccess();\n    return {\n      type: PetTypes.DELETE_PET\n    };\n  };\n\n  const onFailure = error => {\n    onError();\n    console.log('Error while deleting a pet', error);\n  };\n\n  return async dispatch => {\n    try {\n      let pet = await PetService.deletePet(id);\n      dispatch(deletePetAction());\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const addPet = (pet, onSuccess = () => null, onError = err => null) => {\n  const addPetAction = () => {\n    onSuccess();\n    return {\n      type: PetTypes.ADD_PET\n    };\n  };\n\n  const onFailure = err => {\n    onError(err);\n  };\n\n  return async dispatch => {\n    await PetService.createPet(pet).then(() => {\n      dispatch(addPetAction());\n    }).catch(e => {\n      onFailure(e);\n    });\n  };\n};\nexport const changePet = (changedPet, onSuccess = () => null, onError = err => null) => {\n  const changePetAction = pet => {\n    onSuccess();\n    return {\n      type: PetTypes.UPDATE_PET,\n      pet: pet\n    };\n  };\n\n  const onFailure = error => {\n    onError();\n    console.log('Error while changing a pet', error);\n  };\n\n  return async dispatch => {\n    try {\n      let pet = await PetService.updatePet(changedPet);\n      dispatch(changePetAction(pet));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getPet = id => {\n  const getPetAction = pet => {\n    return {\n      type: PetTypes.GET_PET,\n      pet: pet\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to load a pet', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      let pet = await PetService.getPet(id);\n      dispatch(getPetAction(pet));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const updateSelectedPet = pet => {\n  const updatePetAction = pet => {\n    return {\n      type: PetTypes.UPDATE_SELECTED_PET,\n      pet: pet\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to update pet', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      dispatch(updatePetAction(pet));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const updateProfilePicture = profilePicture => {\n  const updateProfilePictureAction = picture => {\n    return {\n      type: PetTypes.UPDATE_PROFILE_PICTURE,\n      profilePictureToRemove: picture\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to save profile picture', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      dispatch(updateProfilePictureAction(profilePicture));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const clearPetInfos = () => {\n  const clearPetAction = () => {\n    return {\n      type: PetTypes.CLEAR_PET\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to clear pet', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      dispatch(clearPetAction());\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/petActions.js"],"names":["PetService","PetTypes","GET_PETS","DELETE_PET","UPDATE_PET","ADD_PET","GET_PET","UPDATE_SELECTED_PET","UPDATE_PROFILE_PICTURE","CLEAR_PET","getPets","species","sex","breed","age","page","onSuccess","pets","totalPages","type","onFailure","error","console","log","dispatch","e","deletePet","id","onError","err","deletePetAction","pet","addPet","addPetAction","createPet","then","catch","changePet","changedPet","changePetAction","updatePet","getPet","getPetAction","getState","updateSelectedPet","updatePetAction","updateProfilePicture","profilePicture","updateProfilePictureAction","picture","profilePictureToRemove","clearPetInfos","clearPetAction"],"mappings":"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","sourcesContent":["import PetService from '../../services/PetService';\n\nconst PetTypes = {\n    GET_PETS: 'GET_PETS',\n    DELETE_PET: 'DELETE_PET',\n    UPDATE_PET: 'UPDATE_PET',\n    ADD_PET: 'ADD_PET',\n    GET_PET: 'GET_PET',\n    UPDATE_SELECTED_PET: 'UPDATE_SELECTED_PET',\n    UPDATE_PROFILE_PICTURE: 'UPDATE_PROFILE_PICTURE',\n    CLEAR_PET: 'CLEAR_PET',\n};\n\nexport const getPets = (species, sex, breed, age, page) => {\n    // when the backend call was successfull and the movies are retrieved\n    // in the dispatcher the movies will be added to the global state\n    function onSuccess(pets, totalPages) {\n        return { type: 'GETPETS_SUCCESS', pets: pets, totalPages: totalPages };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to get the pets', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // ask for the pets in the backend\n            let pets = await PetService.getPets(species, sex, breed, age, page);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(pets, pets.totalPages));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const deletePet = (id, onSuccess = () => null, onError = (err) => null) => {\n    const deletePetAction = () => {\n        onSuccess();\n        return { type: PetTypes.DELETE_PET };\n    };\n    const onFailure = (error) => {\n        onError();\n        console.log('Error while deleting a pet', error);\n    };\n\n    return async (dispatch) => {\n        try {\n            let pet = await PetService.deletePet(id);\n            dispatch(deletePetAction());\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const addPet = (pet, onSuccess = () => null, onError = (err) => null) => {\n    const addPetAction = () => {\n        onSuccess();\n        return { type: PetTypes.ADD_PET };\n    };\n    const onFailure = (err) => {\n        onError(err);\n    };\n\n    return async (dispatch) => {\n        await PetService.createPet(pet)\n            .then(() => {\n                dispatch(addPetAction());\n            })\n            .catch((e) => {\n                onFailure(e);\n            });\n    };\n};\n\nexport const changePet = (changedPet, onSuccess = () => null, onError = (err) => null) => {\n    const changePetAction = (pet) => {\n        onSuccess();\n        return { type: PetTypes.UPDATE_PET, pet: pet };\n    };\n\n    const onFailure = (error) => {\n        onError();\n        console.log('Error while changing a pet', error);\n    };\n\n    return async (dispatch) => {\n        try {\n            let pet = await PetService.updatePet(changedPet);\n            dispatch(changePetAction(pet));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getPet = (id) => {\n    const getPetAction = (pet) => {\n        return { type: PetTypes.GET_PET, pet: pet };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to load a pet', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            let pet = await PetService.getPet(id);\n            dispatch(getPetAction(pet));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const updateSelectedPet = (pet) => {\n    const updatePetAction = (pet) => {\n        return { type: PetTypes.UPDATE_SELECTED_PET, pet: pet };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to update pet', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updatePetAction(pet));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const updateProfilePicture = (profilePicture) => {\n    const updateProfilePictureAction = (picture) => {\n        return { type: PetTypes.UPDATE_PROFILE_PICTURE, profilePictureToRemove: picture };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to save profile picture', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updateProfilePictureAction(profilePicture));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const clearPetInfos = () => {\n    const clearPetAction = () => {\n        return { type: PetTypes.CLEAR_PET };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to clear pet', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(clearPetAction());\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}