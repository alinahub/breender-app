{"ast":null,"code":"import MessageService from '../../services/MessageService';\nconst MessageTypes = {\n  GET_MESSAGES: 'GET_MESSAGES',\n  DELETE_MESSAGE: 'DELETE_MESSAGE',\n  UPDATE_MESSAGE: 'UPDATE_MESSAGE',\n  ADD_MESSAGE: 'ADD_MESSAGE',\n  GET_MESSAGE: 'GET_MESSAGE'\n};\nexport const addMessage = message => {\n  const addMessageAction = () => {\n    return {\n      type: MessageTypes.ADD_MESSAGE\n    };\n  };\n\n  const onFailure = err => {\n    console.log(err);\n  };\n\n  return async dispatch => {\n    await MessageService.createMessage(message).then(() => {\n      dispatch(addMessageAction());\n    }).catch(e => {\n      onFailure(e);\n    });\n  };\n};\nexport const getMessages = conversationId => {\n  // when the backend call was successfull and the messages are retrieved\n  // in the dispatcher the messages will be added to the global state\n  const onSuccess = messages => {\n    return {\n      type: MessageTypes.GET_MESSAGES,\n      messages: messages\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('failed to get the messages', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      // ask for the messages in the backend\n      let messages = await MessageService.getMessages(conversationId); // call onSuccess in context of redux\n\n      dispatch(onSuccess(messages));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/messageActions.js"],"names":["MessageService","MessageTypes","GET_MESSAGES","DELETE_MESSAGE","UPDATE_MESSAGE","ADD_MESSAGE","GET_MESSAGE","addMessage","message","addMessageAction","type","onFailure","err","console","log","dispatch","createMessage","then","catch","e","getMessages","conversationId","onSuccess","messages","error","getState"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,+BAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,cADG;AAEjBC,EAAAA,cAAc,EAAE,gBAFC;AAGjBC,EAAAA,cAAc,EAAE,gBAHC;AAIjBC,EAAAA,WAAW,EAAE,aAJI;AAKjBC,EAAAA,WAAW,EAAE;AALI,CAArB;AAQA,OAAO,MAAMC,UAAU,GAAIC,OAAD,IAAa;AACnC,QAAMC,gBAAgB,GAAG,MAAM;AAC3B,WAAO;AAAEC,MAAAA,IAAI,EAAET,YAAY,CAACI;AAArB,KAAP;AACH,GAFD;;AAGA,QAAMM,SAAS,GAAIC,GAAD,IAAS;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,GAFD;;AAIA,SAAO,MAAOG,QAAP,IAAoB;AACvB,UAAMf,cAAc,CAACgB,aAAf,CAA6BR,OAA7B,EACDS,IADC,CACI,MAAM;AACRF,MAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACH,KAHC,EAIDS,KAJC,CAIMC,CAAD,IAAO;AACVR,MAAAA,SAAS,CAACQ,CAAD,CAAT;AACH,KANC,CAAN;AAOH,GARD;AASH,CAjBM;AAmBP,OAAO,MAAMC,WAAW,GAAIC,cAAD,IAAoB;AAC3C;AACA;AACA,QAAMC,SAAS,GAAIC,QAAD,IAAc;AAC5B,WAAO;AAAEb,MAAAA,IAAI,EAAET,YAAY,CAACC,YAArB;AAAmCqB,MAAAA,QAAQ,EAAEA;AAA7C,KAAP;AACH,GAFD,CAH2C,CAM3C;;;AACA,QAAMZ,SAAS,GAAIa,KAAD,IAAW;AACzB;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CU,KAA1C;AACH,GAHD;;AAKA,SAAO,OAAOT,QAAP,EAAiBU,QAAjB,KAA8B;AACjC,QAAI;AACA;AACA,UAAIF,QAAQ,GAAG,MAAMvB,cAAc,CAACoB,WAAf,CAA2BC,cAA3B,CAArB,CAFA,CAGA;;AACAN,MAAAA,QAAQ,CAACO,SAAS,CAACC,QAAD,CAAV,CAAR;AACH,KALD,CAKE,OAAOJ,CAAP,EAAU;AACRR,MAAAA,SAAS,CAACQ,CAAD,CAAT;AACH;AACJ,GATD;AAUH,CAtBM","sourcesContent":["import MessageService from '../../services/MessageService';\n\nconst MessageTypes = {\n    GET_MESSAGES: 'GET_MESSAGES',\n    DELETE_MESSAGE: 'DELETE_MESSAGE',\n    UPDATE_MESSAGE: 'UPDATE_MESSAGE',\n    ADD_MESSAGE: 'ADD_MESSAGE',\n    GET_MESSAGE: 'GET_MESSAGE',\n};\n\nexport const addMessage = (message) => {\n    const addMessageAction = () => {\n        return { type: MessageTypes.ADD_MESSAGE };\n    };\n    const onFailure = (err) => {\n        console.log(err);\n    };\n\n    return async (dispatch) => {\n        await MessageService.createMessage(message)\n            .then(() => {\n                dispatch(addMessageAction());\n            })\n            .catch((e) => {\n                onFailure(e);\n            });\n    };\n};\n\nexport const getMessages = (conversationId) => {\n    // when the backend call was successfull and the messages are retrieved\n    // in the dispatcher the messages will be added to the global state\n    const onSuccess = (messages) => {\n        return { type: MessageTypes.GET_MESSAGES, messages: messages };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the messages', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            // ask for the messages in the backend\n            let messages = await MessageService.getMessages(conversationId);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(messages));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}