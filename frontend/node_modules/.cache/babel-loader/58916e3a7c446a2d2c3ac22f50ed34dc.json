{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/documents.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux'; // antd imports\n\nimport 'antd/dist/antd.css';\nimport { Modal, Popconfirm, Table, Typography } from 'antd';\nimport { Input, Form } from 'antd'; // material-ui imports\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Grid, IconButton } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined'; // components import\n\nimport DocumentsUpload from './upload/documents.upload'; // redux imports\n\nimport { updateDocumentsToUpload } from 'redux/actions';\nimport { usePet, usePetDocuments } from 'helper/hooks/pets.hooks'; // services import\n\nimport { NotificationService } from 'services';\nimport { UPLOAD_STATUS } from 'helper/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Text\n} = Typography;\nconst EditableContext = /*#__PURE__*/createContext(null);\nconst DATE_FORMAT = 'DD.MM.YYYY'; // Define editable row form\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n      value: form,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}; // Define editable cell\n\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = EditableRow;\n\nconst EditableCell = ({\n  title,\n  focused,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  _s2();\n\n  const [editing, setEditing] = useState(focused || false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext); // focus on editing cell\n\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  }; // save edited values\n\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {\n      handleSave({ ...record,\n        ...errInfo.values\n      });\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        ref: inputRef,\n        onPressEnter: save,\n        onBlur: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: childNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(EditableCell, \"b+qhciJRsxKuysIUyDxDooqUWlk=\");\n\n_c2 = EditableCell;\n\nconst prepareDocuments = documents => {\n  let arr = documents;\n  arr.map((value, index) => {\n    value.key = index;\n    value.date = new Date(value.date);\n    return value;\n  });\n  return arr;\n};\n\nconst DocumentsComponent = props => {\n  _s3();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    mode\n  } = props;\n  const pet = usePet();\n  const documentsData = usePetDocuments();\n  const [count, setCount] = useState(0);\n  const [isModalVisible, setIsModalVisible] = useState(false); // competitions on the modal\n\n  const [documents, setDocuments] = useState(mode === 'add' ? [] : prepareDocuments(pet.documents)); // competitions on the edit page\n\n  const [editedDocuments, setEditedDocuments] = useState(mode === 'add' ? [] : prepareDocuments(pet.documents));\n  const columnsData = [{\n    title: 'Description',\n    dataIndex: 'description',\n    key: 'description',\n    fixed: 'left',\n    width: '50%',\n    editable: true,\n    render: (_, record) => documents.length >= 1 ? /*#__PURE__*/_jsxDEV(Text, {\n      type: \"secondary\",\n      children: record.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 61\n    }, this) : null\n  }, {\n    title: 'Document',\n    dataIndex: 'document',\n    key: 'document',\n    render: (_, record) => documents.length >= 1 ? /*#__PURE__*/_jsxDEV(Text, {\n      type: \"secondary\",\n      children: record.document ? record.document.name : ' No File Uploaded'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 61\n    }, this) : null\n  }]; // columns data for the competitions in the modal\n\n  const columnsModalData = [{\n    title: 'Description',\n    dataIndex: 'description',\n    key: 'description',\n    fixed: 'left',\n    width: '50%',\n    editable: true,\n    render: (_, record) => documents.length >= 1 ? /*#__PURE__*/_jsxDEV(Input, {\n      bordered: false,\n      value: record.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 61\n    }, this) : null\n  }, {\n    title: 'Document',\n    dataIndex: 'document',\n    key: 'document',\n    width: '40%',\n    render: (_, record) => documents.length >= 1 ? /*#__PURE__*/_jsxDEV(DocumentsUpload, {\n      type: \"documents\",\n      documentId: record.key,\n      maxFiles: 1,\n      size: 'small',\n      description: record.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 61\n    }, this) : null\n  }, {\n    title: 'Remove',\n    key: 'remove',\n    render: key => documents.length >= 1 ? /*#__PURE__*/_jsxDEV(Popconfirm, {\n      title: \"Sure to delete?\",\n      onConfirm: () => handleDelete(key),\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(DeleteOutlinedIcon, {\n          color: \"error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }, this) : null\n  }];\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell\n    }\n  };\n  const columns = columnsModalData.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        handleSave: handleSave,\n        focused: col.key === 'name' && record.name === '' ? true : false\n      })\n    };\n  }); // add new row\n\n  const handleAdd = () => {\n    const newData = {\n      key: count,\n      description: '',\n      name: undefined,\n      uploadDate: new Date(),\n      document: undefined\n    }; //const newData = { key: count, description: '', date: new Date(), document: undefined };\n\n    setDocuments([...documents, newData]);\n    setCount(count + 1);\n    console.log('ONADD', [...documents, newData]);\n    dispatch(updateDocumentsToUpload([...documents, newData]));\n  }; // delete row\n\n\n  const handleDelete = key => {\n    const newData = documents.filter(item => item.key !== key.key);\n    setDocuments(newData);\n    setCount(count - 1);\n    dispatch(updateDocumentsToUpload(newData));\n  }; // save competitions data\n\n\n  const handleSave = row => {\n    const newData = [...documents];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item,\n      ...row\n    });\n    setDocuments(newData);\n    dispatch(updateDocumentsToUpload(newData));\n  };\n\n  const showModal = () => setIsModalVisible(true);\n\n  const hideModal = () => {\n    dispatch(updateDocumentsToUpload(editedDocuments));\n    setDocuments(editedDocuments);\n    setIsModalVisible(false);\n    setCount(editedDocuments.length);\n  };\n\n  const onOk = () => {\n    // check if all columns of all competitions are filled out\n    let verified = true;\n\n    const isEmpty = c => c.description === '' || c.document === undefined || c.document === {};\n\n    documentsData.forEach(item => {\n      if (isEmpty(item)) {\n        verified = false;\n        return;\n      }\n    });\n    console.log('ONOK', documentsData);\n\n    if (verified) {\n      dispatch(updateDocumentsToUpload(documents));\n      setEditedDocuments(documents);\n      setIsModalVisible(false);\n      setCount(documents.length);\n    } else {\n      NotificationService.notify('error', 'All fields required', 'Please fill out all columns for the documents!');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.layout,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: classes.label,\n          children: \"Additional Documents (birth certificate, etc.)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        className: classes.grid,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: showModal,\n          variant: \"outlined\",\n          color: \"secondary\",\n          style: {\n            margin: 10\n          },\n          children: \"Edit Documents\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      dataSource: editedDocuments,\n      columns: columnsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      visible: isModalVisible,\n      onOk: onOk,\n      onCancel: hideModal,\n      className: classes.modal,\n      width: '80vw',\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        alignItems: \"flex-end\",\n        justify: \"flex-end\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleAdd,\n          variant: \"outlined\",\n          color: \"primary\",\n          style: {\n            margin: 20\n          },\n          children: \"Add a row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        components: components,\n        rowClassName: () => 'editable-row',\n        bordered: true,\n        dataSource: documents,\n        columns: columns,\n        style: {\n          width: '80vw'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 9\n  }, this);\n};\n\n_s3(DocumentsComponent, \"owjcWDO2JEjO2W0+Dge3/3GmbQ0=\", false, function () {\n  return [useStyles, useDispatch, usePet, usePetDocuments];\n});\n\n_c3 = DocumentsComponent;\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    display: 'flex',\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: 500\n  },\n  grid: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignSelf: 'flex-end'\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 100\n  }\n}));\nexport default connect()(DocumentsComponent);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");\n$RefreshReg$(_c3, \"DocumentsComponent\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/documents.js"],"names":["React","createContext","useContext","useEffect","useRef","useState","connect","useDispatch","Modal","Popconfirm","Table","Typography","Input","Form","makeStyles","Button","Grid","IconButton","DeleteOutlinedIcon","DocumentsUpload","updateDocumentsToUpload","usePet","usePetDocuments","NotificationService","UPLOAD_STATUS","Text","EditableContext","DATE_FORMAT","EditableRow","index","props","form","useForm","EditableCell","title","focused","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","values","validateFields","errInfo","childNode","margin","required","message","paddingRight","prepareDocuments","documents","arr","map","value","key","date","Date","DocumentsComponent","classes","useStyles","dispatch","mode","pet","documentsData","count","setCount","isModalVisible","setIsModalVisible","setDocuments","editedDocuments","setEditedDocuments","columnsData","fixed","width","render","_","length","description","document","name","columnsModalData","handleDelete","components","body","row","cell","columns","col","onCell","handleAdd","newData","undefined","uploadDate","console","log","filter","item","findIndex","splice","showModal","hideModal","onOk","verified","isEmpty","c","forEach","notify","layout","label","grid","modal","theme","display","flexDirection","justifyContent","alignItems","fontSize","fontWeight","alignSelf","marginTop"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\n// antd imports\nimport 'antd/dist/antd.css';\nimport { Modal, Popconfirm, Table, Typography } from 'antd';\nimport { Input, Form } from 'antd';\n// material-ui imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Grid, IconButton } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\n// components import\nimport DocumentsUpload from './upload/documents.upload';\n// redux imports\nimport { updateDocumentsToUpload } from 'redux/actions';\nimport { usePet, usePetDocuments } from 'helper/hooks/pets.hooks';\n// services import\nimport { NotificationService } from 'services';\nimport { UPLOAD_STATUS } from 'helper/types';\n\nconst { Text } = Typography;\n\nconst EditableContext = createContext(null);\nconst DATE_FORMAT = 'DD.MM.YYYY';\n\n// Define editable row form\nconst EditableRow = ({ index, ...props }) => {\n    const [form] = Form.useForm();\n    return (\n        <Form form={form} component={false}>\n            <EditableContext.Provider value={form}>\n                <tr {...props} />\n            </EditableContext.Provider>\n        </Form>\n    );\n};\n\n// Define editable cell\nconst EditableCell = ({ title, focused, editable, children, dataIndex, record, handleSave, ...restProps }) => {\n    const [editing, setEditing] = useState(focused || false);\n    const inputRef = useRef(null);\n    const form = useContext(EditableContext);\n\n    // focus on editing cell\n    useEffect(() => {\n        if (editing) {\n            inputRef.current.focus();\n        }\n    }, [editing]);\n\n    const toggleEdit = () => {\n        setEditing(!editing);\n        form.setFieldsValue({\n            [dataIndex]: record[dataIndex],\n        });\n    };\n\n    // save edited values\n    const save = async () => {\n        try {\n            const values = await form.validateFields();\n            toggleEdit();\n            handleSave({ ...record, ...values });\n        } catch (errInfo) {\n            handleSave({ ...record, ...errInfo.values });\n        }\n    };\n\n    let childNode = children;\n\n    if (editable) {\n        childNode = editing ? (\n            <Form.Item\n                style={{\n                    margin: 0,\n                }}\n                name={dataIndex}\n                rules={[\n                    {\n                        required: true,\n                        message: `${title} is required.`,\n                    },\n                ]}\n            >\n                <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n            </Form.Item>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                style={{\n                    paddingRight: 24,\n                }}\n                onClick={toggleEdit}\n            >\n                {children}\n            </div>\n        );\n    }\n\n    return <td {...restProps}>{childNode}</td>;\n};\n\nconst prepareDocuments = (documents) => {\n    let arr = documents;\n    arr.map((value, index) => {\n        value.key = index;\n        value.date = new Date(value.date);\n        return value;\n    });\n    return arr;\n};\n\nconst DocumentsComponent = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const { mode } = props;\n\n    const pet = usePet();\n    const documentsData = usePetDocuments();\n\n    const [count, setCount] = useState(0);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    // competitions on the modal\n    const [documents, setDocuments] = useState(mode === 'add' ? [] : prepareDocuments(pet.documents));\n    // competitions on the edit page\n    const [editedDocuments, setEditedDocuments] = useState(mode === 'add' ? [] : prepareDocuments(pet.documents));\n\n    const columnsData = [\n        {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n            fixed: 'left',\n            width: '50%',\n            editable: true,\n            render: (_, record) => (documents.length >= 1 ? <Text type=\"secondary\">{record.description}</Text> : null),\n        },\n        {\n            title: 'Document',\n            dataIndex: 'document',\n            key: 'document',\n            render: (_, record) => (documents.length >= 1 ? <Text type=\"secondary\">{record.document ? record.document.name : ' No File Uploaded'}</Text> : null),\n        },\n    ];\n\n    // columns data for the competitions in the modal\n    const columnsModalData = [\n        {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n            fixed: 'left',\n            width: '50%',\n            editable: true,\n            render: (_, record) => (documents.length >= 1 ? <Input bordered={false} value={record.description} /> : null),\n        },\n        {\n            title: 'Document',\n            dataIndex: 'document',\n            key: 'document',\n            width: '40%',\n            render: (_, record) => (documents.length >= 1 ? <DocumentsUpload type=\"documents\" documentId={record.key} maxFiles={1} size={'small'} description={record.description} /> : null),\n        },\n        {\n            title: 'Remove',\n            key: 'remove',\n            render: (key) =>\n                documents.length >= 1 ? (\n                    <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(key)}>\n                        <IconButton>\n                            <DeleteOutlinedIcon color=\"error\" />\n                        </IconButton>\n                    </Popconfirm>\n                ) : null,\n        },\n    ];\n\n    const components = {\n        body: {\n            row: EditableRow,\n            cell: EditableCell,\n        },\n    };\n\n    const columns = columnsModalData.map((col) => {\n        if (!col.editable) {\n            return col;\n        }\n\n        return {\n            ...col,\n            onCell: (record) => ({\n                record,\n                editable: col.editable,\n                dataIndex: col.dataIndex,\n                title: col.title,\n                handleSave: handleSave,\n                focused: col.key === 'name' && record.name === '' ? true : false,\n            }),\n        };\n    });\n\n    // add new row\n    const handleAdd = () => {\n         const newData = {\n            key: count,\n            description: '',\n            name: undefined,\n            uploadDate: new Date(),\n            document: undefined,\n        };\n        //const newData = { key: count, description: '', date: new Date(), document: undefined };\n        setDocuments([...documents, newData]);\n        setCount(count + 1);\n        console.log('ONADD', [...documents, newData])\n        dispatch(updateDocumentsToUpload([...documents, newData]));\n    };\n\n    // delete row\n    const handleDelete = (key) => {\n        const newData = documents.filter((item) => item.key !== key.key);\n        setDocuments(newData);\n        setCount(count - 1);\n\n        dispatch(updateDocumentsToUpload(newData));\n    };\n\n    // save competitions data\n    const handleSave = (row) => {\n        const newData = [...documents];\n        const index = newData.findIndex((item) => row.key === item.key);\n        const item = newData[index];\n        newData.splice(index, 1, { ...item, ...row });\n        setDocuments(newData);\n\n        dispatch(updateDocumentsToUpload(newData));\n    };\n\n    const showModal = () => setIsModalVisible(true);\n\n    const hideModal = () => {\n        dispatch(updateDocumentsToUpload(editedDocuments));\n        setDocuments(editedDocuments);\n        setIsModalVisible(false);\n        setCount(editedDocuments.length);\n    };\n\n    const onOk = () => {\n        // check if all columns of all competitions are filled out\n        let verified = true;\n        const isEmpty = (c) => c.description === '' || c.document === undefined || c.document === {};\n        documentsData.forEach((item) => {\n            if (isEmpty(item)) {\n                verified = false;\n                return;\n            }\n        });\n        console.log('ONOK', documentsData);\n        if (verified) {\n            dispatch(updateDocumentsToUpload(documents));\n            setEditedDocuments(documents);\n            setIsModalVisible(false);\n            setCount(documents.length);\n        } else {\n            NotificationService.notify('error', 'All fields required', 'Please fill out all columns for the documents!');\n        }\n    };\n\n    return (\n        <div>\n            <Grid container className={classes.layout}>\n                <Grid item xs={12} sm={6}>\n                    <label className={classes.label}>Additional Documents (birth certificate, etc.)</label>\n                </Grid>\n                <Grid item xs={12} sm={6} className={classes.grid}>\n                    <Button\n                        onClick={showModal}\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                        style={{\n                            margin: 10,\n                        }}\n                    >\n                        Edit Documents\n                    </Button>\n                </Grid>\n            </Grid>\n            <Table dataSource={editedDocuments} columns={columnsData} />\n            {/* Modal for editable competitions table */}\n            <Modal visible={isModalVisible} onOk={onOk} onCancel={hideModal} className={classes.modal} width={'80vw'}>\n                <Grid container alignItems=\"flex-end\" justify=\"flex-end\">\n                    <Button\n                        onClick={handleAdd}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        style={{\n                            margin: 20,\n                        }}\n                    >\n                        Add a row\n                    </Button>\n                </Grid>\n                <Table components={components} rowClassName={() => 'editable-row'} bordered dataSource={documents} columns={columns} style={{ width: '80vw' }} />\n            </Modal>\n        </div>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        display: 'flex',\n        width: '100%',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    label: {\n        fontSize: 16,\n        fontWeight: 500,\n    },\n    grid: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignSelf: 'flex-end',\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: 100,\n    },\n}));\n\nexport default connect()(DocumentsComponent);\n"]},"metadata":{},"sourceType":"module"}