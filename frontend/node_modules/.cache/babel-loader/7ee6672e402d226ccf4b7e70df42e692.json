{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/views/EditPetView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PetInformationForm, PetPhotosForm } from 'components/forms';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { usePet, usePetCompetitions, usePetDocuments, usePetPictures, usePetProfilePictureToRemove, usePetProfilePictureToUpload } from 'helper/hooks/pets.hooks';\nimport { changePet, clearUpload, getPet, updateCompetitionsToUpload, updateDocumentsToUpload, updatePicturesToUpload, updateProfilePicture } from 'redux/actions';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport Loading from 'components/Loading';\nimport { NotificationService, FirebaseService } from 'services';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditPetView = props => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n  const id = location.pathname.split('/edit/pet/')[1];\n  const pet = usePet();\n  const user = useUser(); // get pet upload states\n\n  const petDocuments = usePetDocuments();\n  const petCompetitions = usePetCompetitions();\n  const petPictures = usePetPictures();\n  const petProfilePictureToUpload = usePetProfilePictureToUpload();\n  const petProfilePictureToRemove = usePetProfilePictureToRemove();\n  const [loading, setLoading] = useState(true);\n  const [buttonLoading, setButtonLoading] = useState(false);\n  const [formIsDisabled, setFormIsDisabled] = useState(false);\n  const [name, setName] = useState(pet.officialName);\n  const [nickname, setNickname] = useState(pet.nickname);\n  const [sex, setSex] = useState(pet.sex);\n  const [birthDate, setBirthDate] = useState(new Date(pet.birthDate));\n  const [species, setSpecies] = useState(pet.species);\n  const [breed, setBreed] = useState(pet.breed);\n  const [price, setPrice] = useState(pet.price);\n  const [documents, setDocuments] = useState(petDocuments);\n  useEffect(() => {\n    // update upload states\n    if (loading) {\n      dispatch(updateProfilePicture(pet.profilePicture, {}));\n      dispatch(updatePicturesToUpload(pet.pictures));\n      dispatch(updateCompetitionsToUpload(pet.competitions));\n      dispatch(updateDocumentsToUpload(pet.documents));\n    }\n\n    if (pet.officialName) {\n      setLoading(false);\n    } else {\n      const fetchPet = () => {\n        dispatch(getPet(id));\n        setLoading(false);\n      };\n\n      fetchPet();\n    }\n  }, [dispatch, id, pet.documents, pet.competitions, pet.profilePicture, pet.pictures, pet.officialName, loading]);\n\n  const isEmpty = str => str === '' || str === undefined;\n\n  useEffect(() => {\n    const disabled = isEmpty(name) || Object.keys(petProfilePictureToUpload).length === 0 || isEmpty(sex) || isEmpty(species) || isEmpty(breed);\n    setFormIsDisabled(disabled);\n  }, [name, sex, breed, species, petProfilePictureToUpload]);\n  useEffect(() => {\n    if (pet.ownerId !== user.id) {\n      history.goBack();\n      NotificationService.notify('error', 'Navigation Error', 'This information is restricted');\n    }\n  }, [pet.ownerId, user.id, history]);\n\n  const uploadCompetitions = async () => {\n    const competitionsData = [...petCompetitions];\n\n    for (let index = 0; index < competitionsData.length; index++) {\n      let value = competitionsData[index];\n\n      if (value.certificate && Object.keys(value.certificate).length !== 0) {\n        if (value.certificate.status === 'upload') {\n          const metadata = {\n            contentType: value.certificate.type\n          };\n          let url = await FirebaseService.upload(value.certificate.path, value.certificate.data, metadata);\n          competitionsData[index].certificate.url = url;\n        } else if (value.certificate.status === 'delete') {\n          await FirebaseService.remove(value.certificate.path);\n        }\n      }\n    }\n\n    let competitions = competitionsData.filter(value => value.certificate.status !== 'delete');\n    await dispatch(updateCompetitionsToUpload(competitions));\n  };\n\n  const uploadDocuments = async () => {\n    const documentsData = [...petDocuments];\n\n    for (let index = 0; index < documentsData.length; index++) {\n      let value = documentsData[index];\n\n      if (value.status === 'upload') {\n        const metadata = {\n          contentType: value.type\n        };\n        let url = await FirebaseService.upload(value.path, value.data, metadata);\n        documentsData[index].url = url;\n      } else if (value.status === 'delete') {\n        await FirebaseService.remove(value.path);\n      }\n    }\n\n    let docs = documentsData.filter(value => value.status !== 'delete');\n    setDocuments(docs); //await dispatch(updateDocumentsToUpload(docs));\n  };\n\n  const uploadPictures = async () => {\n    const picturesData = [...petPictures];\n\n    for (let index = 0; index < picturesData.length; index++) {\n      let value = picturesData[index];\n\n      if (value.status === 'upload') {\n        const metadata = {\n          contentType: 'image/png'\n        };\n        let url = await FirebaseService.upload(value.path, value.data, metadata);\n        picturesData[index].src = url;\n      } else if (value.status === 'delete') {\n        await FirebaseService.remove(value.path);\n      }\n    }\n\n    const pics = picturesData.filter(value => value.status !== 'delete');\n    await dispatch(updatePicturesToUpload(pics));\n  };\n\n  const uploadProfilePicture = async () => {\n    // update profile picture only if new was uploaded\n    if (Object.keys(petProfilePictureToRemove).length !== 0 && (petProfilePictureToRemove === null || petProfilePictureToRemove === void 0 ? void 0 : petProfilePictureToRemove.src) !== '') {\n      // delete old one\n      await FirebaseService.remove(petProfilePictureToRemove.path); // upload new one\n\n      let value = petProfilePictureToUpload;\n      const metadata = {\n        contentType: 'image/png'\n      };\n      let url = await FirebaseService.upload(value.path, value.data, metadata);\n      value.src = url;\n      await dispatch(updateProfilePicture(value, {}));\n    }\n  };\n\n  const updatePet = () => {\n    setButtonLoading(true); // upload documents and pics to firebase first\n\n    uploadDocuments();\n    uploadCompetitions();\n    uploadPictures();\n    uploadProfilePicture();\n    const dateCreated = Date.now(); // combine all information about a pet\n\n    let petToUpload = {\n      id: id,\n      ownerId: user.id,\n      officialName: name,\n      nickname: nickname,\n      birthDate: birthDate,\n      sex: sex,\n      price: price,\n      profilePicture: petProfilePictureToUpload,\n      pictures: petPictures,\n      dateCreated: dateCreated,\n      breed: breed,\n      species: species,\n      competitions: petCompetitions,\n      documents: documents\n    };\n\n    const onSuccess = () => {\n      NotificationService.notify('success', 'Success', 'Your four-legged friend was successfully updated!');\n      history.push('/');\n    };\n\n    const onError = () => {\n      NotificationService.notify('error', 'Error', 'There was a problem updating your pet.');\n    };\n\n    setTimeout(() => {\n      dispatch(changePet(petToUpload, onSuccess, onError));\n      dispatch(clearUpload());\n      setButtonLoading(false);\n    }, 2000);\n  }; // on canceling the view\n\n\n  const onCancel = async () => {\n    history.goBack();\n  };\n\n  return pet && !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.layout,\n      children: [/*#__PURE__*/_jsxDEV(PetPhotosForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PetInformationForm, {\n        nameProp: {\n          name,\n          setName\n        },\n        nicknameProp: {\n          nickname,\n          setNickname\n        },\n        sexProp: {\n          sex,\n          setSex\n        },\n        birthDateProp: {\n          birthDate,\n          setBirthDate\n        },\n        speciesProp: {\n          species,\n          setSpecies\n        },\n        breedProp: {\n          breed,\n          setBreed\n        },\n        priceProp: {\n          price,\n          setPrice\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.button,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: onCancel,\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"large\",\n        style: {\n          marginRight: 20\n        },\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: formIsDisabled,\n        onClick: updatePet,\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        children: [buttonLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20,\n          color: \"white\",\n          style: {\n            marginRight: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 38\n        }, this) : '', \" Save\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditPetView, \"cqYNlnT7t/VfZZD6ipGCiBF+Kq8=\", false, function () {\n  return [useStyles, useDispatch, useHistory, useLocation, usePet, useUser, usePetDocuments, usePetCompetitions, usePetPictures, usePetProfilePictureToUpload, usePetProfilePictureToRemove];\n});\n\n_c = EditPetView;\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'center',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n      width: 'auto',\n      alignItems: 'center'\n    }\n  },\n  button: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    marginRight: 20\n  }\n})); // connect() establishes the connection to the redux functionalities\n\nexport default connect()(EditPetView);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPetView\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/views/EditPetView.js"],"names":["React","useEffect","useState","connect","useDispatch","makeStyles","PetInformationForm","PetPhotosForm","Button","CircularProgress","usePet","usePetCompetitions","usePetDocuments","usePetPictures","usePetProfilePictureToRemove","usePetProfilePictureToUpload","changePet","clearUpload","getPet","updateCompetitionsToUpload","updateDocumentsToUpload","updatePicturesToUpload","updateProfilePicture","useUser","Loading","NotificationService","FirebaseService","useHistory","useLocation","EditPetView","props","classes","useStyles","dispatch","history","location","id","pathname","split","pet","user","petDocuments","petCompetitions","petPictures","petProfilePictureToUpload","petProfilePictureToRemove","loading","setLoading","buttonLoading","setButtonLoading","formIsDisabled","setFormIsDisabled","name","setName","officialName","nickname","setNickname","sex","setSex","birthDate","setBirthDate","Date","species","setSpecies","breed","setBreed","price","setPrice","documents","setDocuments","profilePicture","pictures","competitions","fetchPet","isEmpty","str","undefined","disabled","Object","keys","length","ownerId","goBack","notify","uploadCompetitions","competitionsData","index","value","certificate","status","metadata","contentType","type","url","upload","path","data","remove","filter","uploadDocuments","documentsData","docs","uploadPictures","picturesData","src","pics","uploadProfilePicture","updatePet","dateCreated","now","petToUpload","onSuccess","push","onError","setTimeout","onCancel","layout","button","marginRight","theme","display","width","justifyContent","breakpoints","down","flexDirection","alignItems"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PetInformationForm, PetPhotosForm } from 'components/forms';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { usePet, usePetCompetitions, usePetDocuments, usePetPictures, usePetProfilePictureToRemove, usePetProfilePictureToUpload } from 'helper/hooks/pets.hooks';\nimport { changePet, clearUpload, getPet, updateCompetitionsToUpload, updateDocumentsToUpload, updatePicturesToUpload, updateProfilePicture } from 'redux/actions';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport Loading from 'components/Loading';\nimport { NotificationService, FirebaseService } from 'services';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nconst EditPetView = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = useLocation();\n\n    const id = location.pathname.split('/edit/pet/')[1];\n    const pet = usePet();\n    const user = useUser();\n\n    // get pet upload states\n    const petDocuments = usePetDocuments();\n    const petCompetitions = usePetCompetitions();\n    const petPictures = usePetPictures();\n    const petProfilePictureToUpload = usePetProfilePictureToUpload();\n    const petProfilePictureToRemove = usePetProfilePictureToRemove();\n\n    const [loading, setLoading] = useState(true);\n    const [buttonLoading, setButtonLoading] = useState(false);\n    const [formIsDisabled, setFormIsDisabled] = useState(false);\n    const [name, setName] = useState(pet.officialName);\n    const [nickname, setNickname] = useState(pet.nickname);\n    const [sex, setSex] = useState(pet.sex);\n    const [birthDate, setBirthDate] = useState(new Date(pet.birthDate));\n    const [species, setSpecies] = useState(pet.species);\n    const [breed, setBreed] = useState(pet.breed);\n    const [price, setPrice] = useState(pet.price);\n    const [documents, setDocuments] = useState(petDocuments);\n\n    useEffect(() => {\n        // update upload states\n        if (loading) {\n            dispatch(updateProfilePicture(pet.profilePicture, {}));\n            dispatch(updatePicturesToUpload(pet.pictures));\n            dispatch(updateCompetitionsToUpload(pet.competitions));\n            dispatch(updateDocumentsToUpload(pet.documents));\n        }\n\n        if (pet.officialName) {\n            setLoading(false);\n        } else {\n            const fetchPet = () => {\n                dispatch(getPet(id));\n                setLoading(false);\n            };\n            fetchPet();\n        }\n    }, [dispatch, id, pet.documents, pet.competitions, pet.profilePicture, pet.pictures, pet.officialName, loading]);\n\n    const isEmpty = (str) => str === '' || str === undefined;\n\n    useEffect(() => {\n        const disabled = isEmpty(name) || Object.keys(petProfilePictureToUpload).length === 0 || isEmpty(sex) || isEmpty(species) || isEmpty(breed);\n        setFormIsDisabled(disabled);\n    }, [name, sex, breed, species, petProfilePictureToUpload]);\n\n    useEffect(() => {\n        if (pet.ownerId !== user.id) {\n            history.goBack();\n            NotificationService.notify('error', 'Navigation Error', 'This information is restricted');\n        }\n    }, [pet.ownerId, user.id, history]);\n\n    const uploadCompetitions = async () => {\n        const competitionsData = [...petCompetitions];\n        for (let index = 0; index < competitionsData.length; index++) {\n            let value = competitionsData[index];\n\n            if (value.certificate && Object.keys(value.certificate).length !== 0) {\n                if (value.certificate.status === 'upload') {\n                    const metadata = {\n                        contentType: value.certificate.type,\n                    };\n                    let url = await FirebaseService.upload(value.certificate.path, value.certificate.data, metadata);\n                    competitionsData[index].certificate.url = url;\n                } else if (value.certificate.status === 'delete') {\n                    await FirebaseService.remove(value.certificate.path);\n                }\n            }\n        }\n\n        let competitions = competitionsData.filter((value) => value.certificate.status !== 'delete');\n        await dispatch(updateCompetitionsToUpload(competitions));\n    };\n\n    const uploadDocuments = async () => {\n        const documentsData = [...petDocuments];\n        for (let index = 0; index < documentsData.length; index++) {\n            let value = documentsData[index];\n\n            if (value.status === 'upload') {\n                const metadata = {\n                    contentType: value.type,\n                };\n                let url = await FirebaseService.upload(value.path, value.data, metadata);\n                documentsData[index].url = url;\n            } else if (value.status === 'delete') {\n                await FirebaseService.remove(value.path);\n            }\n        }\n\n        let docs = documentsData.filter((value) => value.status !== 'delete');\n\n        setDocuments(docs);\n        //await dispatch(updateDocumentsToUpload(docs));\n    };\n\n    const uploadPictures = async () => {\n        const picturesData = [...petPictures];\n        for (let index = 0; index < picturesData.length; index++) {\n            let value = picturesData[index];\n\n            if (value.status === 'upload') {\n                const metadata = {\n                    contentType: 'image/png',\n                };\n\n                let url = await FirebaseService.upload(value.path, value.data, metadata);\n                picturesData[index].src = url;\n            } else if (value.status === 'delete') {\n                await FirebaseService.remove(value.path);\n            }\n        }\n        const pics = picturesData.filter((value) => value.status !== 'delete');\n        await dispatch(updatePicturesToUpload(pics));\n    };\n\n    const uploadProfilePicture = async () => {\n        // update profile picture only if new was uploaded\n        if (Object.keys(petProfilePictureToRemove).length !== 0 && petProfilePictureToRemove?.src !== '') {\n            // delete old one\n            await FirebaseService.remove(petProfilePictureToRemove.path);\n\n            // upload new one\n            let value = petProfilePictureToUpload;\n            const metadata = {\n                contentType: 'image/png',\n            };\n\n            let url = await FirebaseService.upload(value.path, value.data, metadata);\n            value.src = url;\n\n            await dispatch(updateProfilePicture(value, {}));\n        }\n    };\n\n    const updatePet = () => {\n        setButtonLoading(true);\n\n        // upload documents and pics to firebase first\n\n        uploadDocuments();\n        uploadCompetitions();\n        uploadPictures();\n        uploadProfilePicture();\n\n        const dateCreated = Date.now();\n        // combine all information about a pet\n        let petToUpload = {\n            id: id,\n            ownerId: user.id,\n            officialName: name,\n            nickname: nickname,\n            birthDate: birthDate,\n            sex: sex,\n            price: price,\n            profilePicture: petProfilePictureToUpload,\n            pictures: petPictures,\n            dateCreated: dateCreated,\n            breed: breed,\n            species: species,\n            competitions: petCompetitions,\n            documents: documents,\n        };\n\n        const onSuccess = () => {\n            NotificationService.notify('success', 'Success', 'Your four-legged friend was successfully updated!');\n            history.push('/');\n        };\n\n        const onError = () => {\n            NotificationService.notify('error', 'Error', 'There was a problem updating your pet.');\n        };\n\n        setTimeout(() => {\n            dispatch(changePet(petToUpload, onSuccess, onError));\n            dispatch(clearUpload());\n            setButtonLoading(false);\n        }, 2000);\n    };\n\n    // on canceling the view\n    const onCancel = async () => {\n        history.goBack();\n    };\n\n    return pet && !loading ? (\n        <div>\n            <div className={classes.layout}>\n                <PetPhotosForm />\n                <PetInformationForm\n                    nameProp={{ name, setName }}\n                    nicknameProp={{ nickname, setNickname }}\n                    sexProp={{ sex, setSex }}\n                    birthDateProp={{ birthDate, setBirthDate }}\n                    speciesProp={{ species, setSpecies }}\n                    breedProp={{ breed, setBreed }}\n                    priceProp={{ price, setPrice }}\n                />\n            </div>\n            <div className={classes.button}>\n                <Button onClick={onCancel} variant=\"contained\" color=\"secondary\" size=\"large\" style={{ marginRight: 20 }}>\n                    Cancel\n                </Button>\n                <Button disabled={formIsDisabled} onClick={updatePet} type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\">\n                    {buttonLoading ? <CircularProgress size={20} color=\"white\" style={{ marginRight: 10 }} /> : ''} Save\n                </Button>\n            </div>\n        </div>\n    ) : (\n        <Loading />\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        display: 'flex',\n        width: '100%',\n        justifyContent: 'center',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'column',\n            width: 'auto',\n            alignItems: 'center',\n        },\n    },\n    button: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginRight: 20,\n    },\n}));\n\n// connect() establishes the connection to the redux functionalities\nexport default connect()(EditPetView);\n"]},"metadata":{},"sourceType":"module"}