{"ast":null,"code":"import { NotificationService } from 'services';\nimport PetService from '../../services/PetService';\nconst PetTypes = {\n  GET_PETS: 'GET_PETS',\n  DELETE_PET: 'DELETE_PET',\n  UPDATE_PET: 'UPDATE_PET',\n  ADD_PET: 'ADD_PET',\n  GET_PET: 'GET_PET',\n  UPDATE_SELECTED_PET: 'UPDATE_SELECTED_PET',\n  UPDATE_PROFILE_PICTURE: 'UPDATE_PROFILE_PICTURE',\n  CLEAR_PET: 'CLEAR_PET'\n};\nexport const getPets = (species, sex, breed, age, page, showOwn = false, user) => {\n  // when the backend call was successfull and the pets are retrieved\n  // in the dispatcher the pets will be added to the global state\n  function onSuccess(pets, totalPages) {\n    return {\n      type: 'GETPETS_SUCCESS',\n      pets: pets,\n      totalPages: totalPages\n    };\n  } // when the backend call was failed\n\n\n  function onFailure(error) {\n    // error handling\n    console.log('failed to get the pets', error);\n  }\n\n  return async dispatch => {\n    try {\n      // ask for the pets in the backend\n      let pets = await PetService.getPets(species, sex, breed, age, page, showOwn, user); // call onSuccess in context of redux\n\n      dispatch(onSuccess(pets, pets.totalPages));\n    } catch (e) {\n      onFailure(e);\n      NotificationService.notify('error', 'Error', 'Retrieve of the pets failed. Please try again.');\n    }\n  };\n};\nexport const deletePet = (id, onSuccess = () => null, onError = err => null) => {\n  const deletePetAction = () => {\n    onSuccess();\n    return {\n      type: PetTypes.DELETE_PET\n    };\n  };\n\n  const onFailure = error => {\n    onError();\n    console.log('Error while deleting a pet', error);\n  };\n\n  return async dispatch => {\n    try {\n      let pet = await PetService.deletePet(id);\n      dispatch(deletePetAction());\n    } catch (e) {\n      onFailure(e);\n      NotificationService.notify('error', 'Deletion Error', 'During deletion occurred an error. Please try again.');\n    }\n  };\n};\nexport const addPet = (pet, onSuccess = () => null, onError = err => null) => {\n  const addPetAction = () => {\n    onSuccess();\n    return {\n      type: PetTypes.ADD_PET\n    };\n  };\n\n  const onFailure = err => {\n    onError(err);\n  };\n\n  return async dispatch => {\n    await PetService.createPet(pet).then(() => {\n      dispatch(addPetAction());\n    }).catch(e => {\n      onFailure(e);\n      console.log(e.status);\n      NotificationService.notify('error', 'Error', e.error);\n    }); // .then(() => {\n    //     dispatch(addPetAction());\n    // })\n    // .catch((e) => {\n    //     onFailure(e);\n    //     console.log(e.statusCode);\n    //     NotificationService.notify('error', 'Error', e.error);\n    // });\n  };\n};\nexport const changePet = (changedPet, onSuccess = () => null, onError = err => null) => {\n  const changePetAction = pet => {\n    onSuccess();\n    return {\n      type: PetTypes.UPDATE_PET,\n      pet: pet\n    };\n  };\n\n  const onFailure = error => {\n    onError();\n  };\n\n  return async dispatch => {\n    try {\n      let pet = await PetService.updatePet(changedPet);\n      dispatch(changePetAction(pet));\n    } catch (e) {\n      onFailure(e);\n      NotificationService.notify('error', 'Error', 'Failed to update the pet. Please try again.');\n    }\n  };\n};\nexport const getPet = id => {\n  const getPetAction = pet => {\n    return {\n      type: PetTypes.GET_PET,\n      pet: pet\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to load a pet', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      let pet = await PetService.getPet(id);\n      dispatch(getPetAction(pet));\n    } catch (e) {\n      onFailure(e);\n      NotificationService.notify('error', 'Error', 'Failed to get a pet. Please try again.');\n    }\n  };\n};\nexport const updateSelectedPet = pet => {\n  const updatePetAction = pet => {\n    return {\n      type: PetTypes.UPDATE_SELECTED_PET,\n      pet: pet\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to update pet', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      dispatch(updatePetAction(pet));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const clearPet = () => {\n  const clearPetAction = () => {\n    return {\n      type: PetTypes.CLEAR_PET,\n      pet: {}\n    };\n  };\n\n  const onFailure = error => {\n    console.log('Failed to clear a pet', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      dispatch(clearPetAction());\n    } catch (e) {\n      onFailure(e);\n      NotificationService.notify('error', 'Error', 'Failed to clear a pet. Please try again.');\n    }\n  };\n};","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/petActions.js"],"names":["NotificationService","PetService","PetTypes","GET_PETS","DELETE_PET","UPDATE_PET","ADD_PET","GET_PET","UPDATE_SELECTED_PET","UPDATE_PROFILE_PICTURE","CLEAR_PET","getPets","species","sex","breed","age","page","showOwn","user","onSuccess","pets","totalPages","type","onFailure","error","console","log","dispatch","e","notify","deletePet","id","onError","err","deletePetAction","pet","addPet","addPetAction","createPet","then","catch","status","changePet","changedPet","changePetAction","updatePet","getPet","getPetAction","getState","updateSelectedPet","updatePetAction","clearPet","clearPetAction"],"mappings":"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","sourcesContent":["import { NotificationService } from 'services';\nimport PetService from '../../services/PetService';\n\nconst PetTypes = {\n    GET_PETS: 'GET_PETS',\n    DELETE_PET: 'DELETE_PET',\n    UPDATE_PET: 'UPDATE_PET',\n    ADD_PET: 'ADD_PET',\n    GET_PET: 'GET_PET',\n    UPDATE_SELECTED_PET: 'UPDATE_SELECTED_PET',\n    UPDATE_PROFILE_PICTURE: 'UPDATE_PROFILE_PICTURE',\n    CLEAR_PET: 'CLEAR_PET',\n};\n\nexport const getPets = (species, sex, breed, age, page, showOwn = false, user) => {\n    // when the backend call was successfull and the pets are retrieved\n    // in the dispatcher the pets will be added to the global state\n    function onSuccess(pets, totalPages) {\n        return { type: 'GETPETS_SUCCESS', pets: pets, totalPages: totalPages };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to get the pets', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // ask for the pets in the backend\n            let pets = await PetService.getPets(species, sex, breed, age, page, showOwn, user);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(pets, pets.totalPages));\n        } catch (e) {\n            onFailure(e);\n            NotificationService.notify('error', 'Error', 'Retrieve of the pets failed. Please try again.');\n        }\n    };\n};\n\nexport const deletePet = (id, onSuccess = () => null, onError = (err) => null) => {\n    const deletePetAction = () => {\n        onSuccess();\n        return { type: PetTypes.DELETE_PET };\n    };\n    const onFailure = (error) => {\n        onError();\n        console.log('Error while deleting a pet', error);\n    };\n\n    return async (dispatch) => {\n        try {\n            let pet = await PetService.deletePet(id);\n            dispatch(deletePetAction());\n        } catch (e) {\n            onFailure(e);\n            NotificationService.notify('error', 'Deletion Error', 'During deletion occurred an error. Please try again.');\n        }\n    };\n};\n\nexport const addPet = (pet, onSuccess = () => null, onError = (err) => null) => {\n    const addPetAction = () => {\n        onSuccess();\n        return { type: PetTypes.ADD_PET };\n    };\n    const onFailure = (err) => {\n        onError(err);\n    };\n\n    return async (dispatch) => {\n        await PetService.createPet(pet)\n            .then(() => {\n                dispatch(addPetAction());\n            })\n            .catch((e) => {\n                onFailure(e);\n                console.log(e.status);\n                NotificationService.notify('error', 'Error', e.error);\n            });\n\n        // .then(() => {\n        //     dispatch(addPetAction());\n        // })\n        // .catch((e) => {\n        //     onFailure(e);\n        //     console.log(e.statusCode);\n        //     NotificationService.notify('error', 'Error', e.error);\n        // });\n    };\n};\n\nexport const changePet = (changedPet, onSuccess = () => null, onError = (err) => null) => {\n    const changePetAction = (pet) => {\n        onSuccess();\n        return { type: PetTypes.UPDATE_PET, pet: pet };\n    };\n\n    const onFailure = (error) => {\n        onError();\n    };\n\n    return async (dispatch) => {\n        try {\n            let pet = await PetService.updatePet(changedPet);\n            dispatch(changePetAction(pet));\n        } catch (e) {\n            onFailure(e);\n            NotificationService.notify('error', 'Error', 'Failed to update the pet. Please try again.');\n        }\n    };\n};\n\nexport const getPet = (id) => {\n    const getPetAction = (pet) => {\n        return { type: PetTypes.GET_PET, pet: pet };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to load a pet', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            let pet = await PetService.getPet(id);\n            dispatch(getPetAction(pet));\n        } catch (e) {\n            onFailure(e);\n            NotificationService.notify('error', 'Error', 'Failed to get a pet. Please try again.');\n        }\n    };\n};\n\nexport const updateSelectedPet = (pet) => {\n    const updatePetAction = (pet) => {\n        return { type: PetTypes.UPDATE_SELECTED_PET, pet: pet };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to update pet', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updatePetAction(pet));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const clearPet = () => {\n    const clearPetAction = () => {\n        return { type: PetTypes.CLEAR_PET, pet: {} };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to clear a pet', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(clearPetAction());\n        } catch (e) {\n            onFailure(e);\n            NotificationService.notify('error', 'Error', 'Failed to clear a pet. Please try again.');\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}