{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/messenger/MessengerComponent.js\",\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { connect, useSelector, dispatch } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { getMessages, addMessage } from 'redux/actions/messageActions';\nimport { Grid, Paper, Divider, Typography, List, ListItem, ListItemText, Button, Icon, Fab } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SendIcon from '@material-ui/icons/Send';\nimport TextField from '@material-ui/core/TextField';\nimport ConversationComponent from './ConversationComponent';\nimport MessageComponent from './MessageComponent';\nimport Loading from 'components/Loading';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    width: '80%',\n    alignSelf: 'center'\n  },\n  table: {\n    minWidth: 650\n  },\n  chatSection: {\n    width: '100%',\n    height: '85vh'\n  },\n  headBG: {\n    backgroundColor: '#e0e0e0'\n  },\n  borderRight500: {\n    borderRight: '1px solid #e0e0e0'\n  },\n  messageArea: {\n    height: '70vh',\n    overflowY: 'auto'\n  },\n  padding10: {\n    padding: '10px'\n  },\n  padding20: {\n    padding: '20px'\n  },\n  marginLeft10: {\n    marginLeft: '10px'\n  }\n}));\n\nfunction MessengerComponent(props) {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const classes = useStyles();\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const socket = useRef();\n  const userId = useSelector(state => state.user.user.id);\n  const loadedConversations = useSelector(state => state.conversations.conversations);\n  useEffect(() => {\n    socket.current = io('ws://localhost:8900');\n    socket.current.on('getMessage', data => {\n      setArrivalMessage({\n        sender: data.senderId,\n        text: data.text,\n        createdAt: Date.now()\n      });\n    });\n  }, []);\n  useEffect(() => {\n    arrivalMessage && (currentChat === null || currentChat === void 0 ? void 0 : currentChat.members.includes(arrivalMessage.sender)) && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currentChat]);\n  useEffect(() => {\n    socket.current.emit('addUser', userId);\n  }, [userId]);\n  useEffect(() => {\n    if (props.currentConversationId) {\n      setCurrentChat(loadedConversations.find(c => c.id = props.currentConversationId));\n    }\n  }, [props.currentConversationId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.layout,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      component: Paper,\n      className: classes.chatSection,\n      children: [/*#__PURE__*/_jsxDEV(ChatMenuComponent, {\n        conversations: props.conversations,\n        currentUser: props.currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 9,\n        children: currentChat ? /*#__PURE__*/_jsxDEV(ChatBoxComponent, {\n          conversation: currentChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          className: \"header-message\",\n          className: classes.padding10,\n          children: \"Open a conversation to start a chat...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n\n  function ChatMenuComponent(menuProps) {\n    _s();\n\n    const classes = useStyles();\n    const [searchName, setSearchName] = useState('');\n\n    const handleSearchChange = e => {\n      setSearchName(e.target.value);\n    };\n\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 3,\n      className: classes.borderRight500,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.padding10,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"outlined-basic\",\n          variant: \"outlined\",\n          label: \"Search for breeders...\",\n          onChange: handleSearchChange,\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: menuProps.conversations.filter(c => {\n          if (c) {\n            if (c.members) {\n              let friend = c.members.find(m => {\n                return m._id !== props.currentUser.id;\n              });\n\n              if (friend.username) {\n                return friend.username.includes(searchName);\n              }\n            }\n          }\n        }).map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => {\n            setCurrentChat(c);\n          },\n          children: /*#__PURE__*/_jsxDEV(ConversationComponent, {\n            className: classes.bonker,\n            conversation: c,\n            currentUser: menuProps.currentUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this);\n  } // TODO: Make scrolling to bottom message automatic\n\n\n  _s(ChatMenuComponent, \"hSV+IalF37r7TnD0r582ru6hkFg=\", false, function () {\n    return [useStyles];\n  });\n\n  function ChatBoxComponent(chatProps) {\n    _s2();\n\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [newMessage, setNewMessage] = useState('');\n    useEffect(() => {\n      let conversationId = chatProps.conversation._id;\n\n      async function loadMessages(id) {\n        if (id) {\n          await dispatch(getMessages(id));\n        }\n      }\n\n      return loadMessages(conversationId);\n    }, [dispatch]);\n    const loadedMessages = useSelector(state => state.messages.messages);\n    useEffect(() => {\n      setMessages(loadedMessages);\n    }, [loadedMessages]);\n\n    const handleSubmit = async e => {\n      // Prevents refreshing of page on click\n      if (e) {\n        e.preventDefault();\n      }\n\n      const message = {\n        sender: userId,\n        text: newMessage,\n        conversationId: chatProps.conversation._id\n      };\n      setMessages([...messages]);\n\n      const receiverId = currentChat.members.find(member => member._id !== userId)._id;\n\n      socket.current.emit('sendMessage', {\n        senderId: userId,\n        receiverId: receiverId,\n        text: newMessage\n      });\n      dispatch(addMessage(message));\n      setNewMessage('');\n    };\n\n    return !currentChat ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        className: classes.messageArea,\n        children: Array.isArray(messages) && messages.length !== 0 ? messages.map(m => /*#__PURE__*/_jsxDEV(MessageComponent, {\n          message: m\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 45\n        }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          className: \"header-message\",\n          className: classes.padding10,\n          children: [\"Send a message to start a conversation with\", ' ', currentChat.members.find(m => {\n            return m._id !== props.currentUser.id;\n          }).username, \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        className: classes.padding20,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 11,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"outlined-basic\",\n            variant: \"outlined\",\n            label: \"Write something...\",\n            onChange: e => setNewMessage(e.target.value),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1,\n          children: /*#__PURE__*/_jsxDEV(Fab, {\n            color: \"primary\",\n            \"aria-label\": \"add\",\n            onClick: handleSubmit,\n            className: classes.marginLeft10,\n            children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s2(ChatBoxComponent, \"q9jfvnoA9c+06rovwgbgoLNvZYQ=\", false, function () {\n    return [useStyles, useDispatch, useSelector];\n  });\n}\n\n_s3(MessengerComponent, \"E/ZYbmR1WAL6HSFf/rMg5F5mDEM=\", false, function () {\n  return [useStyles, useSelector, useSelector];\n});\n\n_c = MessengerComponent;\nexport default MessengerComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessengerComponent\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/messenger/MessengerComponent.js"],"names":["React","useEffect","useState","useRef","connect","useSelector","dispatch","useDispatch","getMessages","addMessage","Grid","Paper","Divider","Typography","List","ListItem","ListItemText","Button","Icon","Fab","makeStyles","SendIcon","TextField","ConversationComponent","MessageComponent","Loading","io","useStyles","theme","layout","width","alignSelf","table","minWidth","chatSection","height","headBG","backgroundColor","borderRight500","borderRight","messageArea","overflowY","padding10","padding","padding20","marginLeft10","marginLeft","MessengerComponent","props","classes","conversations","setConversations","currentChat","setCurrentChat","messages","setMessages","arrivalMessage","setArrivalMessage","socket","userId","state","user","id","loadedConversations","current","on","data","sender","senderId","text","createdAt","Date","now","members","includes","prev","emit","currentConversationId","find","c","currentUser","ChatMenuComponent","menuProps","searchName","setSearchName","handleSearchChange","e","target","value","filter","friend","m","_id","username","map","bonker","ChatBoxComponent","chatProps","newMessage","setNewMessage","conversationId","conversation","loadMessages","loadedMessages","handleSubmit","preventDefault","message","receiverId","member","Array","isArray","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,QAA/B,QAA+C,aAA/C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,8BAAxC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,OAAtB,EAA+BC,UAA/B,EAA2CC,IAA3C,EAAiDC,QAAjD,EAA2DC,YAA3D,EAAyEC,MAAzE,EAAiFC,IAAjF,EAAuFC,GAAvF,QAAkG,mBAAlG;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,SAAS,GAAGP,UAAU,CAAEQ,KAAD,KAAY;AACrCC,EAAAA,MAAM,EAAE;AACJC,IAAAA,KAAK,EAAE,KADH;AAEJC,IAAAA,SAAS,EAAE;AAFP,GAD6B;AAKrCC,EAAAA,KAAK,EAAE;AACHC,IAAAA,QAAQ,EAAE;AADP,GAL8B;AAQrCC,EAAAA,WAAW,EAAE;AACTJ,IAAAA,KAAK,EAAE,MADE;AAETK,IAAAA,MAAM,EAAE;AAFC,GARwB;AAYrCC,EAAAA,MAAM,EAAE;AACJC,IAAAA,eAAe,EAAE;AADb,GAZ6B;AAerCC,EAAAA,cAAc,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAfqB;AAkBrCC,EAAAA,WAAW,EAAE;AACTL,IAAAA,MAAM,EAAE,MADC;AAETM,IAAAA,SAAS,EAAE;AAFF,GAlBwB;AAsBrCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,OAAO,EAAE;AADF,GAtB0B;AAyBrCC,EAAAA,SAAS,EAAE;AACPD,IAAAA,OAAO,EAAE;AADF,GAzB0B;AA4BrCE,EAAAA,YAAY,EAAE;AACVC,IAAAA,UAAU,EAAE;AADF;AA5BuB,CAAZ,CAAD,CAA5B;;AAiCA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA;;AAAA;AAAA;;AAC/B,QAAMC,OAAO,GAAGtB,SAAS,EAAzB;AACA,QAAM,CAACuB,aAAD,EAAgBC,gBAAhB,IAAoCjD,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACkD,WAAD,EAAcC,cAAd,IAAgCnD,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACoD,QAAD,EAAWC,WAAX,IAA0BrD,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACsD,cAAD,EAAiBC,iBAAjB,IAAsCvD,QAAQ,CAAC,IAAD,CAApD;AACA,QAAMwD,MAAM,GAAGvD,MAAM,EAArB;AACA,QAAMwD,MAAM,GAAGtD,WAAW,CAAEuD,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWA,IAAX,CAAgBC,EAA5B,CAA1B;AACA,QAAMC,mBAAmB,GAAG1D,WAAW,CAAEuD,KAAD,IAAWA,KAAK,CAACV,aAAN,CAAoBA,aAAhC,CAAvC;AAEAjD,EAAAA,SAAS,CAAC,MAAM;AACZyD,IAAAA,MAAM,CAACM,OAAP,GAAiBtC,EAAE,CAAC,qBAAD,CAAnB;AACAgC,IAAAA,MAAM,CAACM,OAAP,CAAeC,EAAf,CAAkB,YAAlB,EAAiCC,IAAD,IAAU;AACtCT,MAAAA,iBAAiB,CAAC;AACdU,QAAAA,MAAM,EAAED,IAAI,CAACE,QADC;AAEdC,QAAAA,IAAI,EAAEH,IAAI,CAACG,IAFG;AAGdC,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAHG,OAAD,CAAjB;AAKH,KAND;AAOH,GATQ,EASN,EATM,CAAT;AAWAvE,EAAAA,SAAS,CAAC,MAAM;AACZuD,IAAAA,cAAc,KAAIJ,WAAJ,aAAIA,WAAJ,uBAAIA,WAAW,CAAEqB,OAAb,CAAqBC,QAArB,CAA8BlB,cAAc,CAACW,MAA7C,CAAJ,CAAd,IAA0EZ,WAAW,CAAEoB,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUnB,cAAV,CAAX,CAArF;AACH,GAFQ,EAEN,CAACA,cAAD,EAAiBJ,WAAjB,CAFM,CAAT;AAIAnD,EAAAA,SAAS,CAAC,MAAM;AACZyD,IAAAA,MAAM,CAACM,OAAP,CAAeY,IAAf,CAAoB,SAApB,EAA+BjB,MAA/B;AACH,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;AAIA1D,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI+C,KAAK,CAAC6B,qBAAV,EAAiC;AAC7BxB,MAAAA,cAAc,CAACU,mBAAmB,CAACe,IAApB,CAA0BC,CAAD,IAAQA,CAAC,CAACjB,EAAF,GAAOd,KAAK,CAAC6B,qBAA9C,CAAD,CAAd;AACH;AACJ,GAJQ,EAIN,CAAC7B,KAAK,CAAC6B,qBAAP,CAJM,CAAT;AAMA,sBACI;AAAK,IAAA,SAAS,EAAE5B,OAAO,CAACpB,MAAxB;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAElB,KAA3B;AAAkC,MAAA,SAAS,EAAEsC,OAAO,CAACf,WAArD;AAAA,8BACI,QAAC,iBAAD;AAAmB,QAAA,aAAa,EAAEc,KAAK,CAACE,aAAxC;AAAuD,QAAA,WAAW,EAAEF,KAAK,CAACgC;AAA1E;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,kBACK5B,WAAW,gBACR,QAAC,gBAAD;AAAkB,UAAA,YAAY,EAAEA;AAAhC;AAAA;AAAA;AAAA;AAAA,gBADQ,gBAGR,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAyB,UAAA,SAAS,EAAC,gBAAnC;AAAoD,UAAA,SAAS,EAAEH,OAAO,CAACP,SAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;;AAiBA,WAASuC,iBAAT,CAA2BC,SAA3B,EAAsC;AAAA;;AAClC,UAAMjC,OAAO,GAAGtB,SAAS,EAAzB;AAEA,UAAM,CAACwD,UAAD,EAAaC,aAAb,IAA8BlF,QAAQ,CAAC,EAAD,CAA5C;;AAEA,UAAMmF,kBAAkB,GAAIC,CAAD,IAAO;AAC9BF,MAAAA,aAAa,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACH,KAFD;;AAIA,wBACI,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,SAAS,EAAEvC,OAAO,CAACX,cAArC;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAmB,QAAA,SAAS,EAAEW,OAAO,CAACP,SAAtC;AAAA,+BACI,QAAC,SAAD;AAAW,UAAA,EAAE,EAAC,gBAAd;AAA+B,UAAA,OAAO,EAAC,UAAvC;AAAkD,UAAA,KAAK,EAAC,wBAAxD;AAAiF,UAAA,QAAQ,EAAE2C,kBAA3F;AAA+G,UAAA,SAAS;AAAxH;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI,QAAC,IAAD;AAAA,kBACKH,SAAS,CAAChC,aAAV,CACIuC,MADJ,CACYV,CAAD,IAAO;AACX,cAAIA,CAAJ,EAAO;AACH,gBAAIA,CAAC,CAACN,OAAN,EAAe;AACX,kBAAIiB,MAAM,GAAGX,CAAC,CAACN,OAAF,CAAUK,IAAV,CAAgBa,CAAD,IAAO;AAC/B,uBAAOA,CAAC,CAACC,GAAF,KAAU5C,KAAK,CAACgC,WAAN,CAAkBlB,EAAnC;AACH,eAFY,CAAb;;AAGA,kBAAI4B,MAAM,CAACG,QAAX,EAAqB;AACjB,uBAAOH,MAAM,CAACG,QAAP,CAAgBnB,QAAhB,CAAyBS,UAAzB,CAAP;AACH;AACJ;AACJ;AACJ,SAZJ,EAaIW,GAbJ,CAaSf,CAAD,iBACD;AACI,UAAA,OAAO,EAAE,MAAM;AACX1B,YAAAA,cAAc,CAAC0B,CAAD,CAAd;AACH,WAHL;AAAA,iCAKI,QAAC,qBAAD;AAAuB,YAAA,SAAS,EAAE9B,OAAO,CAAC8C,MAA1C;AAAkD,YAAA,YAAY,EAAEhB,CAAhE;AAAmE,YAAA,WAAW,EAAEG,SAAS,CAACF;AAA1F;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,gBAdP;AADL;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAgCH,GA7F8B,CA+F/B;;;AA/F+B,KAoDtBC,iBApDsB;AAAA,YAqDXtD,SArDW;AAAA;;AAgG/B,WAASqE,gBAAT,CAA0BC,SAA1B,EAAqC;AAAA;;AACjC,UAAMhD,OAAO,GAAGtB,SAAS,EAAzB;AACA,UAAMrB,QAAQ,GAAGC,WAAW,EAA5B;AACA,UAAM,CAAC2F,UAAD,EAAaC,aAAb,IAA8BjG,QAAQ,CAAC,EAAD,CAA5C;AAEAD,IAAAA,SAAS,CAAC,MAAM;AACZ,UAAImG,cAAc,GAAGH,SAAS,CAACI,YAAV,CAAuBT,GAA5C;;AAEA,qBAAeU,YAAf,CAA4BxC,EAA5B,EAAgC;AAC5B,YAAIA,EAAJ,EAAQ;AACJ,gBAAMxD,QAAQ,CAACE,WAAW,CAACsD,EAAD,CAAZ,CAAd;AACH;AACJ;;AAED,aAAOwC,YAAY,CAACF,cAAD,CAAnB;AACH,KAVQ,EAUN,CAAC9F,QAAD,CAVM,CAAT;AAYA,UAAMiG,cAAc,GAAGlG,WAAW,CAAEuD,KAAD,IAAWA,KAAK,CAACN,QAAN,CAAeA,QAA3B,CAAlC;AAEArD,IAAAA,SAAS,CAAC,MAAM;AACZsD,MAAAA,WAAW,CAACgD,cAAD,CAAX;AACH,KAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;;AAIA,UAAMC,YAAY,GAAG,MAAOlB,CAAP,IAAa;AAC9B;AACA,UAAIA,CAAJ,EAAO;AACHA,QAAAA,CAAC,CAACmB,cAAF;AACH;;AACD,YAAMC,OAAO,GAAG;AACZvC,QAAAA,MAAM,EAAER,MADI;AAEZU,QAAAA,IAAI,EAAE6B,UAFM;AAGZE,QAAAA,cAAc,EAAEH,SAAS,CAACI,YAAV,CAAuBT;AAH3B,OAAhB;AAKArC,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,CAAD,CAAX;;AACA,YAAMqD,UAAU,GAAGvD,WAAW,CAACqB,OAAZ,CAAoBK,IAApB,CAA0B8B,MAAD,IAAYA,MAAM,CAAChB,GAAP,KAAejC,MAApD,EAA4DiC,GAA/E;;AACAlC,MAAAA,MAAM,CAACM,OAAP,CAAeY,IAAf,CAAoB,aAApB,EAAmC;AAC/BR,QAAAA,QAAQ,EAAET,MADqB;AAE/BgD,QAAAA,UAAU,EAAEA,UAFmB;AAG/BtC,QAAAA,IAAI,EAAE6B;AAHyB,OAAnC;AAKA5F,MAAAA,QAAQ,CAACG,UAAU,CAACiG,OAAD,CAAX,CAAR;AACAP,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAnBD;;AAqBA,WAAO,CAAC/C,WAAD,gBACH,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADG,gBAGH;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,SAAS,EAAEH,OAAO,CAACT,WAAzB;AAAA,kBACKqE,KAAK,CAACC,OAAN,CAAcxD,QAAd,KAA2BA,QAAQ,CAACyD,MAAT,KAAoB,CAA/C,GACGzD,QAAQ,CAACwC,GAAT,CAAcH,CAAD,iBAAO,QAAC,gBAAD;AAAkB,UAAA,OAAO,EAAEA;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAApB,CADH,gBAGG,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAyB,UAAA,SAAS,EAAC,gBAAnC;AAAoD,UAAA,SAAS,EAAE1C,OAAO,CAACP,SAAvE;AAAA,oEACgD,GADhD,EAGQU,WAAW,CAACqB,OAAZ,CAAoBK,IAApB,CAA0Ba,CAAD,IAAO;AAC5B,mBAAOA,CAAC,CAACC,GAAF,KAAU5C,KAAK,CAACgC,WAAN,CAAkBlB,EAAnC;AACH,WAFD,EAEG+B,QALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAJR;AAAA;AAAA;AAAA;AAAA,cADJ,eAgBI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAhBJ,eAiBI,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,SAAS,EAAE5C,OAAO,CAACL,SAAnC;AAAA,gCACI,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,EAAf;AAAA,iCACI,QAAC,SAAD;AAAW,YAAA,EAAE,EAAC,gBAAd;AAA+B,YAAA,OAAO,EAAC,UAAvC;AAAkD,YAAA,KAAK,EAAC,oBAAxD;AAA6E,YAAA,QAAQ,EAAG0C,CAAD,IAAOa,aAAa,CAACb,CAAC,CAACC,MAAF,CAASC,KAAV,CAA3G;AAA6H,YAAA,SAAS;AAAtI;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,EAAE,EAAE,CAAf;AAAA,iCACI,QAAC,GAAD;AAAK,YAAA,KAAK,EAAC,SAAX;AAAqB,0BAAW,KAAhC;AAAsC,YAAA,OAAO,EAAEgB,YAA/C;AAA6D,YAAA,SAAS,EAAEvD,OAAO,CAACJ,YAAhF;AAAA,mCACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAgCH;;AA5K8B,MAgGtBmD,gBAhGsB;AAAA,YAiGXrE,SAjGW,EAkGVpB,WAlGU,EAiHJF,WAjHI;AAAA;AA6KlC;;IA7KQ0C,kB;UACWpB,S,EAMDtB,W,EACaA,W;;;KARvB0C,kB;AA+KT,eAAeA,kBAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { connect, useSelector, dispatch } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { getMessages, addMessage } from 'redux/actions/messageActions';\nimport { Grid, Paper, Divider, Typography, List, ListItem, ListItemText, Button, Icon, Fab } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SendIcon from '@material-ui/icons/Send';\nimport TextField from '@material-ui/core/TextField';\nimport ConversationComponent from './ConversationComponent';\nimport MessageComponent from './MessageComponent';\nimport Loading from 'components/Loading';\nimport io from 'socket.io-client';\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        width: '80%',\n        alignSelf: 'center',\n    },\n    table: {\n        minWidth: 650,\n    },\n    chatSection: {\n        width: '100%',\n        height: '85vh',\n    },\n    headBG: {\n        backgroundColor: '#e0e0e0',\n    },\n    borderRight500: {\n        borderRight: '1px solid #e0e0e0',\n    },\n    messageArea: {\n        height: '70vh',\n        overflowY: 'auto',\n    },\n    padding10: {\n        padding: '10px',\n    },\n    padding20: {\n        padding: '20px',\n    },\n    marginLeft10: {\n        marginLeft: '10px',\n    },\n}));\n\nfunction MessengerComponent(props) {\n    const classes = useStyles();\n    const [conversations, setConversations] = useState([]);\n    const [currentChat, setCurrentChat] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [arrivalMessage, setArrivalMessage] = useState(null);\n    const socket = useRef();\n    const userId = useSelector((state) => state.user.user.id);\n    const loadedConversations = useSelector((state) => state.conversations.conversations);\n\n    useEffect(() => {\n        socket.current = io('ws://localhost:8900');\n        socket.current.on('getMessage', (data) => {\n            setArrivalMessage({\n                sender: data.senderId,\n                text: data.text,\n                createdAt: Date.now(),\n            });\n        });\n    }, []);\n\n    useEffect(() => {\n        arrivalMessage && currentChat?.members.includes(arrivalMessage.sender) && setMessages((prev) => [...prev, arrivalMessage]);\n    }, [arrivalMessage, currentChat]);\n\n    useEffect(() => {\n        socket.current.emit('addUser', userId);\n    }, [userId]);\n\n    useEffect(() => {\n        if (props.currentConversationId) {\n            setCurrentChat(loadedConversations.find((c) => (c.id = props.currentConversationId)));\n        }\n    }, [props.currentConversationId]);\n\n    return (\n        <div className={classes.layout}>\n            <Grid container component={Paper} className={classes.chatSection}>\n                <ChatMenuComponent conversations={props.conversations} currentUser={props.currentUser} />\n                <Grid item xs={9}>\n                    {currentChat ? (\n                        <ChatBoxComponent conversation={currentChat} />\n                    ) : (\n                        <Typography variant=\"h5\" className=\"header-message\" className={classes.padding10}>\n                            Open a conversation to start a chat...\n                        </Typography>\n                    )}\n                </Grid>\n            </Grid>\n        </div>\n    );\n\n    function ChatMenuComponent(menuProps) {\n        const classes = useStyles();\n\n        const [searchName, setSearchName] = useState('');\n\n        const handleSearchChange = (e) => {\n            setSearchName(e.target.value);\n        };\n\n        return (\n            <Grid item xs={3} className={classes.borderRight500}>\n                <Grid item xs={12} className={classes.padding10}>\n                    <TextField id=\"outlined-basic\" variant=\"outlined\" label=\"Search for breeders...\" onChange={handleSearchChange} fullWidth />\n                </Grid>\n                <Divider />\n                <List>\n                    {menuProps.conversations\n                        .filter((c) => {\n                            if (c) {\n                                if (c.members) {\n                                    let friend = c.members.find((m) => {\n                                        return m._id !== props.currentUser.id;\n                                    });\n                                    if (friend.username) {\n                                        return friend.username.includes(searchName);\n                                    }\n                                }\n                            }\n                        })\n                        .map((c) => (\n                            <div\n                                onClick={() => {\n                                    setCurrentChat(c);\n                                }}\n                            >\n                                <ConversationComponent className={classes.bonker} conversation={c} currentUser={menuProps.currentUser} />\n                            </div>\n                        ))}\n                </List>\n            </Grid>\n        );\n    }\n\n    // TODO: Make scrolling to bottom message automatic\n    function ChatBoxComponent(chatProps) {\n        const classes = useStyles();\n        const dispatch = useDispatch();\n        const [newMessage, setNewMessage] = useState('');\n\n        useEffect(() => {\n            let conversationId = chatProps.conversation._id;\n\n            async function loadMessages(id) {\n                if (id) {\n                    await dispatch(getMessages(id));\n                }\n            }\n\n            return loadMessages(conversationId);\n        }, [dispatch]);\n\n        const loadedMessages = useSelector((state) => state.messages.messages);\n\n        useEffect(() => {\n            setMessages(loadedMessages);\n        }, [loadedMessages]);\n\n        const handleSubmit = async (e) => {\n            // Prevents refreshing of page on click\n            if (e) {\n                e.preventDefault();\n            }\n            const message = {\n                sender: userId,\n                text: newMessage,\n                conversationId: chatProps.conversation._id,\n            };\n            setMessages([...messages]);\n            const receiverId = currentChat.members.find((member) => member._id !== userId)._id;\n            socket.current.emit('sendMessage', {\n                senderId: userId,\n                receiverId: receiverId,\n                text: newMessage,\n            });\n            dispatch(addMessage(message));\n            setNewMessage('');\n        };\n\n        return !currentChat ? (\n            <Loading />\n        ) : (\n            <div>\n                <List className={classes.messageArea}>\n                    {Array.isArray(messages) && messages.length !== 0 ? (\n                        messages.map((m) => <MessageComponent message={m} />)\n                    ) : (\n                        <Typography variant=\"h5\" className=\"header-message\" className={classes.padding10}>\n                            Send a message to start a conversation with{' '}\n                            {\n                                currentChat.members.find((m) => {\n                                    return m._id !== props.currentUser.id;\n                                }).username\n                            }\n                            ...\n                        </Typography>\n                    )}\n                </List>\n                <Divider />\n                <Grid container className={classes.padding20}>\n                    <Grid item xs={11}>\n                        <TextField id=\"outlined-basic\" variant=\"outlined\" label=\"Write something...\" onChange={(e) => setNewMessage(e.target.value)} fullWidth />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <Fab color=\"primary\" aria-label=\"add\" onClick={handleSubmit} className={classes.marginLeft10}>\n                            <SendIcon />\n                        </Fab>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default MessengerComponent;\n"]},"metadata":{},"sourceType":"module"}