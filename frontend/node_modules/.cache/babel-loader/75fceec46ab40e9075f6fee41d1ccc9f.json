{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/upload/documents.upload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { sha256 } from 'js-sha256';\nimport { Button } from '@material-ui/core';\nimport { connect, useDispatch } from 'react-redux';\nimport { usePet } from 'helper/hooks/pets.hooks';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { updateSelectedPet } from 'redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst prepareDocumentsFileList = pet => {\n  let petList = [];\n  pet.documents.forEach((value, index) => {\n    petList.push({\n      uid: index,\n      name: value.name,\n      status: 'done',\n      url: value.url\n    });\n  });\n  return petList;\n};\n\nconst prepareCompetitionsFileList = (pet, key) => {\n  let petList = [];\n  pet.competitions.forEach((value, index) => {\n    if (value._id === key) {\n      if (value.certificate) {\n        petList.push({\n          uid: index,\n          name: value.certificate.name,\n          status: 'done',\n          url: value.certificate.url\n        });\n      }\n    }\n  });\n  return petList;\n};\n/**\n *\n * @param  props\n * @returns Component to upload pet documents or certificates\n */\n\n\nconst DocumentsUpload = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    mode\n  } = props;\n  const isCompetition = props.type === 'competitions';\n  let key = isCompetition && props.competitionId; // get global states\n\n  const user = useUser();\n  const pet = usePet();\n  console.log(key, pet);\n  const [fileList, setFileList] = useState(mode === 'add' ? [] : isCompetition ? prepareCompetitionsFileList(pet, key) : prepareDocumentsFileList(pet));\n  const keyFolder = isCompetition ? 'competitions' : 'documents';\n  const pathPrefix = `users/${user.id}/pets/documents`;\n  let maxFileNumber = props.maxFiles || 8; // update file list\n\n  const handleChange = ({\n    fileList\n  }) => setFileList(fileList); // upload image\n\n\n  const customUpload = async data => {\n    const docName = sha256(data.file.name); //a unique name for the image\n\n    /** Firebase storage structure\n     * -| users\n     *   -| userId\n     *     -| pets\n     *      -| documents\n     */\n\n    const imgPath = `${pathPrefix}/${docName}`;\n    const newData = {\n      name: data.file.name,\n      type: data.file.type,\n      path: imgPath,\n      url: undefined,\n      uploadDate: new Date(),\n      verified: false,\n      data: data,\n      status: 'upload'\n    };\n    let petData = pet;\n\n    if (isCompetition) {\n      let competitionData = [...pet.competitions];\n      competitionData.map((item, index) => {\n        if (item._id === key) {\n          item.certificate = newData;\n          return item;\n        }\n\n        return item;\n      });\n      petData.competitions = competitionData;\n      dispatch(updateSelectedPet(petData));\n    } else {\n      let docs = [...pet.documents, newData];\n      petData.documents = docs;\n      dispatch(updateSelectedPet(petData));\n    }\n\n    data.onSuccess(null);\n  }; // remove document\n\n\n  const handleRemove = async file => {\n    let petData = pet; // remove competition\n\n    if (isCompetition) {\n      let competitionData = [...pet.competitions];\n      competitionData.map((item, index) => {\n        if (index === key) {\n          item.certificate = {};\n          return item;\n        }\n\n        return item;\n      });\n      petData.competitions = competitionData;\n      dispatch(updateSelectedPet(petData)); // remove document\n    } else {\n      let petData = pet;\n      let docData = [...pet.documents];\n\n      if (file.url) {\n        // set status delete to remove it later onSave from firebase\n        docData.map(value => value.name === file.name ? value.status = 'delete' : value);\n        petData.documents = docData;\n        dispatch(updateSelectedPet(petData));\n      } else {\n        let docObj = docData.filter(value => value.name !== file.name);\n        petData.documents = docObj;\n        dispatch(updateSelectedPet(petData));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Upload, {\n      listType: \"text\",\n      fileList: fileList,\n      onChange: handleChange,\n      customRequest: customUpload,\n      onRemove: handleRemove,\n      children: fileList.length >= maxFileNumber ? null : /*#__PURE__*/_jsxDEV(Button, {\n        size: props.size || 'medium',\n        variant: \"contained\",\n        color: \"secondary\",\n        startIcon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 108\n        }, this),\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DocumentsUpload, \"y92WTqRPq6ByR3+OyRRSdPT3q0U=\", false, function () {\n  return [useDispatch, useUser, usePet];\n});\n\n_c = DocumentsUpload;\nexport default connect()(DocumentsUpload);\n\nvar _c;\n\n$RefreshReg$(_c, \"DocumentsUpload\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/upload/documents.upload.js"],"names":["React","useState","Upload","UploadOutlined","sha256","Button","connect","useDispatch","usePet","useUser","updateSelectedPet","prepareDocumentsFileList","pet","petList","documents","forEach","value","index","push","uid","name","status","url","prepareCompetitionsFileList","key","competitions","_id","certificate","DocumentsUpload","props","dispatch","mode","isCompetition","type","competitionId","user","console","log","fileList","setFileList","keyFolder","pathPrefix","id","maxFileNumber","maxFiles","handleChange","customUpload","data","docName","file","imgPath","newData","path","undefined","uploadDate","Date","verified","petData","competitionData","map","item","docs","onSuccess","handleRemove","docData","docObj","filter","length","size"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { sha256 } from 'js-sha256';\nimport { Button } from '@material-ui/core';\nimport { connect, useDispatch } from 'react-redux';\nimport { usePet } from 'helper/hooks/pets.hooks';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { updateSelectedPet } from 'redux/actions';\n\nconst prepareDocumentsFileList = (pet) => {\n    let petList = [];\n    pet.documents.forEach((value, index) => {\n        petList.push({\n            uid: index,\n            name: value.name,\n            status: 'done',\n            url: value.url,\n        });\n    });\n    return petList;\n};\n\nconst prepareCompetitionsFileList = (pet, key) => {\n    let petList = [];\n    pet.competitions.forEach((value, index) => {\n        if (value._id === key) {\n            if (value.certificate) {\n                petList.push({\n                    uid: index,\n                    name: value.certificate.name,\n                    status: 'done',\n                    url: value.certificate.url,\n                });\n            }\n        }\n    });\n    return petList;\n};\n\n/**\n *\n * @param  props\n * @returns Component to upload pet documents or certificates\n */\n\nconst DocumentsUpload = (props) => {\n    const dispatch = useDispatch();\n    const { mode } = props;\n    const isCompetition = props.type === 'competitions';\n    let key = isCompetition && props.competitionId;\n\n    // get global states\n    const user = useUser();\n    const pet = usePet();\n\n    console.log(key, pet)\n\n    const [fileList, setFileList] = useState(mode === 'add' ? [] : isCompetition ? prepareCompetitionsFileList(pet, key) : prepareDocumentsFileList(pet));\n\n    const keyFolder = isCompetition ? 'competitions' : 'documents';\n    const pathPrefix = `users/${user.id}/pets/documents`;\n    let maxFileNumber = props.maxFiles || 8;\n\n    // update file list\n    const handleChange = ({ fileList }) => setFileList(fileList);\n\n    // upload image\n    const customUpload = async (data) => {\n        const docName = sha256(data.file.name); //a unique name for the image\n\n        /** Firebase storage structure\n         * -| users\n         *   -| userId\n         *     -| pets\n         *      -| documents\n         */\n        const imgPath = `${pathPrefix}/${docName}`;\n\n        const newData = {\n            name: data.file.name,\n            type: data.file.type,\n            path: imgPath,\n            url: undefined,\n            uploadDate: new Date(),\n            verified: false,\n            data: data,\n            status: 'upload',\n        };\n\n        let petData = pet;\n\n        if (isCompetition) {\n            let competitionData = [...pet.competitions];\n            competitionData.map((item, index) => {\n                if (item._id === key) {\n                    item.certificate = newData;\n                    return item;\n                }\n                return item;\n            });\n            petData.competitions = competitionData;\n            dispatch(updateSelectedPet(petData));\n        } else {\n            let docs = [...pet.documents, newData];\n            petData.documents = docs;\n            dispatch(updateSelectedPet(petData));\n        }\n\n        data.onSuccess(null);\n    };\n\n    // remove document\n    const handleRemove = async (file) => {\n        let petData = pet;\n        // remove competition\n        if (isCompetition) {\n            let competitionData = [...pet.competitions];\n            competitionData.map((item, index) => {\n                if (index === key) {\n                    item.certificate = {};\n                    return item;\n                }\n                return item;\n            });\n\n            petData.competitions = competitionData;\n            dispatch(updateSelectedPet(petData));\n            // remove document\n        } else {\n            let petData = pet;\n            let docData = [...pet.documents];\n\n            if (file.url) {\n                // set status delete to remove it later onSave from firebase\n                docData.map((value) => (value.name === file.name ? (value.status = 'delete') : value));\n                petData.documents = docData;\n                dispatch(updateSelectedPet(petData));\n            } else {\n                let docObj = docData.filter((value) => value.name !== file.name);\n                petData.documents = docObj;\n                dispatch(updateSelectedPet(petData));\n            }\n        }\n    };\n\n    return (\n        <div>\n            <Upload listType=\"text\" fileList={fileList} onChange={handleChange} customRequest={customUpload} onRemove={handleRemove}>\n                {fileList.length >= maxFileNumber ? null : (\n                    <Button size={props.size || 'medium'} variant=\"contained\" color=\"secondary\" startIcon={<UploadOutlined />}>\n                        Upload\n                    </Button>\n                )}\n            </Upload>\n        </div>\n    );\n};\n\nexport default connect()(DocumentsUpload);\n"]},"metadata":{},"sourceType":"module"}