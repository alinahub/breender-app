{"ast":null,"code":"const getUser = () => {\n  if (window.localStorage['jwtToken']) {\n    let token = window.localStorage['jwtToken'];\n    let base64Url = token.split('.')[1];\n    let base64 = base64Url.replace('-', '+').replace('_', '/');\n    let userJson = JSON.parse(window.atob(base64)); // if token is expired delete it and return {}\n    // --> User is not logged in anymore.\n\n    if (userJson.exp > Date.now()) {\n      window.localStorage.removeItem('jwtToken');\n      return {};\n    }\n\n    return {\n      user: {\n        id: userJson._id,\n        username: userJson.username,\n        role: userJson.role,\n        subscriptionPlan: userJson.subscriptionPlan\n      }\n    };\n  }\n\n  return {};\n};\n\nexport default function user(state = getUser(), action) {\n  switch (action.type) {\n    case 'LOGIN_SUCCESS':\n      return { ...state,\n        user: action.user\n      };\n\n    case 'LOGIN_FAILURE':\n      return {\n        error: action.error\n      };\n\n    case \"UPDATE_SUCCESS\":\n      return {\n        user: action.user\n      };\n\n    case \"LOGIN_RESET\":\n      return {};\n\n    case 'LOGOUT':\n      return {};\n\n    case \"GET_USER_INFO\":\n      return { ...state,\n        userInfo: action.user\n      };\n\n    case \"GET_USER_PETS\":\n      return { ...state,\n        pets: action.pets\n      };\n\n    case \"UPDATE_USER\":\n      return { ...state,\n        user: action.user,\n        userInfo: action.userInfo\n      };\n\n    case \"GET_SELECTED_USER\":\n      return { ...state,\n        selectedUser: action.user\n      };\n\n    case \"GET_SELECTED_USER_PETS\":\n      return { ...state,\n        selectedUserPets: action.pets\n      };\n\n    case \"GET_REVIEWS_ON_USER\":\n      return { ...state,\n        reviews: action.reviews\n      };\n\n    case \"GET_REVIEWS_ON_SELECTED_USER\":\n      return { ...state,\n        reviewsOnSelectedUser: action.reviews\n      };\n\n    case \"ADD_REVIEW\":\n      return { ...state\n      };\n\n    case 'GET_LOGGEDINUSER':\n      return { ...state,\n        loggedInUser: action.loggedInUser\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/reducers/userReducer.js"],"names":["getUser","window","localStorage","token","base64Url","split","base64","replace","userJson","JSON","parse","atob","exp","Date","now","removeItem","user","id","_id","username","role","subscriptionPlan","state","action","type","error","userInfo","pets","selectedUser","selectedUserPets","reviews","reviewsOnSelectedUser","loggedInUser"],"mappings":"AAAA,MAAMA,OAAO,GAAG,MAAM;AAClB,MAAIC,MAAM,CAACC,YAAP,CAAoB,UAApB,CAAJ,EAAqC;AACjC,QAAIC,KAAK,GAAGF,MAAM,CAACC,YAAP,CAAoB,UAApB,CAAZ;AACA,QAAIE,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAhB;AACA,QAAIC,MAAM,GAAGF,SAAS,CAACG,OAAV,CAAkB,GAAlB,EAAuB,GAAvB,EAA4BA,OAA5B,CAAoC,GAApC,EAAyC,GAAzC,CAAb;AACA,QAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWT,MAAM,CAACU,IAAP,CAAYL,MAAZ,CAAX,CAAf,CAJiC,CAKjC;AACA;;AACA,QAAIE,QAAQ,CAACI,GAAT,GAAeC,IAAI,CAACC,GAAL,EAAnB,EAA+B;AAC3Bb,MAAAA,MAAM,CAACC,YAAP,CAAoBa,UAApB,CAA+B,UAA/B;AACA,aAAO,EAAP;AACH;;AACD,WAAO;AACHC,MAAAA,IAAI,EAAE;AACFC,QAAAA,EAAE,EAAET,QAAQ,CAACU,GADX;AAEFC,QAAAA,QAAQ,EAAEX,QAAQ,CAACW,QAFjB;AAGFC,QAAAA,IAAI,EAAEZ,QAAQ,CAACY,IAHb;AAIFC,QAAAA,gBAAgB,EAAEb,QAAQ,CAACa;AAJzB;AADH,KAAP;AAQH;;AACD,SAAO,EAAP;AACH,CAtBD;;AAwBA,eAAe,SAASL,IAAT,CAAcM,KAAK,GAAGtB,OAAO,EAA7B,EAAiCuB,MAAjC,EAAyC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,eAAL;AACI,aAAO,EAAE,GAAGF,KAAL;AAAYN,QAAAA,IAAI,EAAEO,MAAM,CAACP;AAAzB,OAAP;;AACJ,SAAK,eAAL;AACI,aAAO;AAAES,QAAAA,KAAK,EAAEF,MAAM,CAACE;AAAhB,OAAP;;AACJ,SAAK,gBAAL;AACI,aAAO;AAAET,QAAAA,IAAI,EAAEO,MAAM,CAACP;AAAf,OAAP;;AACJ,SAAK,aAAL;AACI,aAAO,EAAP;;AACJ,SAAK,QAAL;AACI,aAAO,EAAP;;AACJ,SAAK,eAAL;AACI,aAAO,EAAE,GAAGM,KAAL;AAAYI,QAAAA,QAAQ,EAAEH,MAAM,CAACP;AAA7B,OAAP;;AACJ,SAAK,eAAL;AACI,aAAO,EAAE,GAAGM,KAAL;AAAYK,QAAAA,IAAI,EAAEJ,MAAM,CAACI;AAAzB,OAAP;;AACJ,SAAK,aAAL;AACI,aAAO,EAAE,GAAGL,KAAL;AAAYN,QAAAA,IAAI,EAAEO,MAAM,CAACP,IAAzB;AAA+BU,QAAAA,QAAQ,EAAEH,MAAM,CAACG;AAAhD,OAAP;;AACJ,SAAK,mBAAL;AACI,aAAO,EAAE,GAAGJ,KAAL;AAAYM,QAAAA,YAAY,EAAEL,MAAM,CAACP;AAAjC,OAAP;;AACJ,SAAK,wBAAL;AACI,aAAO,EAAE,GAAGM,KAAL;AAAYO,QAAAA,gBAAgB,EAAEN,MAAM,CAACI;AAArC,OAAP;;AACJ,SAAK,qBAAL;AACI,aAAO,EAAE,GAAGL,KAAL;AAAYQ,QAAAA,OAAO,EAAEP,MAAM,CAACO;AAA5B,OAAP;;AACJ,SAAK,8BAAL;AACI,aAAO,EAAE,GAAGR,KAAL;AAAYS,QAAAA,qBAAqB,EAAER,MAAM,CAACO;AAA1C,OAAP;;AACJ,SAAK,YAAL;AACI,aAAO,EAAE,GAAGR;AAAL,OAAP;;AACJ,SAAK,kBAAL;AACI,aAAO,EAAE,GAAGA,KAAL;AAAYU,QAAAA,YAAY,EAAET,MAAM,CAACS;AAAjC,OAAP;;AACJ;AACI,aAAOV,KAAP;AA9BR;AAgCH","sourcesContent":["const getUser = () => {\n    if (window.localStorage['jwtToken']) {\n        let token = window.localStorage['jwtToken'];\n        let base64Url = token.split('.')[1];\n        let base64 = base64Url.replace('-', '+').replace('_', '/');\n        let userJson = JSON.parse(window.atob(base64));\n        // if token is expired delete it and return {}\n        // --> User is not logged in anymore.\n        if (userJson.exp > Date.now()) {\n            window.localStorage.removeItem('jwtToken');\n            return {};\n        }\n        return {\n            user: {\n                id: userJson._id,\n                username: userJson.username,\n                role: userJson.role,\n                subscriptionPlan: userJson.subscriptionPlan\n            }\n        };\n    }\n    return {};\n};\n\nexport default function user(state = getUser(), action) {\n    switch (action.type) {\n        case 'LOGIN_SUCCESS':\n            return { ...state, user: action.user };\n        case 'LOGIN_FAILURE':\n            return { error: action.error };\n        case \"UPDATE_SUCCESS\":\n            return { user: action.user };\n        case \"LOGIN_RESET\":\n            return {};\n        case 'LOGOUT':\n            return {};\n        case \"GET_USER_INFO\":\n            return { ...state, userInfo: action.user };\n        case \"GET_USER_PETS\":\n            return { ...state, pets: action.pets };\n        case \"UPDATE_USER\":\n            return { ...state, user: action.user, userInfo: action.userInfo };\n        case \"GET_SELECTED_USER\":\n            return { ...state, selectedUser: action.user };\n        case \"GET_SELECTED_USER_PETS\":\n            return { ...state, selectedUserPets: action.pets };\n        case \"GET_REVIEWS_ON_USER\":\n            return { ...state, reviews: action.reviews };\n        case \"GET_REVIEWS_ON_SELECTED_USER\":\n            return { ...state, reviewsOnSelectedUser: action.reviews };\n        case \"ADD_REVIEW\":\n            return { ...state }\n        case 'GET_LOGGEDINUSER':\n            return { ...state, loggedInUser: action.loggedInUser };\n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}