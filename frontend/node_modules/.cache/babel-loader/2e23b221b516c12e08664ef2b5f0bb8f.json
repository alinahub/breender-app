{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/upload/documents.upload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { sha256 } from 'js-sha256';\nimport { Button } from '@material-ui/core';\nimport { connect, useDispatch } from 'react-redux';\nimport { usePetCompetitions, usePetDocuments } from 'helper/hooks/pets.hooks';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { updateCompetitionsToUpload, updateDocumentsToUpload } from 'redux/actions';\nimport { UPLOAD_STATUS } from 'helper/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst prepareCompetitions = competitions => {\n  let arr = competitions;\n  arr.map((value, index) => {\n    value.key = index;\n    value.date = new Date(value.date);\n    return value;\n  });\n  return arr;\n};\n\nconst prepareDocumentsFileList = petDocuments => {\n  let petList = [];\n  petDocuments.forEach((value, index) => {\n    petList.push({\n      uid: index,\n      name: value.name,\n      status: UPLOAD_STATUS.DONE,\n      url: value.url\n    });\n  });\n  return petList;\n};\n\nconst prepareCompetitionsFileList = (petCompetitions, key) => {\n  const competitions = prepareCompetitions(petCompetitions);\n  let petList = [];\n  competitions.forEach((value, index) => {\n    console.log(value, key);\n\n    if (value.key === key) {\n      if (value.certificate) {\n        petList.push({\n          uid: index,\n          name: value.certificate.name,\n          status: UPLOAD_STATUS.DONE,\n          url: value.certificate.url\n        });\n      }\n    }\n  });\n  return petList;\n};\n/**\n *\n * @param  props\n * @returns Component to upload pet documents or certificates\n */\n\n\nconst DocumentsUpload = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    mode,\n    competitions\n  } = props;\n  const isCompetition = props.type === 'competitions';\n  let key = isCompetition ? props.competitionId : null; // get global states\n\n  const user = useUser();\n  const petDocuments = usePetDocuments();\n  const petCompetitions = usePetCompetitions();\n  const [fileList, setFileList] = useState(mode === 'add' ? [] : isCompetition ? prepareCompetitionsFileList(petCompetitions, key) : prepareDocumentsFileList(petDocuments));\n  const pathPrefix = `users/${user.id}/pets/documents`;\n  let maxFileNumber = props.maxFiles || 8; // update file list\n\n  const handleChange = ({\n    fileList\n  }) => setFileList(fileList); // upload image\n\n\n  const customUpload = async data => {\n    const docName = sha256(data.file.name); //a unique name for the image\n\n    /** Firebase storage structure\n     * -| users\n     *   -| userId\n     *     -| pets\n     *      -| documents\n     */\n\n    const imgPath = `${pathPrefix}/${docName}`;\n    const newData = {\n      name: data.file.name,\n      type: data.file.type,\n      path: imgPath,\n      url: undefined,\n      uploadDate: new Date(),\n      verified: false,\n      data: data,\n      status: UPLOAD_STATUS.UPLOAD\n    };\n\n    if (isCompetition) {\n      let competitionData = [...petCompetitions];\n      competitionData.map((item, index) => {\n        if (item.key === key) {\n          item.certificate = newData;\n          return item;\n        }\n\n        return item;\n      });\n      dispatch(updateCompetitionsToUpload(competitionData));\n    } else {\n      let docs = [...petDocuments, newData];\n      dispatch(updateDocumentsToUpload(docs));\n    }\n\n    data.onSuccess(null);\n  }; // remove document\n\n\n  const handleRemove = async file => {\n    // remove competition\n    if (isCompetition) {\n      let competitionData = [...petCompetitions];\n      competitionData.map((item, index) => {\n        if (item._id === key) {\n          item.certificate = undefined;\n          return item;\n        }\n\n        return item;\n      });\n      dispatch(updateCompetitionsToUpload(competitionData)); // remove document\n    } else {\n      let docData = [...petDocuments];\n\n      if (file.url) {\n        // set status delete to remove it later onSave from firebase\n        docData.map(value => value.name === file.name ? value.status = UPLOAD_STATUS.DELETE : value);\n        dispatch(updateDocumentsToUpload(docData));\n      } else {\n        let docObj = docData.filter(value => value.name !== file.name);\n        dispatch(updateDocumentsToUpload(docObj));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Upload, {\n      listType: \"text\",\n      fileList: fileList,\n      onChange: handleChange,\n      customRequest: customUpload,\n      onRemove: handleRemove,\n      children: fileList.length >= maxFileNumber ? null : /*#__PURE__*/_jsxDEV(Button, {\n        size: props.size || 'medium',\n        variant: \"contained\",\n        color: \"secondary\",\n        startIcon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 108\n        }, this),\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DocumentsUpload, \"9cB72eTEUZsPCziG0YKq/5zTIis=\", false, function () {\n  return [useDispatch, useUser, usePetDocuments, usePetCompetitions];\n});\n\n_c = DocumentsUpload;\nexport default connect()(DocumentsUpload);\n\nvar _c;\n\n$RefreshReg$(_c, \"DocumentsUpload\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/upload/documents.upload.js"],"names":["React","useState","Upload","UploadOutlined","sha256","Button","connect","useDispatch","usePetCompetitions","usePetDocuments","useUser","updateCompetitionsToUpload","updateDocumentsToUpload","UPLOAD_STATUS","prepareCompetitions","competitions","arr","map","value","index","key","date","Date","prepareDocumentsFileList","petDocuments","petList","forEach","push","uid","name","status","DONE","url","prepareCompetitionsFileList","petCompetitions","console","log","certificate","DocumentsUpload","props","dispatch","mode","isCompetition","type","competitionId","user","fileList","setFileList","pathPrefix","id","maxFileNumber","maxFiles","handleChange","customUpload","data","docName","file","imgPath","newData","path","undefined","uploadDate","verified","UPLOAD","competitionData","item","docs","onSuccess","handleRemove","_id","docData","DELETE","docObj","filter","length","size"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { sha256 } from 'js-sha256';\nimport { Button } from '@material-ui/core';\nimport { connect, useDispatch } from 'react-redux';\nimport { usePetCompetitions, usePetDocuments } from 'helper/hooks/pets.hooks';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { updateCompetitionsToUpload, updateDocumentsToUpload } from 'redux/actions';\nimport { UPLOAD_STATUS } from 'helper/types';\n\nconst prepareCompetitions = (competitions) => {\n    let arr = competitions;\n    arr.map((value, index) => {\n        value.key = index;\n        value.date = new Date(value.date);\n        return value;\n    });\n    return arr;\n};\n\n\nconst prepareDocumentsFileList = (petDocuments) => {\n    let petList = [];\n    petDocuments.forEach((value, index) => {\n        petList.push({\n            uid: index,\n            name: value.name,\n            status: UPLOAD_STATUS.DONE,\n            url: value.url,\n        });\n    });\n    return petList;\n};\n\nconst prepareCompetitionsFileList = (petCompetitions, key) => {\n    const competitions = prepareCompetitions(petCompetitions);\n    let petList = [];\n    competitions.forEach((value, index) => {\n        console.log(value, key)\n        if (value.key === key) {\n            if (value.certificate) {\n                petList.push({\n                    uid: index,\n                    name: value.certificate.name,\n                    status: UPLOAD_STATUS.DONE,\n                    url: value.certificate.url,\n                });\n            }\n        }\n    });\n    return petList;\n};\n\n/**\n *\n * @param  props\n * @returns Component to upload pet documents or certificates\n */\n\nconst DocumentsUpload = (props) => {\n    const dispatch = useDispatch();\n    const { mode, competitions } = props;\n    const isCompetition = props.type === 'competitions';\n    let key = isCompetition ? props.competitionId : null;\n\n    // get global states\n    const user = useUser();\n    const petDocuments = usePetDocuments();\n    const petCompetitions = usePetCompetitions();\n\n    const [fileList, setFileList] = useState(mode === 'add' ? [] : isCompetition ? prepareCompetitionsFileList(petCompetitions, key) : prepareDocumentsFileList(petDocuments));\n\n    const pathPrefix = `users/${user.id}/pets/documents`;\n    let maxFileNumber = props.maxFiles || 8;\n\n    // update file list\n    const handleChange = ({ fileList }) => setFileList(fileList);\n\n    // upload image\n    const customUpload = async (data) => {\n        const docName = sha256(data.file.name); //a unique name for the image\n\n        /** Firebase storage structure\n         * -| users\n         *   -| userId\n         *     -| pets\n         *      -| documents\n         */\n        const imgPath = `${pathPrefix}/${docName}`;\n\n        const newData = {\n            name: data.file.name,\n            type: data.file.type,\n            path: imgPath,\n            url: undefined,\n            uploadDate: new Date(),\n            verified: false,\n            data: data,\n            status: UPLOAD_STATUS.UPLOAD,\n        };\n\n        if (isCompetition) {\n            let competitionData = [...petCompetitions];\n            competitionData.map((item, index) => {\n                if (item.key === key) {\n                    item.certificate = newData;\n                    return item;\n                }\n                return item;\n            });\n            dispatch(updateCompetitionsToUpload(competitionData));\n        } else {\n            let docs = [...petDocuments, newData];\n            dispatch(updateDocumentsToUpload(docs));\n        }\n\n        data.onSuccess(null);\n    };\n\n    // remove document\n    const handleRemove = async (file) => {\n        // remove competition\n        if (isCompetition) {\n            let competitionData = [...petCompetitions];\n            competitionData.map((item, index) => {\n                if (item._id === key) {\n                    item.certificate = undefined;\n                    return item;\n                }\n                return item;\n            });\n\n            dispatch(updateCompetitionsToUpload(competitionData));\n            // remove document\n        } else {\n            let docData = [...petDocuments];\n\n            if (file.url) {\n                // set status delete to remove it later onSave from firebase\n                docData.map((value) => (value.name === file.name ? (value.status = UPLOAD_STATUS.DELETE) : value));\n                dispatch(updateDocumentsToUpload(docData));\n            } else {\n                let docObj = docData.filter((value) => value.name !== file.name);\n                dispatch(updateDocumentsToUpload(docObj));\n            }\n        }\n    };\n\n    return (\n        <div>\n            <Upload listType=\"text\" fileList={fileList} onChange={handleChange} customRequest={customUpload} onRemove={handleRemove}>\n                {fileList.length >= maxFileNumber ? null : (\n                    <Button size={props.size || 'medium'} variant=\"contained\" color=\"secondary\" startIcon={<UploadOutlined />}>\n                        Upload\n                    </Button>\n                )}\n            </Upload>\n        </div>\n    );\n};\n\nexport default connect()(DocumentsUpload);\n"]},"metadata":{},"sourceType":"module"}