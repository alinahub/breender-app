{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/transactions/PaymentStepper.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport { Check } from '@material-ui/icons';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport StepperInformation from './StepperInformation';\nimport { useLoggedInUser } from 'helper/hooks/auth.hooks';\nimport PaymentResultComponent from './PaymentResult';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changePet, createTransaction, getUser } from 'redux/actions';\nimport { NotificationService } from 'services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STATUS_TYPE = {\n  SUCCESS: 'success',\n  ERROR: 'error'\n};\n\nconst PaymentStepper = ({\n  pet,\n  close\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [paymentStatus, setPaymentStatus] = useState('none');\n  const transaction = useSelector(state => state.transaction.transaction);\n  const petOwner = useSelector(state => state.user.selectedUser);\n  const [activeStep, setActiveStep] = useState(0);\n  const steps = ['Confirm general information', 'Confirm payment', 'Finish'];\n  const loggedInUser = useLoggedInUser();\n  const [isFreeOfCharge, setIsFreeOfCharge] = useState(false);\n  useEffect(() => {\n    if (loggedInUser) {\n      setIsFreeOfCharge(loggedInUser.subscriptionPlan === 'premium' && pet.price === 0); // premium user don't need to pay any fees for the free pet\n\n      dispatch(getUser(pet.ownerId));\n    }\n  }, [loggedInUser, pet.ownerId, pet.price, dispatch]);\n  const isButtonDisabled = activeStep === 1 && !isFreeOfCharge; // helper functions for the transaction generation\n\n  const amountToPay = () => {\n    if (loggedInUser.subscriptionPlan === 'free') {\n      let fee = Math.min(pet.price * 0.05, 20); // 5% of the pet price or maximum 20€ as fee\n\n      fee = Math.max(fee, 1); // min 1€\n\n      return pet.price + fee;\n    }\n\n    return pet.price;\n  }; // generate order number for new transactions\n\n\n  const generateId = () => Math.floor(Math.random() * 10000000000).toString(16);\n\n  const transactionData = {\n    orderNr: generateId(),\n    senderId: loggedInUser._id,\n    receiverId: pet.ownerId,\n    pet: pet.id,\n    createdAt: new Date(),\n    senderResponse: 'pending',\n    receiverResponse: 'pending',\n    status: 'pending',\n    amount: amountToPay(),\n    processed: false,\n    reminderSent: false\n  }; // handle next step\n\n  const handleNext = () => {\n    if (activeStep === steps.length - 1) {\n      close();\n      setActiveStep(0);\n      return;\n    } // skip payment and create transaction directly\n\n\n    if (isFreeOfCharge && activeStep === 1) {\n      onApprove();\n      return;\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  }; // go one step back\n\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  }; // main function for approval and transaction creation\n\n\n  const onApprove = async () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    await dispatch(createTransaction(transactionData, () => {\n      NotificationService.notify('success', 'Transaction Created', 'Transaction was successfully created');\n      setPaymentStatus(STATUS_TYPE.SUCCESS); // update pet status to purchased\n\n      let newPet = { ...pet,\n        purchased: true\n      };\n      dispatch(changePet(newPet));\n    }, () => {\n      NotificationService.notify('error', 'Transaction Error', 'Error occurred during transaction creation');\n      setPaymentStatus(STATUS_TYPE.ERROR);\n    }));\n  }; // error handling\n\n\n  const onError = () => {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setPaymentStatus(STATUS_TYPE.ERROR);\n  };\n\n  const getStepContent = stepIndex => {\n    switch (stepIndex) {\n      case 0:\n        return /*#__PURE__*/_jsxDEV(StepperInformation, {\n          petOwner: petOwner,\n          pet: pet,\n          loggedInUser: loggedInUser,\n          step: 0,\n          isFreeOfCharge: isFreeOfCharge,\n          onApprove: onApprove,\n          onError: onError,\n          amount: amountToPay()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 24\n        }, this);\n\n      case 1:\n        return /*#__PURE__*/_jsxDEV(StepperInformation, {\n          petOwner: petOwner,\n          pet: pet,\n          loggedInUser: loggedInUser,\n          step: 1,\n          isFreeOfCharge: isFreeOfCharge,\n          onApprove: onApprove,\n          onError: onError,\n          amount: amountToPay()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 24\n        }, this);\n\n      case 2:\n        return /*#__PURE__*/_jsxDEV(PaymentResultComponent, {\n          status: paymentStatus,\n          transaction: transaction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 24\n        }, this);\n\n      default:\n        return 'Unknown stepIndex';\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Stepper, {\n      alternativeLabel: true,\n      activeStep: activeStep,\n      connector: /*#__PURE__*/_jsxDEV(AlternativeConnector, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 74\n      }, this),\n      children: steps.map((label, index) => {\n        const stepProps = {};\n        const labelProps = {};\n        return /*#__PURE__*/_jsxDEV(Step, { ...stepProps,\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            StepIconComponent: StepIcon,\n            ...labelProps,\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 29\n          }, this)\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: activeStep === steps.length ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [getStepContent(activeStep), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            disabled: activeStep === 0 || activeStep === 2,\n            onClick: handleBack,\n            className: classes.button,\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: isButtonDisabled,\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleNext,\n            className: classes.button,\n            children: activeStep === steps.length - 1 ? 'Finish' : 'Next'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n};\n/**\n * This function are used for the alternative styling of the stepper.\n */\n\n\n_s(PaymentStepper, \"H0s3v8SDILddAKg1IeVLq4bJ0mM=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useLoggedInUser];\n});\n\n_c = PaymentStepper;\nconst AlternativeConnector = withStyles({\n  alternativeLabel: {\n    top: 10,\n    left: 'calc(-50% + 16px)',\n    right: 'calc(50% + 16px)'\n  },\n  active: {\n    '& $line': {\n      borderColor: '#D37F65'\n    }\n  },\n  completed: {\n    '& $line': {\n      borderColor: '#D37F65'\n    }\n  },\n  line: {\n    borderColor: '#eaeaf0',\n    borderTopWidth: 2,\n    borderRadius: 1\n  }\n})(StepConnector);\nconst useStepIconStyles = makeStyles({\n  root: {\n    color: '#eaeaf0',\n    display: 'flex',\n    height: 22,\n    alignItems: 'center'\n  },\n  active: {\n    color: '#D37F65'\n  },\n  circle: {\n    width: 12,\n    height: 12,\n    borderRadius: '50%',\n    backgroundColor: 'currentColor'\n  },\n  completed: {\n    color: '#D37F65',\n    zIndex: 1,\n    fontSize: 18\n  }\n});\n\nfunction StepIcon(props) {\n  _s2();\n\n  const classes = useStepIconStyles();\n  const {\n    active,\n    completed\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: clsx(classes.root, {\n      [classes.active]: active\n    }),\n    children: completed ? /*#__PURE__*/_jsxDEV(Check, {\n      className: classes.completed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.circle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 68\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(StepIcon, \"0qRSEY3fD9fMcAZ3ibczG4IV00w=\", false, function () {\n  return [useStepIconStyles];\n});\n\n_c2 = StepIcon;\nStepIcon.propTypes = {\n  active: PropTypes.bool,\n  // Whether this step is active.\n  completed: PropTypes.bool // Mark the step as completed. Is passed to child components.\n\n};\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginTop: theme.spacing(5),\n    marginRight: theme.spacing(1)\n  }\n}));\nexport default PaymentStepper;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PaymentStepper\");\n$RefreshReg$(_c2, \"StepIcon\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/transactions/PaymentStepper.js"],"names":["React","useEffect","useState","makeStyles","withStyles","Stepper","Step","StepLabel","Button","StepConnector","Check","clsx","PropTypes","StepperInformation","useLoggedInUser","PaymentResultComponent","useDispatch","useSelector","changePet","createTransaction","getUser","NotificationService","STATUS_TYPE","SUCCESS","ERROR","PaymentStepper","pet","close","classes","useStyles","dispatch","paymentStatus","setPaymentStatus","transaction","state","petOwner","user","selectedUser","activeStep","setActiveStep","steps","loggedInUser","isFreeOfCharge","setIsFreeOfCharge","subscriptionPlan","price","ownerId","isButtonDisabled","amountToPay","fee","Math","min","max","generateId","floor","random","toString","transactionData","orderNr","senderId","_id","receiverId","id","createdAt","Date","senderResponse","receiverResponse","status","amount","processed","reminderSent","handleNext","length","onApprove","prevActiveStep","handleBack","notify","newPet","purchased","onError","getStepContent","stepIndex","root","map","label","index","stepProps","labelProps","StepIcon","button","AlternativeConnector","alternativeLabel","top","left","right","active","borderColor","completed","line","borderTopWidth","borderRadius","useStepIconStyles","color","display","height","alignItems","circle","width","backgroundColor","zIndex","fontSize","props","propTypes","bool","theme","marginTop","spacing","marginRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport { Check } from '@material-ui/icons';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport StepperInformation from './StepperInformation';\nimport { useLoggedInUser } from 'helper/hooks/auth.hooks';\nimport PaymentResultComponent from './PaymentResult';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changePet, createTransaction, getUser } from 'redux/actions';\nimport { NotificationService } from 'services';\n\nconst STATUS_TYPE = {\n    SUCCESS: 'success',\n    ERROR: 'error',\n};\n\nconst PaymentStepper = ({ pet, close }) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const [paymentStatus, setPaymentStatus] = useState('none');\n    const transaction = useSelector((state) => state.transaction.transaction);\n    const petOwner = useSelector((state) => state.user.selectedUser);\n\n    const [activeStep, setActiveStep] = useState(0);\n\n    const steps = ['Confirm general information', 'Confirm payment', 'Finish'];\n    const loggedInUser = useLoggedInUser();\n    const [isFreeOfCharge, setIsFreeOfCharge] = useState(false);\n\n    useEffect(() => {\n        if(loggedInUser) {\n            setIsFreeOfCharge(loggedInUser.subscriptionPlan === 'premium' && pet.price === 0) // premium user don't need to pay any fees for the free pet\n            dispatch(getUser(pet.ownerId));\n        }\n    }, [loggedInUser, pet.ownerId, pet.price, dispatch])\n\n \n    const isButtonDisabled = activeStep === 1 && !isFreeOfCharge;\n\n    // helper functions for the transaction generation\n    const amountToPay = () => {\n        if (loggedInUser.subscriptionPlan === 'free') {\n            let fee = Math.min(pet.price * 0.05, 20); // 5% of the pet price or maximum 20€ as fee\n            fee = Math.max(fee, 1); // min 1€\n            return pet.price + fee;\n        }\n        return pet.price;\n    };\n    // generate order number for new transactions\n    const generateId = () => Math.floor(Math.random() * 10000000000).toString(16);\n    const transactionData = {\n        orderNr: generateId(),\n        senderId: loggedInUser._id,\n        receiverId: pet.ownerId,\n        pet: pet.id,\n        createdAt: new Date(),\n        senderResponse: 'pending',\n        receiverResponse: 'pending',\n        status: 'pending',\n        amount: amountToPay(),\n        processed: false,\n        reminderSent: false,\n    };\n\n    // handle next step\n    const handleNext = () => {\n        if (activeStep === steps.length - 1) {\n            close();\n            setActiveStep(0);\n            return;\n        }\n        // skip payment and create transaction directly\n        if (isFreeOfCharge && activeStep === 1) {\n            onApprove();\n            return;\n        }\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    // go one step back\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    // main function for approval and transaction creation\n    const onApprove = async () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n\n        await dispatch(\n            createTransaction(\n                transactionData,\n                () => {\n                    NotificationService.notify('success', 'Transaction Created', 'Transaction was successfully created');\n                    setPaymentStatus(STATUS_TYPE.SUCCESS);\n\n                    // update pet status to purchased\n                    let newPet = { ...pet, purchased: true };\n                    dispatch(changePet(newPet));\n                },\n                () => {\n                    NotificationService.notify('error', 'Transaction Error', 'Error occurred during transaction creation');\n                    setPaymentStatus(STATUS_TYPE.ERROR);\n                }\n            )\n        );\n    };\n\n    // error handling\n    const onError = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        setPaymentStatus(STATUS_TYPE.ERROR);\n    };\n\n    const getStepContent = (stepIndex) => {\n        switch (stepIndex) {\n            case 0:\n                return <StepperInformation petOwner={petOwner} pet={pet} loggedInUser={loggedInUser} step={0} isFreeOfCharge={isFreeOfCharge} onApprove={onApprove} onError={onError} amount={amountToPay()} />;\n            case 1:\n                return <StepperInformation petOwner={petOwner} pet={pet} loggedInUser={loggedInUser} step={1} isFreeOfCharge={isFreeOfCharge} onApprove={onApprove} onError={onError} amount={amountToPay()} />;\n            case 2:\n                return <PaymentResultComponent status={paymentStatus} transaction={transaction} />;\n            default:\n                return 'Unknown stepIndex';\n        }\n    };\n\n    return (\n        <div className={classes.root}>\n            <Stepper alternativeLabel activeStep={activeStep} connector={<AlternativeConnector />}>\n                {steps.map((label, index) => {\n                    const stepProps = {};\n                    const labelProps = {};\n                    return (\n                        <Step key={label} {...stepProps}>\n                            <StepLabel StepIconComponent={StepIcon} {...labelProps}>\n                                {label}\n                            </StepLabel>\n                        </Step>\n                    );\n                })}\n            </Stepper>\n            <div>\n                {activeStep === steps.length ? null : (\n                    <div>\n                        {getStepContent(activeStep)}\n                        <div>\n                            <Button disabled={activeStep === 0 || activeStep === 2} onClick={handleBack} className={classes.button}>\n                                Back\n                            </Button>\n                            <Button disabled={isButtonDisabled} variant=\"contained\" color=\"primary\" onClick={handleNext} className={classes.button}>\n                                {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                            </Button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\n/**\n * This function are used for the alternative styling of the stepper.\n */\nconst AlternativeConnector = withStyles({\n    alternativeLabel: {\n        top: 10,\n        left: 'calc(-50% + 16px)',\n        right: 'calc(50% + 16px)',\n    },\n    active: {\n        '& $line': {\n            borderColor: '#D37F65',\n        },\n    },\n    completed: {\n        '& $line': {\n            borderColor: '#D37F65',\n        },\n    },\n    line: {\n        borderColor: '#eaeaf0',\n        borderTopWidth: 2,\n        borderRadius: 1,\n    },\n})(StepConnector);\n\nconst useStepIconStyles = makeStyles({\n    root: {\n        color: '#eaeaf0',\n        display: 'flex',\n        height: 22,\n        alignItems: 'center',\n    },\n    active: {\n        color: '#D37F65',\n    },\n    circle: {\n        width: 12,\n        height: 12,\n        borderRadius: '50%',\n        backgroundColor: 'currentColor',\n    },\n    completed: {\n        color: '#D37F65',\n        zIndex: 1,\n        fontSize: 18,\n    },\n});\n\nfunction StepIcon(props) {\n    const classes = useStepIconStyles();\n    const { active, completed } = props;\n\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active,\n            })}\n        >\n            {completed ? <Check className={classes.completed} /> : <div className={classes.circle} />}\n        </div>\n    );\n}\n\nStepIcon.propTypes = {\n    active: PropTypes.bool, // Whether this step is active.\n    completed: PropTypes.bool, // Mark the step as completed. Is passed to child components.\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginTop: theme.spacing(5),\n        marginRight: theme.spacing(1),\n    },\n}));\n\nexport default PaymentStepper;\n"]},"metadata":{},"sourceType":"module"}