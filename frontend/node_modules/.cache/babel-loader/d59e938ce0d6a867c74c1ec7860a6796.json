{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/upload/documents.upload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { sha256 } from 'js-sha256';\nimport { Button } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { usePet } from 'helper/hooks/pets.hooks';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { updateSelectedPet } from 'redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst prepareDocumentsFileList = pet => {\n  let petList = [];\n  pet.documents.forEach((value, index) => {\n    petList.push({\n      uid: index,\n      name: value.name,\n      status: 'done',\n      url: value.url\n    });\n  });\n  return petList;\n};\n\nconst prepareCompetitionsFileList = pet => {\n  let petList = [];\n  pet.competitions.forEach((value, index) => {\n    if (value.certificate !== undefined) {\n      petList.push({\n        uid: index,\n        name: value.certificate.name,\n        status: 'done',\n        url: value.certificate.url\n      });\n    }\n  });\n  return petList;\n};\n/**\n *\n * @param  props\n * @returns Component to upload pet documents or certificates\n */\n\n\nconst DocumentsUpload = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    mode\n  } = props; // get global states\n\n  const user = useUser();\n  const pet = usePet();\n  const isCompetition = props.type === 'competitions' || false;\n  const [fileList, setFileList] = useState(mode === 'add' ? [] : isCompetition ? prepareCompetitionsFileList(pet) : prepareDocumentsFileList(pet));\n  const keyFolder = isCompetition ? 'competitions' : 'documents';\n  const pathPrefix = `users/${user.id}/pets/documents`;\n  let key = isCompetition && props.competitionId;\n  let maxFileNumber = props.maxFiles || 8; // update file list\n\n  const handleChange = ({\n    fileList\n  }) => setFileList(fileList); // upload image\n\n\n  const customUpload = async data => {\n    const docName = sha256(data.file.name); //a unique name for the image\n\n    /** Firebase storage structure\n     * -| users\n     *   -| userId\n     *     -| pets\n     *      -| documents\n     */\n\n    const imgPath = `${pathPrefix}/${docName}`;\n    const newData = {\n      name: data.file.name,\n      type: data.file.type,\n      path: imgPath,\n      url: undefined,\n      uploadDate: new Date(),\n      verified: false,\n      data: data,\n      status: 'upload'\n    };\n    let petData = pet;\n\n    if (isCompetition) {\n      let competitionData = [...pet.competitions];\n      competitionData.map((item, index) => {\n        if (index === key) {\n          item.certificate = newData;\n          return item;\n        }\n\n        return item;\n      });\n      petData.competitions = competitionData;\n      dispatch(updateSelectedPet(petData));\n    } else {\n      let docs = [...pet.documents, newData];\n      petData.documents = docs;\n      dispatch(updateSelectedPet(petData));\n    }\n\n    data.onSuccess(null);\n  }; // remove document\n\n\n  const handleRemove = async file => {\n    let petData = pet; // remove competition\n\n    if (isCompetition) {\n      let competitionData = [...pet.competitions];\n      competitionData.map((item, index) => {\n        if (index === key) {\n          item.certificate = {};\n          return item;\n        }\n\n        return item;\n      });\n      petData.competitions = competitionData;\n      dispatch(updateSelectedPet(petData)); // remove document\n    } else {\n      let petData = pet;\n      let docData = [...pet.documents];\n\n      if (file.url) {\n        // set status delete to remove it later onSave from firebase\n        docData.map(value => value.name === file.name ? value.status = 'delete' : value);\n        petData.documents = docData;\n        dispatch(updateSelectedPet(petData));\n      } else {\n        let docObj = docData.filter(value => value.name !== file.name);\n        petData.documents = docObj;\n        dispatch(updateSelectedPet(petData));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Upload, {\n      listType: \"text\",\n      fileList: fileList,\n      onChange: handleChange,\n      customRequest: customUpload,\n      onRemove: handleRemove,\n      children: fileList.length >= maxFileNumber ? null : /*#__PURE__*/_jsxDEV(Button, {\n        size: props.size || 'medium',\n        variant: \"contained\",\n        color: \"secondary\",\n        startIcon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 108\n        }, this),\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DocumentsUpload, \"77zvX/s6Sddcft6FTa4GqPoBof8=\", false, function () {\n  return [useDispatch, useUser, usePet];\n});\n\n_c = DocumentsUpload;\nexport default DocumentsUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"DocumentsUpload\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/upload/documents.upload.js"],"names":["React","useState","Upload","UploadOutlined","sha256","Button","useDispatch","usePet","useUser","updateSelectedPet","prepareDocumentsFileList","pet","petList","documents","forEach","value","index","push","uid","name","status","url","prepareCompetitionsFileList","competitions","certificate","undefined","DocumentsUpload","props","dispatch","mode","user","isCompetition","type","fileList","setFileList","keyFolder","pathPrefix","id","key","competitionId","maxFileNumber","maxFiles","handleChange","customUpload","data","docName","file","imgPath","newData","path","uploadDate","Date","verified","petData","competitionData","map","item","docs","onSuccess","handleRemove","docData","docObj","filter","length","size"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Upload } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { sha256 } from 'js-sha256';\nimport { Button } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { usePet } from 'helper/hooks/pets.hooks';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport { updateSelectedPet } from 'redux/actions';\n\n\nconst prepareDocumentsFileList = (pet) => {\n    let petList = [];\n    pet.documents.forEach((value, index) => {\n        petList.push({\n            uid: index,\n            name: value.name,\n            status: 'done',\n            url: value.url,\n        });\n    });\n    return petList;\n};\n\nconst prepareCompetitionsFileList = (pet) => {\n    let petList = [];\n    pet.competitions.forEach((value, index) => {\n        if(value.certificate !== undefined) {\n            petList.push({\n                uid: index,\n                name: value.certificate.name,\n                status: 'done',\n                url: value.certificate.url,\n            });\n        }\n    });\n    return petList;\n};\n\n/**\n *\n * @param  props\n * @returns Component to upload pet documents or certificates\n */\n\nconst DocumentsUpload = (props) => {\n    const dispatch = useDispatch();\n    const { mode } = props;\n\n    // get global states\n    const user = useUser();\n    const pet = usePet();\n    \n    const isCompetition = props.type === 'competitions' || false;\n\n    const [fileList, setFileList] = useState(mode === 'add' ? [] : isCompetition ? prepareCompetitionsFileList(pet) : prepareDocumentsFileList(pet));\n\n    const keyFolder = isCompetition ? 'competitions' : 'documents';\n    const pathPrefix = `users/${user.id}/pets/documents`;\n    let key = isCompetition && props.competitionId;\n    let maxFileNumber = props.maxFiles || 8;\n\n    // update file list\n    const handleChange = ({ fileList }) => setFileList(fileList);\n\n    // upload image\n    const customUpload = async (data) => {\n        const docName = sha256(data.file.name); //a unique name for the image\n\n        /** Firebase storage structure\n         * -| users\n         *   -| userId\n         *     -| pets\n         *      -| documents\n         */\n        const imgPath = `${pathPrefix}/${docName}`;\n\n        const newData = {\n            name: data.file.name,\n            type: data.file.type,\n            path: imgPath,\n            url: undefined,\n            uploadDate: new Date(),\n            verified: false,\n            data: data,\n            status: 'upload',\n        };\n\n        let petData = pet;\n\n        if (isCompetition) {\n            let competitionData = [...pet.competitions];\n            competitionData.map((item, index) => {\n                if (index === key) {\n                    item.certificate = newData;\n                    return item;\n                }\n                return item;\n            });\n            petData.competitions = competitionData\n            dispatch(updateSelectedPet(petData));\n        } else {\n            let docs = [...pet.documents, newData];\n            petData.documents = docs\n            dispatch(updateSelectedPet(petData));\n        }\n\n        data.onSuccess(null);\n    };\n\n    // remove document\n    const handleRemove = async (file) => {\n        let petData = pet;\n        // remove competition\n        if (isCompetition) {\n            let competitionData = [...pet.competitions];\n            competitionData.map((item, index) => {\n                if (index === key) {\n                    item.certificate = {};\n                    return item;\n                }\n                return item;\n            });\n\n            petData.competitions = competitionData\n            dispatch(updateSelectedPet(petData));\n            // remove document\n        } else {\n            let petData = pet;\n            let docData = [...pet.documents];\n\n            if (file.url) {\n                // set status delete to remove it later onSave from firebase\n                docData.map((value) => (value.name === file.name ? (value.status = 'delete') : value));\n                petData.documents = docData;\n                dispatch(updateSelectedPet(petData));\n            } else {\n                let docObj = docData.filter((value) => value.name !== file.name);\n                petData.documents = docObj\n                dispatch(updateSelectedPet(petData));\n            }\n        }\n    };\n\n    return (\n        <div>\n            <Upload listType=\"text\" fileList={fileList} onChange={handleChange} customRequest={customUpload} onRemove={handleRemove}>\n                {fileList.length >= maxFileNumber ? null : (\n                    <Button size={props.size || 'medium'} variant=\"contained\" color=\"secondary\" startIcon={<UploadOutlined />}>\n                        Upload\n                    </Button>\n                )}\n            </Upload>\n        </div>\n    );\n};\n\nexport default DocumentsUpload;\n"]},"metadata":{},"sourceType":"module"}