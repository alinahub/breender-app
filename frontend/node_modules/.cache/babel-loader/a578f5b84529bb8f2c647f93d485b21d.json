{"ast":null,"code":"import UserService from '../../services/UserService';\nexport function login(username, password) {\n  function onSuccess(user) {\n    return {\n      type: 'LOGIN_SUCCESS',\n      user: user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'LOGIN_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.login(username, password);\n      dispatch(onSuccess(resp.user));\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport function confirmEmail(email, token) {\n  function onSuccess(confirmation) {\n    return {\n      type: 'CONFIRM_EMAIL_SUCCESS',\n      confirmation: confirmation\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'CONFIRM_EMAIL_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.confirmEmail(email, token);\n      dispatch(onSuccess(resp));\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}\nexport function logout() {\n  UserService.logout();\n  return {\n    type: 'LOGOUT'\n  };\n}\nexport function loginReset() {\n  return {\n    type: 'LOGIN_RESET'\n  };\n}\nexport function register(email, username, password, city, isAdmin) {\n  function onSuccess(user) {\n    return {\n      type: 'LOGIN_SUCCESS',\n      user: user\n    };\n  }\n\n  function onFailure(error) {\n    return {\n      type: 'LOGIN_FAILURE',\n      error: error\n    };\n  }\n\n  return async dispatch => {\n    try {\n      let resp = await UserService.register(email, username, password, city, isAdmin);\n      dispatch(onSuccess(resp.user));\n    } catch (e) {\n      dispatch(onFailure(e));\n    }\n  };\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/userActions.js"],"names":["UserService","login","username","password","onSuccess","user","type","onFailure","error","dispatch","resp","e","confirmEmail","email","token","confirmation","logout","loginReset","register","city","isAdmin"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,4BAAxB;AAEA,OAAO,SAASC,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmC;AACtC,WAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,WAAO;AAAEC,MAAAA,IAAI,EAAE,eAAR;AAAyBD,MAAAA,IAAI,EAAEA;AAA/B,KAAP;AACH;;AACD,WAASE,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,WAAO;AAAEF,MAAAA,IAAI,EAAE,eAAR;AAAyBE,MAAAA,KAAK,EAAEA;AAAhC,KAAP;AACH;;AAED,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,UAAIC,IAAI,GAAG,MAAMV,WAAW,CAACC,KAAZ,CAAkBC,QAAlB,EAA4BC,QAA5B,CAAjB;AACAM,MAAAA,QAAQ,CAACL,SAAS,CAACM,IAAI,CAACL,IAAN,CAAV,CAAR;AACH,KAHD,CAGE,OAAOM,CAAP,EAAU;AACRF,MAAAA,QAAQ,CAACF,SAAS,CAACI,CAAD,CAAV,CAAR;AACH;AACJ,GAPD;AAQH;AAED,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;AACvC,WAASV,SAAT,CAAmBW,YAAnB,EAAiC;AAC7B,WAAO;AAAET,MAAAA,IAAI,EAAE,uBAAR;AAAiCS,MAAAA,YAAY,EAAEA;AAA/C,KAAP;AACH;;AACD,WAASR,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,WAAO;AAAEF,MAAAA,IAAI,EAAE,uBAAR;AAAiCE,MAAAA,KAAK,EAAEA;AAAxC,KAAP;AACH;;AAED,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,UAAIC,IAAI,GAAG,MAAMV,WAAW,CAACY,YAAZ,CAAyBC,KAAzB,EAAgCC,KAAhC,CAAjB;AACAL,MAAAA,QAAQ,CAACL,SAAS,CAACM,IAAD,CAAV,CAAR;AACH,KAHD,CAGE,OAAOC,CAAP,EAAU;AACRF,MAAAA,QAAQ,CAACF,SAAS,CAACI,CAAD,CAAV,CAAR;AACH;AACJ,GAPD;AAQH;AAED,OAAO,SAASK,MAAT,GAAkB;AACrBhB,EAAAA,WAAW,CAACgB,MAAZ;AACA,SAAO;AAAEV,IAAAA,IAAI,EAAE;AAAR,GAAP;AACH;AAED,OAAO,SAASW,UAAT,GAAsB;AACzB,SAAO;AAAEX,IAAAA,IAAI,EAAE;AAAR,GAAP;AACH;AAED,OAAO,SAASY,QAAT,CAAkBL,KAAlB,EAAyBX,QAAzB,EAAmCC,QAAnC,EAA6CgB,IAA7C,EAAmDC,OAAnD,EAA4D;AAC/D,WAAShB,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,WAAO;AAAEC,MAAAA,IAAI,EAAE,eAAR;AAAyBD,MAAAA,IAAI,EAAEA;AAA/B,KAAP;AACH;;AACD,WAASE,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,WAAO;AAAEF,MAAAA,IAAI,EAAE,eAAR;AAAyBE,MAAAA,KAAK,EAAEA;AAAhC,KAAP;AACH;;AAED,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAI;AACA,UAAIC,IAAI,GAAG,MAAMV,WAAW,CAACkB,QAAZ,CAAqBL,KAArB,EAA4BX,QAA5B,EAAsCC,QAAtC,EAAgDgB,IAAhD,EAAsDC,OAAtD,CAAjB;AACAX,MAAAA,QAAQ,CAACL,SAAS,CAACM,IAAI,CAACL,IAAN,CAAV,CAAR;AACH,KAHD,CAGE,OAAOM,CAAP,EAAU;AACRF,MAAAA,QAAQ,CAACF,SAAS,CAACI,CAAD,CAAV,CAAR;AACH;AACJ,GAPD;AAQH","sourcesContent":["import UserService from '../../services/UserService';\n\nexport function login(username, password) {\n    function onSuccess(user) {\n        return { type: 'LOGIN_SUCCESS', user: user };\n    }\n    function onFailure(error) {\n        return { type: 'LOGIN_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.login(username, password);\n            dispatch(onSuccess(resp.user));\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport function confirmEmail(email, token) {\n    function onSuccess(confirmation) {\n        return { type: 'CONFIRM_EMAIL_SUCCESS', confirmation: confirmation };\n    }\n    function onFailure(error) {\n        return { type: 'CONFIRM_EMAIL_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.confirmEmail(email, token);\n            dispatch(onSuccess(resp));\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n\nexport function logout() {\n    UserService.logout();\n    return { type: 'LOGOUT' };\n}\n\nexport function loginReset() {\n    return { type: 'LOGIN_RESET' };\n}\n\nexport function register(email, username, password, city, isAdmin) {\n    function onSuccess(user) {\n        return { type: 'LOGIN_SUCCESS', user: user };\n    }\n    function onFailure(error) {\n        return { type: 'LOGIN_FAILURE', error: error };\n    }\n\n    return async (dispatch) => {\n        try {\n            let resp = await UserService.register(email, username, password, city, isAdmin);\n            dispatch(onSuccess(resp.user));\n        } catch (e) {\n            dispatch(onFailure(e));\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}