{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/views/SignUpView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect, useSelector } from 'react-redux';\nimport { register, resetError } from '../redux/actions';\nimport NotificationService from 'services/NotificationService';\nimport SignUpComponent from 'components/SignUpComponent';\n/**\n * For register new users\n * @param {props} props\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SignUpView(props) {\n  _s();\n\n  const user = useSelector(state => state.user);\n  useEffect(() => {\n    if (user.user) {\n      NotificationService.notify('success', 'Success', 'Account was successfully created! Please check your inbox for verification link.');\n      props.history.push('/');\n    }\n\n    if (user.error) {\n      setTimeout(function () {\n        NotificationService.notify('error', 'Error', 'An error occured while creating an account. Please try again later.');\n      }, 2000); //delay function to get fresh error\n    } //reset errors when functional component unmounts\n\n\n    return () => {\n      props.dispatch(resetError());\n    };\n  }, [user, props.history]);\n\n  const onRegister = (email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) => {\n    props.dispatch(register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod));\n  };\n\n  const onCancel = () => {\n    props.history.push(\"/\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(SignUpComponent, {\n    user: user,\n    onRegister: onRegister,\n    onCancel: onCancel\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SignUpView, \"w5+LAD8lLDhLgasoS8hF5Z9czWg=\", false, function () {\n  return [useSelector];\n});\n\n_c = SignUpView;\nexport default connect()(withRouter(SignUpView));\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpView\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/views/SignUpView.js"],"names":["React","useEffect","withRouter","connect","useSelector","register","resetError","NotificationService","SignUpComponent","SignUpView","props","user","state","notify","history","push","error","setTimeout","dispatch","onRegister","email","username","password","city","province","isAdmin","subscriptionPlan","paymentPlan","paymentMethod","onCancel"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,kBAArC;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AAEA;AACA;AACA;AACA;;;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACvB,QAAMC,IAAI,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,IAAI,CAACA,IAAT,EAAe;AACXJ,MAAAA,mBAAmB,CAACM,MAApB,CAA2B,SAA3B,EAAsC,SAAtC,EAAiD,kFAAjD;AACAH,MAAAA,KAAK,CAACI,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACH;;AACD,QAAIJ,IAAI,CAACK,KAAT,EAAgB;AACZC,MAAAA,UAAU,CAAC,YAAW;AAAGV,QAAAA,mBAAmB,CAACM,MAApB,CAA2B,OAA3B,EAAoC,OAApC,EAA6C,qEAA7C;AAAsH,OAArI,EAAuI,IAAvI,CAAV,CADY,CAC4I;AAC3J,KAPW,CAQZ;;;AACA,WAAO,MAAM;AACTH,MAAAA,KAAK,CAACQ,QAAN,CAAeZ,UAAU,EAAzB;AACH,KAFD;AAGH,GAZQ,EAYN,CAACK,IAAD,EAAOD,KAAK,CAACI,OAAb,CAZM,CAAT;;AAcA,QAAMK,UAAU,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,EAA4BC,IAA5B,EAAkCC,QAAlC,EAA4CC,OAA5C,EAAqDC,gBAArD,EAAuEC,WAAvE,EAAoFC,aAApF,KAAsG;AACrHlB,IAAAA,KAAK,CAACQ,QAAN,CAAeb,QAAQ,CAACe,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,EAA4BC,IAA5B,EAAkCC,QAAlC,EAA4CC,OAA5C,EAAqDC,gBAArD,EAAuEC,WAAvE,EAAoFC,aAApF,CAAvB;AACH,GAFD;;AAIA,QAAMC,QAAQ,GAAG,MAAM;AACnBnB,IAAAA,KAAK,CAACI,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACH,GAFD;;AAIA,sBACI,QAAC,eAAD;AACI,IAAA,IAAI,EAAEJ,IADV;AAEI,IAAA,UAAU,EAAEQ,UAFhB;AAGI,IAAA,QAAQ,EAAEU;AAHd;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAhCQpB,U;UACQL,W;;;KADRK,U;AAkCT,eAAeN,OAAO,GAAGD,UAAU,CAACO,UAAD,CAAb,CAAtB","sourcesContent":["import React, { useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect, useSelector } from 'react-redux';\nimport { register, resetError } from '../redux/actions';\nimport NotificationService from 'services/NotificationService';\nimport SignUpComponent from 'components/SignUpComponent';\n\n/**\n * For register new users\n * @param {props} props\n */\nfunction SignUpView(props) {\n    const user = useSelector((state) => state.user);\n\n    useEffect(() => {\n        if (user.user) {\n            NotificationService.notify('success', 'Success', 'Account was successfully created! Please check your inbox for verification link.');\n            props.history.push('/');\n        }\n        if (user.error) {\n            setTimeout(function() {  NotificationService.notify('error', 'Error', 'An error occured while creating an account. Please try again later.'); }, 2000); //delay function to get fresh error\n        }\n        //reset errors when functional component unmounts\n        return () => {\n            props.dispatch(resetError());\n        }\n    }, [user, props.history]);\n\n    const onRegister = (email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod) => {\n        props.dispatch(register(email, username, password, city, province, isAdmin, subscriptionPlan, paymentPlan, paymentMethod));\n    };\n\n    const onCancel = () => {\n        props.history.push(\"/\");\n    };\n\n    return (\n        <SignUpComponent\n            user={user}\n            onRegister={onRegister}\n            onCancel={onCancel}\n        />\n    );\n}\n\nexport default connect()(withRouter(SignUpView));\n"]},"metadata":{},"sourceType":"module"}