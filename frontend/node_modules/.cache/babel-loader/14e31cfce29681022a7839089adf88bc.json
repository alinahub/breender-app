{"ast":null,"code":"import DocumentService from 'services/DocumentService';\nexport function verifyDocument(docId, docType, ownerId, officialName) {\n  // when the backend call was successfull and the was verified\n  function onSuccess() {\n    return {\n      type: 'VERIFY_DOCUMENT_SUCCESS'\n    };\n  } // when the backend call was failed\n\n\n  function onFailure(error) {\n    // error handling\n    console.log('failed to verify document', error);\n  }\n\n  return async dispatch => {\n    try {\n      // verify doc in the backend\n      await DocumentService.verifyDocument(docId, docType, ownerId, officialName); // call onSuccess in context of redux\n\n      dispatch(onSuccess());\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}\nexport function declineDocument(docId, docType, ownerId, officialName) {\n  // when the backend call was successfull and the document was declined\n  function onSuccess() {\n    return {\n      type: 'DECLINE_DOCUMENT_SUCCESS'\n    };\n  } // when the backend call was failed\n\n\n  function onFailure(error) {\n    // error handling\n    console.log('failed to decline document', error);\n  }\n\n  return async dispatch => {\n    try {\n      // decline doc in the backend\n      await DocumentService.declineDocument(docId, docType, ownerId, officialName); // call onSuccess in context of redux\n\n      dispatch(onSuccess());\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}\nexport function getDocuments() {\n  // when the backend call was successfull and unprocessed docs are retrieved\n  // in the dispatcher unprocessed docs will be added to the global state\n  function onSuccess(documents) {\n    return {\n      type: 'GET_DOCUMENTS_SUCCESS',\n      documents: documents\n    };\n  } // when the backend call was failed\n\n\n  function onFailure(error) {\n    // error handling\n    console.log('failed to get the documents', error);\n  }\n\n  return async dispatch => {\n    try {\n      // ask for the docs in the backend\n      let documents = await DocumentService.getDocuments(); // call onSuccess in context of redux\n\n      dispatch(onSuccess(documents));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}\nexport function getDeclinedDocuments() {\n  // when the backend call was successfull and the declined docs sare retrieved\n  // in the dispatcher the declined docs will be added to the global state\n  function onSuccess(documents) {\n    return {\n      type: 'GET_PROCESSED_DOCUMENTS_SUCCESS',\n      documents: documents\n    };\n  } // when the backend call was failed\n\n\n  function onFailure(error) {\n    // error handling\n    console.log('failed to get processed documents', error);\n  }\n\n  return async dispatch => {\n    try {\n      // ask for the docs in the backend\n      let documents = await DocumentService.getProcessedDocuments('declined'); // call onSuccess in context of redux\n\n      dispatch(onSuccess(documents));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}\nexport function getVerifiedDocuments() {\n  // when the backend call was successfull and the verified docs are retrieved\n  // in the dispatcher the verified docs will be added to the global state\n  function onSuccess(documents) {\n    return {\n      type: 'GET_PROCESSED_DOCUMENTS_SUCCESS',\n      documents: documents\n    };\n  } // when the backend call was failed\n\n\n  function onFailure(error) {\n    // error handling\n    console.log('failed to get processed documents', error);\n  }\n\n  return async dispatch => {\n    try {\n      // ask for the docsmin the backend\n      let documents = await DocumentService.getProcessedDocuments('verified'); // call onSuccess in context of redux\n\n      dispatch(onSuccess(documents));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/documentActions.js"],"names":["DocumentService","verifyDocument","docId","docType","ownerId","officialName","onSuccess","type","onFailure","error","console","log","dispatch","e","declineDocument","getDocuments","documents","getDeclinedDocuments","getProcessedDocuments","getVerifiedDocuments"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,0BAA5B;AACA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,OAA/B,EAAwCC,OAAxC,EAAiDC,YAAjD,EAA+D;AAClE;AACA,WAASC,SAAT,GAAqB;AACjB,WAAO;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAP;AACH,GAJiE,CAKlE;;;AACA,WAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,KAAzC;AACH;;AAED,SAAO,MAAOG,QAAP,IAAoB;AACvB,QAAI;AACA;AACA,YAAMZ,eAAe,CAACC,cAAhB,CAA+BC,KAA/B,EAAsCC,OAAtC,EAA+CC,OAA/C,EAAwDC,YAAxD,CAAN,CAFA,CAGA;;AACAO,MAAAA,QAAQ,CAACN,SAAS,EAAV,CAAR;AACH,KALD,CAKE,OAAOO,CAAP,EAAU;AACRL,MAAAA,SAAS,CAACK,CAAD,CAAT;AACH;AACJ,GATD;AAUH;AAED,OAAO,SAASC,eAAT,CAAyBZ,KAAzB,EAAgCC,OAAhC,EAAyCC,OAAzC,EAAkDC,YAAlD,EAAgE;AACnE;AACA,WAASC,SAAT,GAAqB;AACjB,WAAO;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAP;AACH,GAJkE,CAKnE;;;AACA,WAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,KAA1C;AACH;;AAED,SAAO,MAAOG,QAAP,IAAoB;AACvB,QAAI;AACA;AACA,YAAMZ,eAAe,CAACc,eAAhB,CAAgCZ,KAAhC,EAAuCC,OAAvC,EAAgDC,OAAhD,EAAyDC,YAAzD,CAAN,CAFA,CAGA;;AACAO,MAAAA,QAAQ,CAACN,SAAS,EAAV,CAAR;AACH,KALD,CAKE,OAAOO,CAAP,EAAU;AACRL,MAAAA,SAAS,CAACK,CAAD,CAAT;AACH;AACJ,GATD;AAUH;AAED,OAAO,SAASE,YAAT,GAAwB;AAC3B;AACA;AACA,WAAST,SAAT,CAAmBU,SAAnB,EAA8B;AAC1B,WAAO;AAAET,MAAAA,IAAI,EAAE,uBAAR;AAAiCS,MAAAA,SAAS,EAAEA;AAA5C,KAAP;AACH,GAL0B,CAM3B;;;AACA,WAASR,SAAT,CAAmBC,KAAnB,EAA0B;AACtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CF,KAA3C;AACH;;AAED,SAAO,MAAOG,QAAP,IAAoB;AACvB,QAAI;AACA;AACA,UAAII,SAAS,GAAG,MAAMhB,eAAe,CAACe,YAAhB,EAAtB,CAFA,CAGA;;AACAH,MAAAA,QAAQ,CAACN,SAAS,CAACU,SAAD,CAAV,CAAR;AACH,KALD,CAKE,OAAOH,CAAP,EAAU;AACRL,MAAAA,SAAS,CAACK,CAAD,CAAT;AACH;AACJ,GATD;AAUH;AAED,OAAO,SAASI,oBAAT,GAAgC;AACnC;AACA;AACA,WAASX,SAAT,CAAmBU,SAAnB,EAA8B;AAC1B,WAAO;AAAET,MAAAA,IAAI,EAAE,iCAAR;AAA2CS,MAAAA,SAAS,EAAEA;AAAtD,KAAP;AACH,GALkC,CAMnC;;;AACA,WAASR,SAAT,CAAmBC,KAAnB,EAA0B;AACtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDF,KAAjD;AACH;;AAED,SAAO,MAAOG,QAAP,IAAoB;AACvB,QAAI;AACA;AACA,UAAII,SAAS,GAAG,MAAMhB,eAAe,CAACkB,qBAAhB,CAAsC,UAAtC,CAAtB,CAFA,CAGA;;AACAN,MAAAA,QAAQ,CAACN,SAAS,CAACU,SAAD,CAAV,CAAR;AACH,KALD,CAKE,OAAOH,CAAP,EAAU;AACRL,MAAAA,SAAS,CAACK,CAAD,CAAT;AACH;AACJ,GATD;AAUH;AAGD,OAAO,SAASM,oBAAT,GAAgC;AACnC;AACA;AACA,WAASb,SAAT,CAAmBU,SAAnB,EAA8B;AAC1B,WAAO;AAAET,MAAAA,IAAI,EAAE,iCAAR;AAA2CS,MAAAA,SAAS,EAAEA;AAAtD,KAAP;AACH,GALkC,CAMnC;;;AACA,WAASR,SAAT,CAAmBC,KAAnB,EAA0B;AACtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDF,KAAjD;AACH;;AAED,SAAO,MAAOG,QAAP,IAAoB;AACvB,QAAI;AACA;AACA,UAAII,SAAS,GAAG,MAAMhB,eAAe,CAACkB,qBAAhB,CAAsC,UAAtC,CAAtB,CAFA,CAGA;;AACAN,MAAAA,QAAQ,CAACN,SAAS,CAACU,SAAD,CAAV,CAAR;AACH,KALD,CAKE,OAAOH,CAAP,EAAU;AACRL,MAAAA,SAAS,CAACK,CAAD,CAAT;AACH;AACJ,GATD;AAUH","sourcesContent":["import DocumentService from 'services/DocumentService';\nexport function verifyDocument(docId, docType, ownerId, officialName) {\n    // when the backend call was successfull and the was verified\n    function onSuccess() {\n        return { type: 'VERIFY_DOCUMENT_SUCCESS' };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to verify document', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // verify doc in the backend\n            await DocumentService.verifyDocument(docId, docType, ownerId, officialName);\n            // call onSuccess in context of redux\n            dispatch(onSuccess());\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\nexport function declineDocument(docId, docType, ownerId, officialName) {\n    // when the backend call was successfull and the document was declined\n    function onSuccess() {\n        return { type: 'DECLINE_DOCUMENT_SUCCESS' };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to decline document', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // decline doc in the backend\n            await DocumentService.declineDocument(docId, docType, ownerId, officialName);\n            // call onSuccess in context of redux\n            dispatch(onSuccess());\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\nexport function getDocuments() {\n    // when the backend call was successfull and unprocessed docs are retrieved\n    // in the dispatcher unprocessed docs will be added to the global state\n    function onSuccess(documents) {\n        return { type: 'GET_DOCUMENTS_SUCCESS', documents: documents };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to get the documents', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // ask for the docs in the backend\n            let documents = await DocumentService.getDocuments();\n            // call onSuccess in context of redux\n            dispatch(onSuccess(documents));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\nexport function getDeclinedDocuments() {\n    // when the backend call was successfull and the declined docs sare retrieved\n    // in the dispatcher the declined docs will be added to the global state\n    function onSuccess(documents) {\n        return { type: 'GET_PROCESSED_DOCUMENTS_SUCCESS', documents: documents };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to get processed documents', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // ask for the docs in the backend\n            let documents = await DocumentService.getProcessedDocuments('declined');\n            // call onSuccess in context of redux\n            dispatch(onSuccess(documents));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\n\nexport function getVerifiedDocuments() {\n    // when the backend call was successfull and the verified docs are retrieved\n    // in the dispatcher the verified docs will be added to the global state\n    function onSuccess(documents) {\n        return { type: 'GET_PROCESSED_DOCUMENTS_SUCCESS', documents: documents };\n    }\n    // when the backend call was failed\n    function onFailure(error) {\n        // error handling\n        console.log('failed to get processed documents', error);\n    }\n\n    return async (dispatch) => {\n        try {\n            // ask for the docsmin the backend\n            let documents = await DocumentService.getProcessedDocuments('verified');\n            // call onSuccess in context of redux\n            dispatch(onSuccess(documents));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n}\n\n\n"]},"metadata":{},"sourceType":"module"}