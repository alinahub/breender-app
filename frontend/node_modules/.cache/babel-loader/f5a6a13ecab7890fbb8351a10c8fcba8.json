{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/views/EditPetView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PetInformationForm, PetPhotosForm } from 'components/forms';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { usePet, useProfilePicture } from 'helper/hooks/pets.hooks';\nimport { changePet, clearPetInfos, getPet, updateProfilePicture, updateSelectedPet } from 'redux/actions';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport Loading from 'components/Loading';\nimport { NotificationService, FirebaseService } from 'services';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditPetView = props => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n  const id = location.pathname.split('/edit/pet/')[1];\n  const pet = usePet();\n  const user = useUser();\n  useEffect(() => {\n    // remove old profile picture\n    dispatch(updateProfilePicture({}));\n\n    if (pet.officialName) {\n      setLoading(false);\n    } else {\n      const fetchPet = () => {\n        dispatch(getPet(id));\n        setLoading(false);\n      };\n\n      fetchPet();\n    }\n  }, [dispatch, id, pet.officialName]);\n  const [loading, setLoading] = useState(true);\n  const [formIsDisabled, setFormIsDisabled] = useState(false);\n  const [name, setName] = useState(pet.officialName);\n  const [nickname, setNickname] = useState(pet.nickname);\n  const [sex, setSex] = useState(pet.sex);\n  const [birthDate, setBirthDate] = useState(new Date(pet.birthDate));\n  const [species, setSpecies] = useState(pet.species);\n  const [breed, setBreed] = useState(pet.breed);\n  const [price, setPrice] = useState(pet.price);\n\n  const isEmpty = str => str === '' || str === undefined;\n\n  useEffect(() => {\n    const disabled = isEmpty(name) || isEmpty(sex) || isEmpty(species) || isEmpty(breed);\n    setFormIsDisabled(disabled);\n  }, [name, sex, breed, species]);\n  useEffect(() => {\n    if (pet.ownerId !== user.id) {\n      history.goBack();\n      NotificationService.notify('error', 'Navigation Error', 'This information is restricted');\n    }\n  }, [pet.ownerId, user.id, history]); // get old profile picture to delete it later if it was updated\n\n  const oldProfilePicture = useProfilePicture();\n\n  const uploadCompetitions = async () => {\n    const competitionsData = [...pet.competitions];\n\n    for (let index = 0; index < competitionsData.length; index++) {\n      let value = competitionsData[index];\n\n      if (value.certificate) {\n        if (value.certificate.status === 'upload') {\n          const metadata = {\n            contentType: value.certificate.type\n          };\n          let url = await FirebaseService.upload(value.certificate.path, value.certificate.data, metadata);\n          competitionsData[index].certificate.url = url;\n        } else if (value.certificate.status === 'delete') {\n          await FirebaseService.remove(value.certificate.path);\n        }\n      }\n    }\n\n    let petData = pet;\n    petData.competitions = competitionsData.filter(value => value.certificate.status !== 'delete');\n    await dispatch(updateSelectedPet(petData));\n  };\n\n  const uploadDocuments = async () => {\n    const documentsData = [...pet.documents];\n\n    for (let index = 0; index < documentsData.length; index++) {\n      let value = documentsData[index];\n\n      if (value.status === 'upload') {\n        const metadata = {\n          contentType: value.type\n        };\n        let url = await FirebaseService.upload(value.path, value.data, metadata);\n        documentsData[index].url = url;\n      } else if (value.status === 'delete') {\n        await FirebaseService.remove(value.path);\n      }\n    }\n\n    let petData = pet;\n    petData.documents = documentsData.filter(value => value.status !== 'delete');\n    await dispatch(updateSelectedPet(petData));\n  };\n\n  const uploadPictures = async () => {\n    const picturesData = [...pet.pictures];\n\n    for (let index = 0; index < picturesData.length; index++) {\n      let value = picturesData[index];\n\n      if (value.status === 'upload') {\n        const metadata = {\n          contentType: 'image/png'\n        };\n        let url = await FirebaseService.upload(value.path, value.data, metadata);\n        picturesData[index].src = url;\n      } else if (value.status === 'delete') {\n        await FirebaseService.remove(value.path);\n      }\n    }\n\n    let petData = pet;\n    petData.pictures = picturesData.filter(value => value.status !== 'delete');\n    await dispatch(updateSelectedPet(petData));\n  };\n\n  const uploadProfilePicture = async () => {\n    // update profile picture only if new was uploaded\n    if (oldProfilePicture.src && oldProfilePicture.src !== '') {\n      // delete old one\n      await FirebaseService.remove(oldProfilePicture.path); // upload new one\n\n      let value = pet.profilePicture;\n      const metadata = {\n        contentType: 'image/png'\n      };\n      let url = await FirebaseService.upload(value.path, value.data, metadata);\n      value.src = url;\n      let petData = pet;\n      petData.profilePicture = value;\n      await dispatch(updateSelectedPet(petData));\n    }\n  };\n\n  const updatePet = async () => {\n    if (pet.profilePicture.path) {\n      setLoading(true); // upload documents and pics to firebase first\n\n      await uploadDocuments();\n      await uploadCompetitions();\n      await uploadPictures();\n      await uploadProfilePicture();\n      const dateCreated = Date.now(); // combine all information about a pet\n\n      let petToUpload = {\n        id: id,\n        ownerId: user.id,\n        officialName: name,\n        nickname: nickname,\n        birthDate: birthDate,\n        sex: sex,\n        price: price,\n        profilePicture: pet.profilePicture,\n        pictures: pet.pictures,\n        dateCreated: dateCreated,\n        breed: breed,\n        species: species,\n        competitions: pet.competitions,\n        documents: pet.documents\n      };\n\n      const onSuccess = () => {\n        NotificationService.notify('success', 'Success', 'Your four-legged friend was successfully updated!');\n        history.push('/');\n      };\n\n      const onError = () => {\n        NotificationService.notify('error', 'Error', 'There was a problem updating your pet.');\n      };\n\n      dispatch(changePet(petToUpload, onSuccess, onError));\n      setLoading(false);\n    } else {\n      NotificationService.notify('error', 'Upload Error', 'Upload of the pet profile picture is required!');\n    }\n  }; // on canceling the view\n\n\n  const onCancel = async () => {\n    history.goBack();\n  };\n\n  return pet && !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.layout,\n      children: [/*#__PURE__*/_jsxDEV(PetPhotosForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PetInformationForm, {\n        nameProp: {\n          name,\n          setName\n        },\n        nicknameProp: {\n          nickname,\n          setNickname\n        },\n        sexProp: {\n          sex,\n          setSex\n        },\n        birthDateProp: {\n          birthDate,\n          setBirthDate\n        },\n        speciesProp: {\n          species,\n          setSpecies\n        },\n        breedProp: {\n          breed,\n          setBreed\n        },\n        priceProp: {\n          price,\n          setPrice\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.button,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: onCancel,\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"large\",\n        style: {\n          marginRight: 20\n        },\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: formIsDisabled,\n        onClick: updatePet,\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20,\n          color: \"white\",\n          style: {\n            marginRight: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 32\n        }, this) : '', \" Save\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditPetView, \"KdNRNEFy3L1cITvSQp95bZSeMUw=\", false, function () {\n  return [useStyles, useDispatch, useHistory, useLocation, usePet, useUser, useProfilePicture];\n});\n\n_c = EditPetView;\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'center',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n      width: 'auto',\n      alignItems: 'center'\n    }\n  },\n  button: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    marginRight: 20\n  }\n})); // connect() establishes the connection to the redux functionalities\n\nexport default connect()(EditPetView);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPetView\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/views/EditPetView.js"],"names":["React","useEffect","useState","connect","useDispatch","makeStyles","PetInformationForm","PetPhotosForm","Button","CircularProgress","usePet","useProfilePicture","changePet","clearPetInfos","getPet","updateProfilePicture","updateSelectedPet","useUser","Loading","NotificationService","FirebaseService","useHistory","useLocation","EditPetView","props","classes","useStyles","dispatch","history","location","id","pathname","split","pet","user","officialName","setLoading","fetchPet","loading","formIsDisabled","setFormIsDisabled","name","setName","nickname","setNickname","sex","setSex","birthDate","setBirthDate","Date","species","setSpecies","breed","setBreed","price","setPrice","isEmpty","str","undefined","disabled","ownerId","goBack","notify","oldProfilePicture","uploadCompetitions","competitionsData","competitions","index","length","value","certificate","status","metadata","contentType","type","url","upload","path","data","remove","petData","filter","uploadDocuments","documentsData","documents","uploadPictures","picturesData","pictures","src","uploadProfilePicture","profilePicture","updatePet","dateCreated","now","petToUpload","onSuccess","push","onError","onCancel","layout","button","marginRight","theme","display","width","justifyContent","breakpoints","down","flexDirection","alignItems"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,kBAAT,EAA6BC,aAA7B,QAAkD,kBAAlD;AACA,SAASC,MAAT,EAAiBC,gBAAjB,QAAyC,mBAAzC;AACA,SAASC,MAAT,EAAiBC,iBAAjB,QAA0C,yBAA1C;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,MAAnC,EAA2CC,oBAA3C,EAAiEC,iBAAjE,QAA0F,eAA1F;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,mBAAT,EAA8BC,eAA9B,QAAqD,UAArD;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAMC,OAAO,GAAGC,SAAS,EAAzB;AACA,QAAMC,QAAQ,GAAGvB,WAAW,EAA5B;AACA,QAAMwB,OAAO,GAAGP,UAAU,EAA1B;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAMQ,EAAE,GAAGD,QAAQ,CAACE,QAAT,CAAkBC,KAAlB,CAAwB,YAAxB,EAAsC,CAAtC,CAAX;AACA,QAAMC,GAAG,GAAGvB,MAAM,EAAlB;AACA,QAAMwB,IAAI,GAAGjB,OAAO,EAApB;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA0B,IAAAA,QAAQ,CAACZ,oBAAoB,CAAC,EAAD,CAArB,CAAR;;AAEA,QAAIkB,GAAG,CAACE,YAAR,EAAsB;AAClBC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAFD,MAEO;AACH,YAAMC,QAAQ,GAAG,MAAM;AACnBV,QAAAA,QAAQ,CAACb,MAAM,CAACgB,EAAD,CAAP,CAAR;AACAM,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAHD;;AAIAC,MAAAA,QAAQ;AACX;AACJ,GAbQ,EAaN,CAACV,QAAD,EAAWG,EAAX,EAAeG,GAAG,CAACE,YAAnB,CAbM,CAAT;AAeA,QAAM,CAACG,OAAD,EAAUF,UAAV,IAAwBlC,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACqC,cAAD,EAAiBC,iBAAjB,IAAsCtC,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACuC,IAAD,EAAOC,OAAP,IAAkBxC,QAAQ,CAAC+B,GAAG,CAACE,YAAL,CAAhC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0B1C,QAAQ,CAAC+B,GAAG,CAACU,QAAL,CAAxC;AACA,QAAM,CAACE,GAAD,EAAMC,MAAN,IAAgB5C,QAAQ,CAAC+B,GAAG,CAACY,GAAL,CAA9B;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4B9C,QAAQ,CAAC,IAAI+C,IAAJ,CAAShB,GAAG,CAACc,SAAb,CAAD,CAA1C;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBjD,QAAQ,CAAC+B,GAAG,CAACiB,OAAL,CAAtC;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBnD,QAAQ,CAAC+B,GAAG,CAACmB,KAAL,CAAlC;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBrD,QAAQ,CAAC+B,GAAG,CAACqB,KAAL,CAAlC;;AAEA,QAAME,OAAO,GAAIC,GAAD,IAASA,GAAG,KAAK,EAAR,IAAcA,GAAG,KAAKC,SAA/C;;AAEAzD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM0D,QAAQ,GAAGH,OAAO,CAACf,IAAD,CAAP,IAAiBe,OAAO,CAACX,GAAD,CAAxB,IAAiCW,OAAO,CAACN,OAAD,CAAxC,IAAqDM,OAAO,CAACJ,KAAD,CAA7E;AACAZ,IAAAA,iBAAiB,CAACmB,QAAD,CAAjB;AACH,GAHQ,EAGN,CAAClB,IAAD,EAAOI,GAAP,EAAYO,KAAZ,EAAmBF,OAAnB,CAHM,CAAT;AAKAjD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIgC,GAAG,CAAC2B,OAAJ,KAAgB1B,IAAI,CAACJ,EAAzB,EAA6B;AACzBF,MAAAA,OAAO,CAACiC,MAAR;AACA1C,MAAAA,mBAAmB,CAAC2C,MAApB,CAA2B,OAA3B,EAAoC,kBAApC,EAAwD,gCAAxD;AACH;AACJ,GALQ,EAKN,CAAC7B,GAAG,CAAC2B,OAAL,EAAc1B,IAAI,CAACJ,EAAnB,EAAuBF,OAAvB,CALM,CAAT,CA1C2B,CAiD3B;;AACA,QAAMmC,iBAAiB,GAAGpD,iBAAiB,EAA3C;;AAEA,QAAMqD,kBAAkB,GAAG,YAAY;AACnC,UAAMC,gBAAgB,GAAG,CAAC,GAAGhC,GAAG,CAACiC,YAAR,CAAzB;;AACA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,gBAAgB,CAACG,MAA7C,EAAqDD,KAAK,EAA1D,EAA8D;AAC1D,UAAIE,KAAK,GAAGJ,gBAAgB,CAACE,KAAD,CAA5B;;AAEA,UAAIE,KAAK,CAACC,WAAV,EAAuB;AACnB,YAAID,KAAK,CAACC,WAAN,CAAkBC,MAAlB,KAA6B,QAAjC,EAA2C;AACvC,gBAAMC,QAAQ,GAAG;AACbC,YAAAA,WAAW,EAAEJ,KAAK,CAACC,WAAN,CAAkBI;AADlB,WAAjB;AAGA,cAAIC,GAAG,GAAG,MAAMvD,eAAe,CAACwD,MAAhB,CAAuBP,KAAK,CAACC,WAAN,CAAkBO,IAAzC,EAA+CR,KAAK,CAACC,WAAN,CAAkBQ,IAAjE,EAAuEN,QAAvE,CAAhB;AACAP,UAAAA,gBAAgB,CAACE,KAAD,CAAhB,CAAwBG,WAAxB,CAAoCK,GAApC,GAA0CA,GAA1C;AACH,SAND,MAMO,IAAIN,KAAK,CAACC,WAAN,CAAkBC,MAAlB,KAA6B,QAAjC,EAA2C;AAC9C,gBAAMnD,eAAe,CAAC2D,MAAhB,CAAuBV,KAAK,CAACC,WAAN,CAAkBO,IAAzC,CAAN;AACH;AACJ;AACJ;;AAED,QAAIG,OAAO,GAAG/C,GAAd;AACA+C,IAAAA,OAAO,CAACd,YAAR,GAAuBD,gBAAgB,CAACgB,MAAjB,CAAyBZ,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBC,MAAlB,KAA6B,QAAhE,CAAvB;AACA,UAAM5C,QAAQ,CAACX,iBAAiB,CAACgE,OAAD,CAAlB,CAAd;AACH,GArBD;;AAuBA,QAAME,eAAe,GAAG,YAAY;AAChC,UAAMC,aAAa,GAAG,CAAC,GAAGlD,GAAG,CAACmD,SAAR,CAAtB;;AACA,SAAK,IAAIjB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGgB,aAAa,CAACf,MAA1C,EAAkDD,KAAK,EAAvD,EAA2D;AACvD,UAAIE,KAAK,GAAGc,aAAa,CAAChB,KAAD,CAAzB;;AAEA,UAAIE,KAAK,CAACE,MAAN,KAAiB,QAArB,EAA+B;AAC3B,cAAMC,QAAQ,GAAG;AACbC,UAAAA,WAAW,EAAEJ,KAAK,CAACK;AADN,SAAjB;AAGA,YAAIC,GAAG,GAAG,MAAMvD,eAAe,CAACwD,MAAhB,CAAuBP,KAAK,CAACQ,IAA7B,EAAmCR,KAAK,CAACS,IAAzC,EAA+CN,QAA/C,CAAhB;AACAW,QAAAA,aAAa,CAAChB,KAAD,CAAb,CAAqBQ,GAArB,GAA2BA,GAA3B;AACH,OAND,MAMO,IAAIN,KAAK,CAACE,MAAN,KAAiB,QAArB,EAA+B;AAClC,cAAMnD,eAAe,CAAC2D,MAAhB,CAAuBV,KAAK,CAACQ,IAA7B,CAAN;AACH;AACJ;;AAED,QAAIG,OAAO,GAAG/C,GAAd;AACA+C,IAAAA,OAAO,CAACI,SAAR,GAAoBD,aAAa,CAACF,MAAd,CAAsBZ,KAAD,IAAWA,KAAK,CAACE,MAAN,KAAiB,QAAjD,CAApB;AACA,UAAM5C,QAAQ,CAACX,iBAAiB,CAACgE,OAAD,CAAlB,CAAd;AACH,GAnBD;;AAqBA,QAAMK,cAAc,GAAG,YAAY;AAC/B,UAAMC,YAAY,GAAG,CAAC,GAAGrD,GAAG,CAACsD,QAAR,CAArB;;AACA,SAAK,IAAIpB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGmB,YAAY,CAAClB,MAAzC,EAAiDD,KAAK,EAAtD,EAA0D;AACtD,UAAIE,KAAK,GAAGiB,YAAY,CAACnB,KAAD,CAAxB;;AAEA,UAAIE,KAAK,CAACE,MAAN,KAAiB,QAArB,EAA+B;AAC3B,cAAMC,QAAQ,GAAG;AACbC,UAAAA,WAAW,EAAE;AADA,SAAjB;AAIA,YAAIE,GAAG,GAAG,MAAMvD,eAAe,CAACwD,MAAhB,CAAuBP,KAAK,CAACQ,IAA7B,EAAmCR,KAAK,CAACS,IAAzC,EAA+CN,QAA/C,CAAhB;AACAc,QAAAA,YAAY,CAACnB,KAAD,CAAZ,CAAoBqB,GAApB,GAA0Bb,GAA1B;AACH,OAPD,MAOO,IAAIN,KAAK,CAACE,MAAN,KAAiB,QAArB,EAA+B;AAClC,cAAMnD,eAAe,CAAC2D,MAAhB,CAAuBV,KAAK,CAACQ,IAA7B,CAAN;AACH;AACJ;;AACD,QAAIG,OAAO,GAAG/C,GAAd;AACA+C,IAAAA,OAAO,CAACO,QAAR,GAAmBD,YAAY,CAACL,MAAb,CAAqBZ,KAAD,IAAWA,KAAK,CAACE,MAAN,KAAiB,QAAhD,CAAnB;AACA,UAAM5C,QAAQ,CAACX,iBAAiB,CAACgE,OAAD,CAAlB,CAAd;AACH,GAnBD;;AAqBA,QAAMS,oBAAoB,GAAG,YAAY;AACrC;AACA,QAAI1B,iBAAiB,CAACyB,GAAlB,IAAyBzB,iBAAiB,CAACyB,GAAlB,KAA0B,EAAvD,EAA2D;AACvD;AACA,YAAMpE,eAAe,CAAC2D,MAAhB,CAAuBhB,iBAAiB,CAACc,IAAzC,CAAN,CAFuD,CAIvD;;AACA,UAAIR,KAAK,GAAGpC,GAAG,CAACyD,cAAhB;AACA,YAAMlB,QAAQ,GAAG;AACbC,QAAAA,WAAW,EAAE;AADA,OAAjB;AAIA,UAAIE,GAAG,GAAG,MAAMvD,eAAe,CAACwD,MAAhB,CAAuBP,KAAK,CAACQ,IAA7B,EAAmCR,KAAK,CAACS,IAAzC,EAA+CN,QAA/C,CAAhB;AACAH,MAAAA,KAAK,CAACmB,GAAN,GAAYb,GAAZ;AAEA,UAAIK,OAAO,GAAG/C,GAAd;AACA+C,MAAAA,OAAO,CAACU,cAAR,GAAyBrB,KAAzB;AAEA,YAAM1C,QAAQ,CAACX,iBAAiB,CAACgE,OAAD,CAAlB,CAAd;AACH;AACJ,GApBD;;AAsBA,QAAMW,SAAS,GAAG,YAAY;AAC1B,QAAI1D,GAAG,CAACyD,cAAJ,CAAmBb,IAAvB,EAA6B;AACzBzC,MAAAA,UAAU,CAAC,IAAD,CAAV,CADyB,CAGzB;;AACA,YAAM8C,eAAe,EAArB;AACA,YAAMlB,kBAAkB,EAAxB;AACA,YAAMqB,cAAc,EAApB;AACA,YAAMI,oBAAoB,EAA1B;AAEA,YAAMG,WAAW,GAAG3C,IAAI,CAAC4C,GAAL,EAApB,CATyB,CAUzB;;AACA,UAAIC,WAAW,GAAG;AACdhE,QAAAA,EAAE,EAAEA,EADU;AAEd8B,QAAAA,OAAO,EAAE1B,IAAI,CAACJ,EAFA;AAGdK,QAAAA,YAAY,EAAEM,IAHA;AAIdE,QAAAA,QAAQ,EAAEA,QAJI;AAKdI,QAAAA,SAAS,EAAEA,SALG;AAMdF,QAAAA,GAAG,EAAEA,GANS;AAOdS,QAAAA,KAAK,EAAEA,KAPO;AAQdoC,QAAAA,cAAc,EAAEzD,GAAG,CAACyD,cARN;AASdH,QAAAA,QAAQ,EAAEtD,GAAG,CAACsD,QATA;AAUdK,QAAAA,WAAW,EAAEA,WAVC;AAWdxC,QAAAA,KAAK,EAAEA,KAXO;AAYdF,QAAAA,OAAO,EAAEA,OAZK;AAadgB,QAAAA,YAAY,EAAEjC,GAAG,CAACiC,YAbJ;AAcdkB,QAAAA,SAAS,EAAEnD,GAAG,CAACmD;AAdD,OAAlB;;AAiBA,YAAMW,SAAS,GAAG,MAAM;AACpB5E,QAAAA,mBAAmB,CAAC2C,MAApB,CAA2B,SAA3B,EAAsC,SAAtC,EAAiD,mDAAjD;AACAlC,QAAAA,OAAO,CAACoE,IAAR,CAAa,GAAb;AACH,OAHD;;AAKA,YAAMC,OAAO,GAAG,MAAM;AAClB9E,QAAAA,mBAAmB,CAAC2C,MAApB,CAA2B,OAA3B,EAAoC,OAApC,EAA6C,wCAA7C;AACH,OAFD;;AAIAnC,MAAAA,QAAQ,CAACf,SAAS,CAACkF,WAAD,EAAcC,SAAd,EAAyBE,OAAzB,CAAV,CAAR;AACA7D,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAvCD,MAuCO;AACHjB,MAAAA,mBAAmB,CAAC2C,MAApB,CAA2B,OAA3B,EAAoC,cAApC,EAAoD,gDAApD;AACH;AACJ,GA3CD,CA3I2B,CAwL3B;;;AACA,QAAMoC,QAAQ,GAAG,YAAY;AACzBtE,IAAAA,OAAO,CAACiC,MAAR;AACH,GAFD;;AAIA,SAAO5B,GAAG,IAAI,CAACK,OAAR,gBACH;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEb,OAAO,CAAC0E,MAAxB;AAAA,8BACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,kBAAD;AACI,QAAA,QAAQ,EAAE;AAAE1D,UAAAA,IAAF;AAAQC,UAAAA;AAAR,SADd;AAEI,QAAA,YAAY,EAAE;AAAEC,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,SAFlB;AAGI,QAAA,OAAO,EAAE;AAAEC,UAAAA,GAAF;AAAOC,UAAAA;AAAP,SAHb;AAII,QAAA,aAAa,EAAE;AAAEC,UAAAA,SAAF;AAAaC,UAAAA;AAAb,SAJnB;AAKI,QAAA,WAAW,EAAE;AAAEE,UAAAA,OAAF;AAAWC,UAAAA;AAAX,SALjB;AAMI,QAAA,SAAS,EAAE;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT,SANf;AAOI,QAAA,SAAS,EAAE;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT;AAPf;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAaI;AAAK,MAAA,SAAS,EAAE9B,OAAO,CAAC2E,MAAxB;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEF,QAAjB;AAA2B,QAAA,OAAO,EAAC,WAAnC;AAA+C,QAAA,KAAK,EAAC,WAArD;AAAiE,QAAA,IAAI,EAAC,OAAtE;AAA8E,QAAA,KAAK,EAAE;AAAEG,UAAAA,WAAW,EAAE;AAAf,SAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE9D,cAAlB;AAAkC,QAAA,OAAO,EAAEoD,SAA3C;AAAsD,QAAA,IAAI,EAAC,QAA3D;AAAoE,QAAA,OAAO,EAAC,WAA5E;AAAwF,QAAA,KAAK,EAAC,SAA9F;AAAwG,QAAA,IAAI,EAAC,OAA7G;AAAA,mBACKrD,OAAO,gBAAG,QAAC,gBAAD;AAAkB,UAAA,IAAI,EAAE,EAAxB;AAA4B,UAAA,KAAK,EAAC,OAAlC;AAA0C,UAAA,KAAK,EAAE;AAAE+D,YAAAA,WAAW,EAAE;AAAf;AAAjD;AAAA;AAAA;AAAA;AAAA,gBAAH,GAA8E,EAD1F;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADG,gBAwBH,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAxBJ;AA0BH,CAvND;;GAAM9E,W;UACcG,S,EACCtB,W,EACDiB,U,EACCC,W,EAGLZ,M,EACCO,O,EA0CaN,iB;;;KAlDxBY,W;AAyNN,MAAMG,SAAS,GAAGrB,UAAU,CAAEiG,KAAD,KAAY;AACrCH,EAAAA,MAAM,EAAE;AACJI,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,KAAK,EAAE,MAFH;AAGJC,IAAAA,cAAc,EAAE,QAHZ;AAIJ,KAACH,KAAK,CAACI,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AAC5BC,MAAAA,aAAa,EAAE,QADa;AAE5BJ,MAAAA,KAAK,EAAE,MAFqB;AAG5BK,MAAAA,UAAU,EAAE;AAHgB;AAJ5B,GAD6B;AAWrCT,EAAAA,MAAM,EAAE;AACJG,IAAAA,OAAO,EAAE,MADL;AAEJE,IAAAA,cAAc,EAAE,UAFZ;AAGJJ,IAAAA,WAAW,EAAE;AAHT;AAX6B,CAAZ,CAAD,CAA5B,C,CAkBA;;AACA,eAAelG,OAAO,GAAGoB,WAAH,CAAtB","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { PetInformationForm, PetPhotosForm } from 'components/forms';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport { usePet, useProfilePicture } from 'helper/hooks/pets.hooks';\nimport { changePet, clearPetInfos, getPet, updateProfilePicture, updateSelectedPet } from 'redux/actions';\nimport { useUser } from 'helper/hooks/auth.hooks';\nimport Loading from 'components/Loading';\nimport { NotificationService, FirebaseService } from 'services';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nconst EditPetView = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const location = useLocation();\n\n    const id = location.pathname.split('/edit/pet/')[1];\n    const pet = usePet();\n    const user = useUser();\n\n    useEffect(() => {\n        // remove old profile picture\n        dispatch(updateProfilePicture({}));\n\n        if (pet.officialName) {\n            setLoading(false);\n        } else {\n            const fetchPet = () => {\n                dispatch(getPet(id));\n                setLoading(false);\n            };\n            fetchPet();\n        }\n    }, [dispatch, id, pet.officialName]);\n\n    const [loading, setLoading] = useState(true);\n    const [formIsDisabled, setFormIsDisabled] = useState(false);\n    const [name, setName] = useState(pet.officialName);\n    const [nickname, setNickname] = useState(pet.nickname);\n    const [sex, setSex] = useState(pet.sex);\n    const [birthDate, setBirthDate] = useState(new Date(pet.birthDate));\n    const [species, setSpecies] = useState(pet.species);\n    const [breed, setBreed] = useState(pet.breed);\n    const [price, setPrice] = useState(pet.price);\n\n    const isEmpty = (str) => str === '' || str === undefined;\n\n    useEffect(() => {\n        const disabled = isEmpty(name) || isEmpty(sex) || isEmpty(species) || isEmpty(breed);\n        setFormIsDisabled(disabled);\n    }, [name, sex, breed, species]);\n\n    useEffect(() => {\n        if (pet.ownerId !== user.id) {\n            history.goBack();\n            NotificationService.notify('error', 'Navigation Error', 'This information is restricted');\n        }\n    }, [pet.ownerId, user.id, history]);\n\n    // get old profile picture to delete it later if it was updated\n    const oldProfilePicture = useProfilePicture();\n\n    const uploadCompetitions = async () => {\n        const competitionsData = [...pet.competitions];\n        for (let index = 0; index < competitionsData.length; index++) {\n            let value = competitionsData[index];\n\n            if (value.certificate) {\n                if (value.certificate.status === 'upload') {\n                    const metadata = {\n                        contentType: value.certificate.type,\n                    };\n                    let url = await FirebaseService.upload(value.certificate.path, value.certificate.data, metadata);\n                    competitionsData[index].certificate.url = url;\n                } else if (value.certificate.status === 'delete') {\n                    await FirebaseService.remove(value.certificate.path);\n                }\n            }\n        }\n\n        let petData = pet;\n        petData.competitions = competitionsData.filter((value) => value.certificate.status !== 'delete');\n        await dispatch(updateSelectedPet(petData));\n    };\n\n    const uploadDocuments = async () => {\n        const documentsData = [...pet.documents];\n        for (let index = 0; index < documentsData.length; index++) {\n            let value = documentsData[index];\n\n            if (value.status === 'upload') {\n                const metadata = {\n                    contentType: value.type,\n                };\n                let url = await FirebaseService.upload(value.path, value.data, metadata);\n                documentsData[index].url = url;\n            } else if (value.status === 'delete') {\n                await FirebaseService.remove(value.path);\n            }\n        }\n\n        let petData = pet;\n        petData.documents = documentsData.filter((value) => value.status !== 'delete');\n        await dispatch(updateSelectedPet(petData));\n    };\n\n    const uploadPictures = async () => {\n        const picturesData = [...pet.pictures];\n        for (let index = 0; index < picturesData.length; index++) {\n            let value = picturesData[index];\n\n            if (value.status === 'upload') {\n                const metadata = {\n                    contentType: 'image/png',\n                };\n\n                let url = await FirebaseService.upload(value.path, value.data, metadata);\n                picturesData[index].src = url;\n            } else if (value.status === 'delete') {\n                await FirebaseService.remove(value.path);\n            }\n        }\n        let petData = pet;\n        petData.pictures = picturesData.filter((value) => value.status !== 'delete');\n        await dispatch(updateSelectedPet(petData));\n    };\n\n    const uploadProfilePicture = async () => {\n        // update profile picture only if new was uploaded\n        if (oldProfilePicture.src && oldProfilePicture.src !== '') {\n            // delete old one\n            await FirebaseService.remove(oldProfilePicture.path);\n\n            // upload new one\n            let value = pet.profilePicture;\n            const metadata = {\n                contentType: 'image/png',\n            };\n\n            let url = await FirebaseService.upload(value.path, value.data, metadata);\n            value.src = url;\n\n            let petData = pet;\n            petData.profilePicture = value;\n\n            await dispatch(updateSelectedPet(petData));\n        }\n    };\n\n    const updatePet = async () => {\n        if (pet.profilePicture.path) {\n            setLoading(true);\n\n            // upload documents and pics to firebase first\n            await uploadDocuments();\n            await uploadCompetitions();\n            await uploadPictures();\n            await uploadProfilePicture();\n\n            const dateCreated = Date.now();\n            // combine all information about a pet\n            let petToUpload = {\n                id: id,\n                ownerId: user.id,\n                officialName: name,\n                nickname: nickname,\n                birthDate: birthDate,\n                sex: sex,\n                price: price,\n                profilePicture: pet.profilePicture,\n                pictures: pet.pictures,\n                dateCreated: dateCreated,\n                breed: breed,\n                species: species,\n                competitions: pet.competitions,\n                documents: pet.documents,\n            };\n\n            const onSuccess = () => {\n                NotificationService.notify('success', 'Success', 'Your four-legged friend was successfully updated!');\n                history.push('/');\n            };\n\n            const onError = () => {\n                NotificationService.notify('error', 'Error', 'There was a problem updating your pet.');\n            };\n\n            dispatch(changePet(petToUpload, onSuccess, onError));\n            setLoading(false);\n        } else {\n            NotificationService.notify('error', 'Upload Error', 'Upload of the pet profile picture is required!');\n        }\n    };\n\n    // on canceling the view\n    const onCancel = async () => {\n        history.goBack();\n    };\n\n    return pet && !loading ? (\n        <div>\n            <div className={classes.layout}>\n                <PetPhotosForm />\n                <PetInformationForm\n                    nameProp={{ name, setName }}\n                    nicknameProp={{ nickname, setNickname }}\n                    sexProp={{ sex, setSex }}\n                    birthDateProp={{ birthDate, setBirthDate }}\n                    speciesProp={{ species, setSpecies }}\n                    breedProp={{ breed, setBreed }}\n                    priceProp={{ price, setPrice }}\n                />\n            </div>\n            <div className={classes.button}>\n                <Button onClick={onCancel} variant=\"contained\" color=\"secondary\" size=\"large\" style={{ marginRight: 20 }}>\n                    Cancel\n                </Button>\n                <Button disabled={formIsDisabled} onClick={updatePet} type=\"submit\" variant=\"contained\" color=\"primary\" size=\"large\">\n                    {loading ? <CircularProgress size={20} color=\"white\" style={{ marginRight: 10 }} /> : ''} Save\n                </Button>\n            </div>\n        </div>\n    ) : (\n        <Loading />\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        display: 'flex',\n        width: '100%',\n        justifyContent: 'center',\n        [theme.breakpoints.down('sm')]: {\n            flexDirection: 'column',\n            width: 'auto',\n            alignItems: 'center',\n        },\n    },\n    button: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginRight: 20,\n    },\n}));\n\n// connect() establishes the connection to the redux functionalities\nexport default connect()(EditPetView);\n"]},"metadata":{},"sourceType":"module"}