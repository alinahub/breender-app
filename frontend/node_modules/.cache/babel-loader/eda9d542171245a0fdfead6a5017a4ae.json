{"ast":null,"code":"import MessageService from '../../services/MessageService';\nconst MessageTypes = {\n  GET_MESSAGES: 'GET_MESSAGES',\n  GET_UNREAD_MESSAGES: 'GET_UNREAD_MESSAGES',\n  UPDATE_MESSAGES_TO_READ: 'UPDATE_MESSAGES_TO_READ',\n  ADD_MESSAGE: 'ADD_MESSAGE'\n};\nexport const addMessage = message => {\n  const addMessageAction = () => {\n    return {\n      type: MessageTypes.ADD_MESSAGE\n    };\n  };\n\n  const onFailure = err => {\n    console.log(err);\n  };\n\n  return async dispatch => {\n    await MessageService.createMessage(message).then(() => {\n      dispatch(addMessageAction());\n    }).catch(e => {\n      onFailure(e);\n    });\n  };\n};\nexport const updateMessagesToSeen = messageIds => {\n  const onSuccess = () => {\n    return {\n      type: MessageTypes.UPDATE_MESSAGES_TO_READ\n    };\n  };\n\n  const onFailure = err => {\n    console.log(err);\n  };\n\n  return async dispatch => {\n    await MessageService.updateMessagesToSeen(messageIds).then(() => {\n      dispatch(onSuccess());\n    }).catch(e => {\n      onFailure(e);\n    });\n  };\n};\nexport const getMessages = conversationId => {\n  // when the backend call was successfull and the messages are retrieved\n  // in the dispatcher the messages will be added to the global state\n  const onSuccess = messages => {\n    return {\n      type: MessageTypes.GET_MESSAGES,\n      messages: messages\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('failed to get the messages', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      // ask for the messages in the backend\n      let messages = await MessageService.getMessages(conversationId); // call onSuccess in context of redux\n\n      dispatch(onSuccess(messages));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};\nexport const getUnseenMessages = userId => {\n  // when the backend call was successfull and the messages are retrieved\n  // in the dispatcher the messages will be added to the global state\n  const onSuccess = unseenMessages => {\n    return {\n      type: MessageTypes.GET_UNREAD_MESSAGES,\n      unseenMessages: unseenMessages\n    };\n  }; // when the backend call was failed\n\n\n  const onFailure = error => {\n    // error handling\n    console.log('failed to get the messages', error);\n  };\n\n  return async (dispatch, getState) => {\n    try {\n      // ask for the unread messages in the backend\n      let unseenMessages = await MessageService.getUnseenMessages(userId); // call onSuccess in context of redux\n\n      dispatch(onSuccess(unseenMessages));\n    } catch (e) {\n      onFailure(e);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/messageActions.js"],"names":["MessageService","MessageTypes","GET_MESSAGES","GET_UNREAD_MESSAGES","UPDATE_MESSAGES_TO_READ","ADD_MESSAGE","addMessage","message","addMessageAction","type","onFailure","err","console","log","dispatch","createMessage","then","catch","e","updateMessagesToSeen","messageIds","onSuccess","getMessages","conversationId","messages","error","getState","getUnseenMessages","userId","unseenMessages"],"mappings":"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","sourcesContent":["import MessageService from '../../services/MessageService';\n\nconst MessageTypes = {\n    GET_MESSAGES: 'GET_MESSAGES',\n    GET_UNREAD_MESSAGES: 'GET_UNREAD_MESSAGES',\n    UPDATE_MESSAGES_TO_READ: 'UPDATE_MESSAGES_TO_READ',\n    ADD_MESSAGE: 'ADD_MESSAGE',\n};\n\nexport const addMessage = (message) => {\n    const addMessageAction = () => {\n        return { type: MessageTypes.ADD_MESSAGE };\n    };\n    const onFailure = (err) => {\n        console.log(err);\n    };\n\n    return async (dispatch) => {\n        await MessageService.createMessage(message)\n            .then(() => {\n                dispatch(addMessageAction());\n            })\n            .catch((e) => {\n                onFailure(e);\n            });\n    };\n};\n\nexport const updateMessagesToSeen = (messageIds) => {\n    const onSuccess = () => {\n        return { type: MessageTypes.UPDATE_MESSAGES_TO_READ };\n    };\n    const onFailure = (err) => {\n        console.log(err);\n    };\n\n    return async (dispatch) => {\n        await MessageService.updateMessagesToSeen(messageIds)\n            .then(() => {\n                dispatch(onSuccess());\n            })\n            .catch((e) => {\n                onFailure(e);\n            });\n    };\n};\n\nexport const getMessages = (conversationId) => {\n    // when the backend call was successfull and the messages are retrieved\n    // in the dispatcher the messages will be added to the global state\n    const onSuccess = (messages) => {\n        return { type: MessageTypes.GET_MESSAGES, messages: messages };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the messages', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            // ask for the messages in the backend\n            let messages = await MessageService.getMessages(conversationId);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(messages));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const getUnseenMessages = (userId) => {\n    // when the backend call was successfull and the messages are retrieved\n    // in the dispatcher the messages will be added to the global state\n    const onSuccess = (unseenMessages) => {\n        return { type: MessageTypes.GET_UNREAD_MESSAGES, unseenMessages: unseenMessages };\n    };\n    // when the backend call was failed\n    const onFailure = (error) => {\n        // error handling\n        console.log('failed to get the messages', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            // ask for the unread messages in the backend\n            let unseenMessages = await MessageService.getUnseenMessages(userId);\n            // call onSuccess in context of redux\n            dispatch(onSuccess(unseenMessages));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}