{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/competitions.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useRef, useState } from 'react'; // antd imports\n\nimport 'antd/dist/antd.css';\nimport { DatePicker, Modal, Table, Typography } from 'antd'; // material-ui imports\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Grid, IconButton } from '@material-ui/core';\nimport { Input, Form } from 'antd';\nimport DocumentsUpload from './upload/documents.upload';\nimport moment from 'moment';\nimport { connect, useDispatch } from 'react-redux';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { updateCompetitionsToUpload } from 'redux/actions';\nimport { usePet, usePetCompetitions } from 'helper/hooks/pets.hooks';\nimport { NotificationService } from 'services';\nimport { ControlPointSharp } from '@material-ui/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Text\n} = Typography;\nconst EditableContext = /*#__PURE__*/createContext(null);\nconst DATE_FORMAT = 'DD.MM.YYYY'; // Define editable row form\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n      value: form,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}; // Define editable cell\n\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = EditableRow;\n\nconst EditableCell = ({\n  title,\n  focused,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  _s2();\n\n  const [editing, setEditing] = useState(focused || false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext); // focus on editing cell\n\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  }; // save edited values\n\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {}\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        ref: inputRef,\n        onPressEnter: save,\n        onBlur: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: childNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(EditableCell, \"b+qhciJRsxKuysIUyDxDooqUWlk=\");\n\n_c2 = EditableCell;\n\nconst prepareCompetitions = competitions => {\n  let arr = competitions;\n  arr.map((value, index) => {\n    value.key = index;\n    value.date = new Date(value.date);\n    return value;\n  });\n  return arr;\n};\n\nconst CompetitionsComponent = props => {\n  _s3();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    mode\n  } = props;\n  const pet = usePet();\n  const [count, setCount] = useState(0);\n  const [isModalVisible, setIsModalVisible] = useState(false); // competitions on the modal\n\n  const [competitions, setCompetitions] = useState(mode === 'add' ? [] : prepareCompetitions(pet.competitions)); // competitions on the edit page\n\n  const [editedCompetitions, setEditedCompetitions] = useState(mode === 'add' ? [] : prepareCompetitions(pet.competitions));\n  const columnsData = [{\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    fixed: 'left',\n    width: 'auto',\n    editable: true,\n    render: (_, record) => competitions.length >= 1 ? /*#__PURE__*/_jsxDEV(Text, {\n      type: \"secondary\",\n      children: record.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 64\n    }, this) : null\n  }, {\n    title: 'Date',\n    dataIndex: 'date',\n    editable: false,\n    render: (_, record) => competitions.length >= 1 ? /*#__PURE__*/_jsxDEV(Text, {\n      type: \"secondary\",\n      children: new Date(record.date).toLocaleDateString('de-DE')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 64\n    }, this) : null\n  }, {\n    title: 'Category',\n    dataIndex: 'category',\n    key: 'category',\n    editable: true,\n    render: (_, record) => competitions.length >= 1 ? /*#__PURE__*/_jsxDEV(Text, {\n      type: \"secondary\",\n      children: record.category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 64\n    }, this) : null\n  }, {\n    title: 'Prize',\n    dataIndex: 'prize',\n    key: 'prize',\n    editable: true,\n    render: (_, record) => competitions.length >= 1 ? /*#__PURE__*/_jsxDEV(Text, {\n      type: \"secondary\",\n      children: record.prize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 64\n    }, this) : null\n  }, {\n    title: 'Certificate',\n    dataIndex: 'certificate',\n    key: 'certificate',\n    render: (_, record) => competitions.length >= 1 ? /*#__PURE__*/_jsxDEV(Text, {\n      type: \"secondary\",\n      children: record.certificate ? record.certificate.name : ' No File Uploaded'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 64\n    }, this) : null\n  }];\n  const columnsModalData = [{\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    fixed: 'left',\n    width: 'auto',\n    editable: true,\n    render: (_, record) => competitions.length >= 1 ? /*#__PURE__*/_jsxDEV(Input, {\n      bordered: false,\n      value: record.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 64\n    }, this) : null\n  }, {\n    title: 'Date',\n    dataIndex: 'date',\n    editable: false,\n    render: (_, record) => competitions.length >= 1 ? /*#__PURE__*/_jsxDEV(DatePicker, {\n      value: moment(record.date, DATE_FORMAT),\n      bordered: false,\n      onChange: date => changeDate(date, record),\n      format: DATE_FORMAT\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 44\n    }, this) : null\n  }, {\n    title: 'Category',\n    dataIndex: 'category',\n    key: 'category',\n    editable: true,\n    render: (_, record) => competitions.length >= 1 ? /*#__PURE__*/_jsxDEV(Input, {\n      bordered: false,\n      value: record.category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 64\n    }, this) : null\n  }, {\n    title: 'Prize',\n    dataIndex: 'prize',\n    key: 'prize',\n    editable: true,\n    render: (_, record) => competitions.length >= 1 ? /*#__PURE__*/_jsxDEV(Input, {\n      bordered: false,\n      value: record.prize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 64\n    }, this) : null\n  }, {\n    title: 'Certificate',\n    dataIndex: 'certificate',\n    key: 'certificate',\n    render: (_, record) => competitions.length >= 1 ? /*#__PURE__*/_jsxDEV(DocumentsUpload, {\n      type: \"competitions\",\n      competitionId: record._id,\n      maxFiles: 1,\n      size: 'small'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 64\n    }, this) : null\n  }, {\n    title: 'Remove',\n    key: 'remove',\n    render: key => competitions.length >= 1 ? /*#__PURE__*/_jsxDEV(IconButton, {\n      onClick: () => handleDelete(key),\n      children: /*#__PURE__*/_jsxDEV(DeleteOutlinedIcon, {\n        color: \"error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 21\n    }, this) : null\n  }];\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell\n    }\n  };\n  const columns = columnsModalData.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        handleSave: handleSave,\n        focused: col.key === 'name' && record.name === '' ? true : false\n      })\n    };\n  }); // add new row\n\n  const handleAdd = () => {\n    const newData = {\n      key: count,\n      name: '',\n      date: new Date(),\n      category: '',\n      prize: '',\n      certificate: undefined\n    };\n    setCompetitions([...competitions, newData]);\n    setCount(count + 1);\n    dispatch(updateCompetitionsToUpload(competitions));\n  }; // delete row\n\n\n  const handleDelete = key => {\n    const newData = competitions.filter(item => item.key !== key.key);\n    setCompetitions(newData);\n    setCount(count - 1);\n  }; // save competitions data\n\n\n  const handleSave = row => {\n    const newData = [...competitions];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, { ...item,\n      ...row\n    });\n    setCompetitions(newData);\n  }; // handle change of the competition date\n\n\n  const changeDate = (date, record) => {\n    const newData = [...competitions];\n    newData.map(item => {\n      if (record.key === item.key) {\n        item.date = new Date(date);\n      }\n\n      return item;\n    });\n    setCompetitions(newData);\n  };\n\n  const showModal = () => setIsModalVisible(true);\n\n  const hideModal = () => {\n    dispatch(updateCompetitionsToUpload(editedCompetitions));\n    setCompetitions(editedCompetitions);\n    setIsModalVisible(false);\n    setCount(editedCompetitions.length);\n  };\n\n  const onOk = () => {\n    // check if all columns of all competitions are filled out\n    let verified = true;\n    competitions.forEach(item => {\n      console.log(Object.keys(item).length);\n\n      if (Object.keys(item).length < 7) {\n        verified = false;\n        NotificationService.notify('error', 'All fields required', 'Please fill out all columns for the competitions!');\n        return;\n      }\n    });\n\n    if (verified) {\n      dispatch(updateCompetitionsToUpload(competitions));\n      setEditedCompetitions(competitions);\n      setIsModalVisible(false);\n      setCount(competitions.length);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.layout,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: classes.label,\n          children: \"Competitions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        className: classes.grid,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: showModal,\n          variant: \"outlined\",\n          color: \"secondary\",\n          style: {\n            margin: 10\n          },\n          children: \"Edit Table\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      dataSource: editedCompetitions,\n      columns: columnsData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      visible: isModalVisible,\n      onOk: onOk,\n      onCancel: hideModal,\n      className: classes.modal,\n      width: '80vw',\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        alignItems: \"flex-end\",\n        justify: \"flex-end\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleAdd,\n          variant: \"outlined\",\n          color: \"primary\",\n          style: {\n            margin: 20\n          },\n          children: \"Add a row\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        components: components,\n        rowClassName: () => 'editable-row',\n        bordered: true,\n        dataSource: competitions,\n        columns: columns,\n        style: {\n          width: '80vw'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 9\n  }, this);\n};\n\n_s3(CompetitionsComponent, \"kS4nUcvf5JVzYJO4mw/ooiPpBuc=\", false, function () {\n  return [useStyles, useDispatch, usePet];\n});\n\n_c3 = CompetitionsComponent;\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    display: 'flex',\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: 500\n  },\n  grid: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    alignSelf: 'flex-end'\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 100\n  }\n}));\nexport default connect()(CompetitionsComponent);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");\n$RefreshReg$(_c3, \"CompetitionsComponent\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/competitions.js"],"names":["React","createContext","useContext","useEffect","useRef","useState","DatePicker","Modal","Table","Typography","makeStyles","Button","Grid","IconButton","Input","Form","DocumentsUpload","moment","connect","useDispatch","DeleteOutlinedIcon","updateCompetitionsToUpload","usePet","usePetCompetitions","NotificationService","ControlPointSharp","Text","EditableContext","DATE_FORMAT","EditableRow","index","props","form","useForm","EditableCell","title","focused","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","values","validateFields","errInfo","childNode","margin","required","message","paddingRight","prepareCompetitions","competitions","arr","map","value","key","date","Date","CompetitionsComponent","classes","useStyles","dispatch","mode","pet","count","setCount","isModalVisible","setIsModalVisible","setCompetitions","editedCompetitions","setEditedCompetitions","columnsData","fixed","width","render","_","length","name","toLocaleDateString","category","prize","certificate","columnsModalData","changeDate","_id","handleDelete","components","body","row","cell","columns","col","onCell","handleAdd","newData","undefined","filter","item","findIndex","splice","showModal","hideModal","onOk","verified","forEach","console","log","Object","keys","notify","layout","label","grid","modal","theme","display","flexDirection","justifyContent","alignItems","fontSize","fontWeight","alignSelf","marginTop"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useEffect, useRef, useState } from 'react';\n// antd imports\nimport 'antd/dist/antd.css';\nimport { DatePicker, Modal, Table, Typography } from 'antd';\n// material-ui imports\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Grid, IconButton } from '@material-ui/core';\nimport { Input, Form } from 'antd';\nimport DocumentsUpload from './upload/documents.upload';\nimport moment from 'moment';\nimport { connect, useDispatch } from 'react-redux';\n\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { updateCompetitionsToUpload } from 'redux/actions';\nimport { usePet, usePetCompetitions } from 'helper/hooks/pets.hooks';\nimport { NotificationService } from 'services';\nimport { ControlPointSharp } from '@material-ui/icons';\n\nconst { Text } = Typography;\n\nconst EditableContext = createContext(null);\nconst DATE_FORMAT = 'DD.MM.YYYY';\n\n// Define editable row form\nconst EditableRow = ({ index, ...props }) => {\n    const [form] = Form.useForm();\n    return (\n        <Form form={form} component={false}>\n            <EditableContext.Provider value={form}>\n                <tr {...props} />\n            </EditableContext.Provider>\n        </Form>\n    );\n};\n\n// Define editable cell\nconst EditableCell = ({ title, focused, editable, children, dataIndex, record, handleSave, ...restProps }) => {\n    const [editing, setEditing] = useState(focused || false);\n    const inputRef = useRef(null);\n    const form = useContext(EditableContext);\n\n    // focus on editing cell\n    useEffect(() => {\n        if (editing) {\n            inputRef.current.focus();\n        }\n    }, [editing]);\n\n    const toggleEdit = () => {\n        setEditing(!editing);\n        form.setFieldsValue({\n            [dataIndex]: record[dataIndex],\n        });\n    };\n\n    // save edited values\n    const save = async () => {\n        try {\n            const values = await form.validateFields();\n            toggleEdit();\n            handleSave({ ...record, ...values });\n        } catch (errInfo) {}\n    };\n\n    let childNode = children;\n\n    if (editable) {\n        childNode = editing ? (\n            <Form.Item\n                style={{\n                    margin: 0,\n                }}\n                name={dataIndex}\n                rules={[\n                    {\n                        required: true,\n                        message: `${title} is required.`,\n                    },\n                ]}\n            >\n                <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n            </Form.Item>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                style={{\n                    paddingRight: 24,\n                }}\n                onClick={toggleEdit}\n            >\n                {children}\n            </div>\n        );\n    }\n\n    return <td {...restProps}>{childNode}</td>;\n};\n\nconst prepareCompetitions = (competitions) => {\n    let arr = competitions;\n    arr.map((value, index) => {\n        value.key = index;\n        value.date = new Date(value.date);\n        return value;\n    });\n    return arr;\n};\n\nconst CompetitionsComponent = (props) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const { mode } = props;\n\n    const pet = usePet();\n\n    const [count, setCount] = useState(0);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    // competitions on the modal\n    const [competitions, setCompetitions] = useState(mode === 'add' ? [] : prepareCompetitions(pet.competitions));\n    // competitions on the edit page\n    const [editedCompetitions, setEditedCompetitions] = useState(mode === 'add' ? [] : prepareCompetitions(pet.competitions));\n\n    const columnsData = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            fixed: 'left',\n            width: 'auto',\n            editable: true,\n            render: (_, record) => (competitions.length >= 1 ? <Text type=\"secondary\">{record.name}</Text> : null),\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            editable: false,\n            render: (_, record) => (competitions.length >= 1 ? <Text type=\"secondary\">{new Date(record.date).toLocaleDateString('de-DE')}</Text> : null),\n        },\n        {\n            title: 'Category',\n            dataIndex: 'category',\n            key: 'category',\n            editable: true,\n            render: (_, record) => (competitions.length >= 1 ? <Text type=\"secondary\">{record.category}</Text> : null),\n        },\n        {\n            title: 'Prize',\n            dataIndex: 'prize',\n            key: 'prize',\n            editable: true,\n            render: (_, record) => (competitions.length >= 1 ? <Text type=\"secondary\">{record.prize}</Text> : null),\n        },\n        {\n            title: 'Certificate',\n            dataIndex: 'certificate',\n            key: 'certificate',\n            render: (_, record) => (competitions.length >= 1 ? <Text type=\"secondary\">{record.certificate ? record.certificate.name : ' No File Uploaded'}</Text> : null),\n        },\n    ];\n\n    const columnsModalData = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            fixed: 'left',\n            width: 'auto',\n            editable: true,\n            render: (_, record) => (competitions.length >= 1 ? <Input bordered={false} value={record.name} /> : null),\n        },\n        {\n            title: 'Date',\n            dataIndex: 'date',\n            editable: false,\n            render: (_, record) =>\n                competitions.length >= 1 ? <DatePicker value={moment(record.date, DATE_FORMAT)} bordered={false} onChange={(date) => changeDate(date, record)} format={DATE_FORMAT} /> : null,\n        },\n        {\n            title: 'Category',\n            dataIndex: 'category',\n            key: 'category',\n            editable: true,\n            render: (_, record) => (competitions.length >= 1 ? <Input bordered={false} value={record.category} /> : null),\n        },\n        {\n            title: 'Prize',\n            dataIndex: 'prize',\n            key: 'prize',\n            editable: true,\n            render: (_, record) => (competitions.length >= 1 ? <Input bordered={false} value={record.prize} /> : null),\n        },\n        {\n            title: 'Certificate',\n            dataIndex: 'certificate',\n            key: 'certificate',\n            render: (_, record) => (competitions.length >= 1 ? <DocumentsUpload type=\"competitions\" competitionId={record._id} maxFiles={1} size={'small'} /> : null),\n        },\n        {\n            title: 'Remove',\n            key: 'remove',\n            render: (key) =>\n                competitions.length >= 1 ? (\n                    <IconButton onClick={() => handleDelete(key)}>\n                        <DeleteOutlinedIcon color=\"error\" />\n                    </IconButton>\n                ) : null,\n        },\n    ];\n\n    const components = {\n        body: {\n            row: EditableRow,\n            cell: EditableCell,\n        },\n    };\n\n    const columns = columnsModalData.map((col) => {\n        if (!col.editable) {\n            return col;\n        }\n\n        return {\n            ...col,\n            onCell: (record) => ({\n                record,\n                editable: col.editable,\n                dataIndex: col.dataIndex,\n                title: col.title,\n                handleSave: handleSave,\n                focused: col.key === 'name' && record.name === '' ? true : false,\n            }),\n        };\n    });\n\n    // add new row\n    const handleAdd = () => {\n        const newData = { key: count, name: '', date: new Date(), category: '', prize: '', certificate: undefined };\n        setCompetitions([...competitions, newData]);\n        setCount(count + 1);\n\n        dispatch(updateCompetitionsToUpload(competitions));\n    };\n\n    // delete row\n    const handleDelete = (key) => {\n        const newData = competitions.filter((item) => item.key !== key.key);\n        setCompetitions(newData);\n        setCount(count - 1);\n    };\n\n    // save competitions data\n    const handleSave = (row) => {\n        const newData = [...competitions];\n        const index = newData.findIndex((item) => row.key === item.key);\n        const item = newData[index];\n        newData.splice(index, 1, { ...item, ...row });\n        setCompetitions(newData);\n    };\n\n    // handle change of the competition date\n    const changeDate = (date, record) => {\n        const newData = [...competitions];\n        newData.map((item) => {\n            if (record.key === item.key) {\n                item.date = new Date(date);\n            }\n            return item;\n        });\n        setCompetitions(newData);\n    };\n\n    const showModal = () => setIsModalVisible(true);\n\n    const hideModal = () => {\n        dispatch(updateCompetitionsToUpload(editedCompetitions));\n        setCompetitions(editedCompetitions);\n        setIsModalVisible(false);\n        setCount(editedCompetitions.length)\n    };\n\n    const onOk = () => {\n        // check if all columns of all competitions are filled out\n        let verified = true;\n        competitions.forEach((item) => {\n            console.log(Object.keys(item).length)\n            if (Object.keys(item).length < 7) {\n                verified = false;\n                NotificationService.notify('error', 'All fields required', 'Please fill out all columns for the competitions!');\n                return;\n            }\n        });\n        if (verified) {\n            dispatch(updateCompetitionsToUpload(competitions));\n            setEditedCompetitions(competitions);\n            setIsModalVisible(false);\n            setCount(competitions.length)\n        }\n    };\n\n    return (\n        <div>\n            <Grid container className={classes.layout}>\n                <Grid item xs={12} sm={6}>\n                    <label className={classes.label}>Competitions</label>\n                </Grid>\n                <Grid item xs={12} sm={6} className={classes.grid}>\n                    <Button\n                        onClick={showModal}\n                        variant=\"outlined\"\n                        color=\"secondary\"\n                        style={{\n                            margin: 10,\n                        }}\n                    >\n                        Edit Table\n                    </Button>\n                </Grid>\n            </Grid>\n            <Table dataSource={editedCompetitions} columns={columnsData} />\n            {/* Modal for editable competitions table */}\n            <Modal visible={isModalVisible} onOk={onOk} onCancel={hideModal} className={classes.modal} width={'80vw'}>\n                <Grid container alignItems=\"flex-end\" justify=\"flex-end\">\n                    <Button\n                        onClick={handleAdd}\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        style={{\n                            margin: 20,\n                        }}\n                    >\n                        Add a row\n                    </Button>\n                </Grid>\n                <Table components={components} rowClassName={() => 'editable-row'} bordered dataSource={competitions} columns={columns} style={{ width: '80vw' }} />\n            </Modal>\n        </div>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        display: 'flex',\n        width: '100%',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    label: {\n        fontSize: 16,\n        fontWeight: 500,\n    },\n    grid: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignSelf: 'flex-end',\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: 100,\n    },\n}));\n\nexport default connect()(CompetitionsComponent);\n"]},"metadata":{},"sourceType":"module"}