{"ast":null,"code":"import axios from 'axios';\nexport default class PetService {\n  static URL() {\n    return 'http://localhost:4000/pets';\n  }\n\n  static setToken() {\n    const token = localStorage.getItem('jwtToken');\n    axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n  }\n\n  static getPets(species, sex, breed, age, page, showOwn, user) {\n    this.setToken();\n    return new Promise(async (resolve, reject) => {\n      try {\n        const me = `user=${(user === null || user === void 0 ? void 0 : user.id) ? user.id : ''}`;\n        const {\n          data\n        } = await axios.get(`/pets/search?${me}&species=${species}&sex=${sex}&breed=${breed}&age[]=${age}&page=${page}&showOwn=${showOwn}`);\n        resolve(data);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  static getPet(id) {\n    this.setToken();\n    return new Promise(async (resolve, reject) => {\n      try {\n        const {\n          data\n        } = await axios.get(`/pets/${id}`);\n        resolve(data);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  static deletePet(id) {\n    this.setToken();\n    return new Promise(async (resolve, reject) => {\n      try {\n        const {\n          data\n        } = await axios.delete(`/pets/${id}`);\n        resolve(data);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  static async updatePet(pet) {\n    this.setToken();\n    const {\n      data\n    } = await axios.put(`/pets/${pet.id}`, pet);\n    return data;\n  }\n\n  static async createPet(pet) {\n    this.setToken();\n    await axios.post(`/pets/`, pet).then(data => {\n      return data;\n    }).catch(err => {\n      console.log(err.error);\n    }); //return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/services/PetService.js"],"names":["axios","PetService","URL","setToken","token","localStorage","getItem","defaults","headers","common","getPets","species","sex","breed","age","page","showOwn","user","Promise","resolve","reject","me","id","data","get","err","getPet","deletePet","delete","updatePet","pet","put","createPet","post","then","catch","console","log","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,UAAN,CAAiB;AAClB,SAAHC,GAAG,GAAG;AACT,WAAO,4BAAP;AACH;;AAEc,SAARC,QAAQ,GAAG;AACd,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd;AACAN,IAAAA,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,YAAYL,KAA7D;AACH;;AAEa,SAAPM,OAAO,CAACC,OAAD,EAAUC,GAAV,EAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,OAAjC,EAA0CC,IAA1C,EAAgD;AAC1D,SAAKd,QAAL;AACA,WAAO,IAAIe,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,UAAI;AACA,cAAMC,EAAE,GAAI,QAAO,CAAAJ,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEK,EAAN,IAAWL,IAAI,CAACK,EAAhB,GAAqB,EAAG,EAA3C;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMvB,KAAK,CAACwB,GAAN,CAAW,gBAAeH,EAAG,YAAWV,OAAQ,QAAOC,GAAI,UAASC,KAAM,UAASC,GAAI,SAAQC,IAAK,YAAWC,OAAQ,EAAvH,CAAvB;AACAG,QAAAA,OAAO,CAACI,IAAD,CAAP;AACH,OAJD,CAIE,OAAOE,GAAP,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACH;AACJ,KARM,CAAP;AASH;;AAEY,SAANC,MAAM,CAACJ,EAAD,EAAK;AACd,SAAKnB,QAAL;AACA,WAAO,IAAIe,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,UAAI;AACA,cAAM;AAAEG,UAAAA;AAAF,YAAW,MAAMvB,KAAK,CAACwB,GAAN,CAAW,SAAQF,EAAG,EAAtB,CAAvB;AACAH,QAAAA,OAAO,CAACI,IAAD,CAAP;AACH,OAHD,CAGE,OAAOE,GAAP,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACH;AACJ,KAPM,CAAP;AAQH;;AAEe,SAATE,SAAS,CAACL,EAAD,EAAK;AACjB,SAAKnB,QAAL;AACA,WAAO,IAAIe,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,UAAI;AACA,cAAM;AAAEG,UAAAA;AAAF,YAAW,MAAMvB,KAAK,CAAC4B,MAAN,CAAc,SAAQN,EAAG,EAAzB,CAAvB;AACAH,QAAAA,OAAO,CAACI,IAAD,CAAP;AACH,OAHD,CAGE,OAAOE,GAAP,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACH;AACJ,KAPM,CAAP;AAQH;;AAEqB,eAATI,SAAS,CAACC,GAAD,EAAM;AACxB,SAAK3B,QAAL;AACA,UAAM;AAAEoB,MAAAA;AAAF,QAAW,MAAMvB,KAAK,CAAC+B,GAAN,CAAW,SAAQD,GAAG,CAACR,EAAG,EAA1B,EAA6BQ,GAA7B,CAAvB;AACA,WAAOP,IAAP;AACH;;AAEqB,eAATS,SAAS,CAACF,GAAD,EAAM;AACxB,SAAK3B,QAAL;AACA,UAAMH,KAAK,CAACiC,IAAN,CAAY,QAAZ,EAAqBH,GAArB,EAA0BI,IAA1B,CAAgCX,IAAD,IAAU;AAC3C,aAAOA,IAAP;AACH,KAFK,EAEHY,KAFG,CAEIV,GAAD,IAAS;AACdW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAG,CAACa,KAAhB;AACH,KAJK,CAAN,CAFwB,CAOxB;AACH;;AA7D2B","sourcesContent":["import axios from 'axios';\n\nexport default class PetService {\n    static URL() {\n        return 'http://localhost:4000/pets';\n    }\n\n    static setToken() {\n        const token = localStorage.getItem('jwtToken');\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n    }\n\n    static getPets(species, sex, breed, age, page, showOwn, user) {\n        this.setToken();\n        return new Promise(async (resolve, reject) => {\n            try {\n                const me = `user=${user?.id ? user.id : ''}`;\n                const { data } = await axios.get(`/pets/search?${me}&species=${species}&sex=${sex}&breed=${breed}&age[]=${age}&page=${page}&showOwn=${showOwn}`);\n                resolve(data);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    static getPet(id) {\n        this.setToken();\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await axios.get(`/pets/${id}`);\n                resolve(data);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    static deletePet(id) {\n        this.setToken();\n        return new Promise(async (resolve, reject) => {\n            try {\n                const { data } = await axios.delete(`/pets/${id}`);\n                resolve(data);\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    static async updatePet(pet) {\n        this.setToken();\n        const { data } = await axios.put(`/pets/${pet.id}`, pet);\n        return data;\n    }\n\n    static async createPet(pet) {\n        this.setToken();\n        await axios.post(`/pets/`, pet).then((data) => {\n            return data;\n        }).catch((err) => {\n            console.log(err.error);\n        });\n        //return data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}