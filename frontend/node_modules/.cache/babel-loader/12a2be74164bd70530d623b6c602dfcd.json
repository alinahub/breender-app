{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/messenger/MessengerComponent.js\",\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { connect, useSelector, dispatch } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { getMessages, addMessage, updateMessagesToSeen, getUnseenMessages } from 'redux/actions/messageActions';\nimport { Grid, Paper, Divider, Typography, List, ListItem, ListItemText, Button, Icon, Fab } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SendIcon from '@material-ui/icons/Send';\nimport TextField from '@material-ui/core/TextField';\nimport ConversationComponent from './ConversationComponent';\nimport MessageComponent from './MessageComponent';\nimport Loading from 'components/Loading';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MessengerComponent(props) {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [conversations, setConversations] = useState([]);\n  const [currentChat, setCurrentChat] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const socket = useRef();\n  const userId = useSelector(state => state.user.user.id);\n  const loadedConversations = useSelector(state => state.conversations.conversations);\n  const unseenMessages = useSelector(state => state.messages.unseenMessages);\n  useEffect(() => {\n    socket.current = io('ws://localhost:8900');\n    socket.current.on('getMessage', data => {\n      setArrivalMessage({\n        sender: data.senderId,\n        text: data.text,\n        createdAt: Date.now()\n      });\n    });\n  }, []);\n  useEffect(() => {\n    arrivalMessage && (currentChat === null || currentChat === void 0 ? void 0 : currentChat.members.includes(arrivalMessage.sender)) && setMessages(prev => [...prev, arrivalMessage]);\n  }, [arrivalMessage, currentChat]);\n  useEffect(() => {\n    socket.current.emit('addUser', userId);\n  }, [userId]);\n  useEffect(() => {\n    if (props.currentConversationId) {\n      setCurrentChat(loadedConversations.find(c => c.id = props.currentConversationId));\n    }\n  }, [props.currentConversationId]);\n  useEffect(() => {\n    if (currentChat && userId) {\n      dispatch(getUnseenMessages(userId));\n    }\n  }, [currentChat]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.layout,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      component: Paper,\n      className: classes.chatSection,\n      children: [/*#__PURE__*/_jsxDEV(ChatMenuComponent, {\n        conversations: props.conversations,\n        currentUser: props.currentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 9,\n        children: currentChat ? /*#__PURE__*/_jsxDEV(ChatBoxComponent, {\n          conversation: currentChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          className: \"header-message\",\n          className: classes.instructions,\n          children: \"Open a conversation to start a chat...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n\n  function ChatMenuComponent(menuProps) {\n    _s();\n\n    const classes = useStyles();\n    const [searchName, setSearchName] = useState('');\n\n    const handleSearchChange = e => {\n      setSearchName(e.target.value);\n    };\n\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 3,\n      className: classes.chatMenu,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: classes.padding10,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          className: classes.searchField,\n          InputLabelProps: {\n            classeName: classes.label\n          },\n          color: \"secondary\",\n          variant: \"outlined\",\n          label: \"Filter breeders...\",\n          onChange: handleSearchChange,\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        children: menuProps.conversations.filter(c => {\n          if (c) {\n            if (c.members) {\n              let friend = c.members.find(m => {\n                return m._id !== props.currentUser.id;\n              });\n\n              if (friend.username) {\n                return friend.username.toLowerCase().includes(searchName.toLowerCase());\n              }\n            }\n          }\n        }).map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => {\n            setCurrentChat(c);\n          },\n          children: /*#__PURE__*/_jsxDEV(ConversationComponent, {\n            conversation: c,\n            currentUser: menuProps.currentUser,\n            isCurrentChat: currentChat ? c._id == currentChat._id : false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  } // TODO: Make scrolling to bottom message automatic\n\n\n  _s(ChatMenuComponent, \"hSV+IalF37r7TnD0r582ru6hkFg=\", false, function () {\n    return [useStyles];\n  });\n\n  function ChatBoxComponent(chatProps) {\n    _s2();\n\n    const classes = useStyles();\n    const [newMessage, setNewMessage] = useState('');\n    useEffect(() => {\n      let conversationId = chatProps.conversation._id;\n\n      async function loadMessages(id) {\n        if (id) {\n          await dispatch(getMessages(id));\n        }\n      }\n\n      return loadMessages(conversationId);\n    }, [dispatch]);\n    const loadedMessages = useSelector(state => state.messages.messages);\n    useEffect(() => {\n      setMessages(loadedMessages);\n    }, [loadedMessages]);\n    useEffect(() => {\n      if (Array.isArray(loadedMessages) && loadedMessages.length !== 0) {\n        let unseenMessages = loadedMessages.filter(m => !m.seen && m.sender !== userId).map(m => m._id);\n\n        if (unseenMessages.length !== 0) {\n          dispatch(updateMessagesToSeen(unseenMessages));\n        }\n      }\n    }, [loadedMessages]);\n\n    const handleSubmit = async e => {\n      // Prevents refreshing of page on click\n      if (e) {\n        e.preventDefault();\n      }\n\n      const receiver = currentChat.members.find(member => member._id !== userId);\n      const message = {\n        sender: userId,\n        receiver: receiver._id,\n        text: newMessage,\n        seen: false,\n        conversationId: chatProps.conversation._id\n      };\n      setMessages([...messages]);\n      socket.current.emit('sendMessage', {\n        senderId: userId,\n        receiverId: receiver._id,\n        receiverEmail: receiver.email,\n        receiverUsername: receiver.username,\n        text: newMessage\n      });\n      dispatch(addMessage(message));\n      setNewMessage('');\n    };\n\n    return !currentChat ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        className: classes.messageArea,\n        children: Array.isArray(messages) && messages.length !== 0 ? messages.map(m => /*#__PURE__*/_jsxDEV(MessageComponent, {\n          message: m\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 45\n        }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          className: \"header-message\",\n          className: classes.instructions,\n          children: [\"Send a message to start a conversation with\", ' ', currentChat.members.find(m => {\n            return m._id !== props.currentUser.id;\n          }).username, \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        className: classes.padding20,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 11,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            id: \"outlined-basic\",\n            variant: \"outlined\",\n            label: \"Write something...\",\n            onChange: e => setNewMessage(e.target.value),\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1,\n          children: /*#__PURE__*/_jsxDEV(Fab, {\n            color: \"primary\",\n            \"aria-label\": \"add\",\n            onClick: handleSubmit,\n            className: classes.marginLeft10,\n            children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s2(ChatBoxComponent, \"/5RML5X4Ra+8Aywi5YxNFQTHPN0=\", false, function () {\n    return [useStyles, useSelector];\n  });\n}\n\n_s3(MessengerComponent, \"9Yne1Hcb9dDsUugr7MUCwV7QHVw=\", false, function () {\n  return [useStyles, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = MessengerComponent;\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    width: '80%',\n    alignSelf: 'center',\n    paddingTop: theme.spacing(1)\n  },\n  table: {\n    minWidth: 650\n  },\n  chatSection: {\n    width: '100%',\n    height: '85vh'\n  },\n  headBG: {\n    backgroundColor: '#e0e0e0'\n  },\n  chatMenu: {\n    borderRight: '1px solid #e0e0e0',\n    backgroundColor: theme.palette.primary.dark,\n    borderRadius: theme.shape.borderRadius\n  },\n  messageArea: {\n    height: '70vh',\n    overflowY: 'auto'\n  },\n  padding10: {\n    padding: '10px'\n  },\n  padding20: {\n    padding: '20px'\n  },\n  marginLeft10: {\n    marginLeft: '10px'\n  },\n  instructions: {\n    padding: '20px',\n    color: theme.palette.primary.light\n  },\n  searchField: {\n    color: theme.palette.text.secondary,\n    '& fieldset': {\n      borderColor: theme.palette.primary.light\n    },\n    '& .MuiOutlinedInput-root': {\n      '&:hover fieldset': {\n        borderColor: theme.palette.secondary.main\n      }\n    },\n    '&.Mui-focused fieldset': {\n      borderColor: theme.palette.secondary.main\n    },\n    '& label': {\n      color: theme.palette.primary.light\n    }\n  }\n}));\nexport default MessengerComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessengerComponent\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/messenger/MessengerComponent.js"],"names":["React","useEffect","useState","useRef","connect","useSelector","dispatch","useDispatch","getMessages","addMessage","updateMessagesToSeen","getUnseenMessages","Grid","Paper","Divider","Typography","List","ListItem","ListItemText","Button","Icon","Fab","makeStyles","SendIcon","TextField","ConversationComponent","MessageComponent","Loading","io","MessengerComponent","props","classes","useStyles","conversations","setConversations","currentChat","setCurrentChat","messages","setMessages","arrivalMessage","setArrivalMessage","socket","userId","state","user","id","loadedConversations","unseenMessages","current","on","data","sender","senderId","text","createdAt","Date","now","members","includes","prev","emit","currentConversationId","find","c","layout","chatSection","currentUser","instructions","ChatMenuComponent","menuProps","searchName","setSearchName","handleSearchChange","e","target","value","chatMenu","padding10","searchField","classeName","label","filter","friend","m","_id","username","toLowerCase","map","ChatBoxComponent","chatProps","newMessage","setNewMessage","conversationId","conversation","loadMessages","loadedMessages","Array","isArray","length","seen","handleSubmit","preventDefault","receiver","member","message","receiverId","receiverEmail","email","receiverUsername","messageArea","padding20","marginLeft10","theme","width","alignSelf","paddingTop","spacing","table","minWidth","height","headBG","backgroundColor","borderRight","palette","primary","dark","borderRadius","shape","overflowY","padding","marginLeft","color","light","secondary","borderColor","main"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { connect, useSelector, dispatch } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { getMessages, addMessage, updateMessagesToSeen, getUnseenMessages } from 'redux/actions/messageActions';\nimport { Grid, Paper, Divider, Typography, List, ListItem, ListItemText, Button, Icon, Fab } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SendIcon from '@material-ui/icons/Send';\nimport TextField from '@material-ui/core/TextField';\nimport ConversationComponent from './ConversationComponent';\nimport MessageComponent from './MessageComponent';\nimport Loading from 'components/Loading';\nimport io from 'socket.io-client';\n\nfunction MessengerComponent(props) {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [conversations, setConversations] = useState([]);\n    const [currentChat, setCurrentChat] = useState(null);\n    const [messages, setMessages] = useState([]);\n    const [arrivalMessage, setArrivalMessage] = useState(null);\n    const socket = useRef();\n    const userId = useSelector((state) => state.user.user.id);\n    const loadedConversations = useSelector((state) => state.conversations.conversations);\n    const unseenMessages = useSelector((state) => state.messages.unseenMessages);\n\n    useEffect(() => {\n        socket.current = io('ws://localhost:8900');\n        socket.current.on('getMessage', (data) => {\n            setArrivalMessage({\n                sender: data.senderId,\n                text: data.text,\n                createdAt: Date.now(),\n            });\n        });\n    }, []);\n\n    useEffect(() => {\n        arrivalMessage && currentChat?.members.includes(arrivalMessage.sender) && setMessages((prev) => [...prev, arrivalMessage]);\n    }, [arrivalMessage, currentChat]);\n\n    useEffect(() => {\n        socket.current.emit('addUser', userId);\n    }, [userId]);\n\n    useEffect(() => {\n        if (props.currentConversationId) {\n            setCurrentChat(loadedConversations.find((c) => (c.id = props.currentConversationId)));\n        }\n    }, [props.currentConversationId]);\n\n    useEffect(() => {\n        if (currentChat && userId) {\n            dispatch(getUnseenMessages(userId));\n        }\n    }, [currentChat]);\n\n    return (\n        <div className={classes.layout}>\n            <Grid container component={Paper} className={classes.chatSection}>\n                <ChatMenuComponent conversations={props.conversations} currentUser={props.currentUser} />\n                <Grid item xs={9}>\n                    {currentChat ? (\n                        <ChatBoxComponent conversation={currentChat} />\n                    ) : (\n                        <Typography variant=\"h2\" className=\"header-message\" className={classes.instructions}>\n                            Open a conversation to start a chat...\n                        </Typography>\n                    )}\n                </Grid>\n            </Grid>\n        </div>\n    );\n\n    function ChatMenuComponent(menuProps) {\n        const classes = useStyles();\n\n        const [searchName, setSearchName] = useState('');\n\n        const handleSearchChange = (e) => {\n            setSearchName(e.target.value);\n        };\n\n        return (\n            <Grid item xs={3} className={classes.chatMenu}>\n                <Grid item xs={12} className={classes.padding10}>\n                    <TextField\n                        className={classes.searchField}\n                        InputLabelProps={{ classeName: classes.label }}\n                        color=\"secondary\"\n                        variant=\"outlined\"\n                        label=\"Filter breeders...\"\n                        onChange={handleSearchChange}\n                        fullWidth\n                    />\n                </Grid>\n                <Divider />\n                <List>\n                    {menuProps.conversations\n                        .filter((c) => {\n                            if (c) {\n                                if (c.members) {\n                                    let friend = c.members.find((m) => {\n                                        return m._id !== props.currentUser.id;\n                                    });\n                                    if (friend.username) {\n                                        return friend.username.toLowerCase().includes(searchName.toLowerCase());\n                                    }\n                                }\n                            }\n                        })\n                        .map((c) => (\n                            <div\n                                onClick={() => {\n                                    setCurrentChat(c);\n                                }}\n                            >\n                                <ConversationComponent conversation={c} currentUser={menuProps.currentUser} isCurrentChat={currentChat ? c._id == currentChat._id : false} />\n                            </div>\n                        ))}\n                </List>\n            </Grid>\n        );\n    }\n\n    // TODO: Make scrolling to bottom message automatic\n    function ChatBoxComponent(chatProps) {\n        const classes = useStyles();\n        const [newMessage, setNewMessage] = useState('');\n\n        useEffect(() => {\n            let conversationId = chatProps.conversation._id;\n\n            async function loadMessages(id) {\n                if (id) {\n                    await dispatch(getMessages(id));\n                }\n            }\n\n            return loadMessages(conversationId);\n        }, [dispatch]);\n\n        const loadedMessages = useSelector((state) => state.messages.messages);\n\n        useEffect(() => {\n            setMessages(loadedMessages);\n        }, [loadedMessages]);\n\n        useEffect(() => {\n            if (Array.isArray(loadedMessages) && loadedMessages.length !== 0) {\n                let unseenMessages = loadedMessages.filter((m) => !m.seen && m.sender !== userId).map((m) => m._id);\n                if (unseenMessages.length !== 0) {\n                    dispatch(updateMessagesToSeen(unseenMessages));\n                }\n            }\n        }, [loadedMessages]);\n\n        const handleSubmit = async (e) => {\n            // Prevents refreshing of page on click\n            if (e) {\n                e.preventDefault();\n            }\n            const receiver = currentChat.members.find((member) => member._id !== userId);\n            const message = {\n                sender: userId,\n                receiver: receiver._id,\n                text: newMessage,\n                seen: false,\n                conversationId: chatProps.conversation._id,\n            };\n            setMessages([...messages]);\n            socket.current.emit('sendMessage', {\n                senderId: userId,\n                receiverId: receiver._id,\n                receiverEmail: receiver.email,\n                receiverUsername: receiver.username,\n                text: newMessage,\n            });\n            dispatch(addMessage(message));\n            setNewMessage('');\n        };\n\n        return !currentChat ? (\n            <Loading />\n        ) : (\n            <div>\n                <List className={classes.messageArea}>\n                    {Array.isArray(messages) && messages.length !== 0 ? (\n                        messages.map((m) => <MessageComponent message={m} />)\n                    ) : (\n                        <Typography variant=\"h2\" className=\"header-message\" className={classes.instructions}>\n                            Send a message to start a conversation with{' '}\n                            {\n                                currentChat.members.find((m) => {\n                                    return m._id !== props.currentUser.id;\n                                }).username\n                            }\n                            ...\n                        </Typography>\n                    )}\n                </List>\n                <Divider />\n                <Grid container className={classes.padding20}>\n                    <Grid item xs={11}>\n                        <TextField id=\"outlined-basic\" variant=\"outlined\" label=\"Write something...\" onChange={(e) => setNewMessage(e.target.value)} fullWidth />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <Fab color=\"primary\" aria-label=\"add\" onClick={handleSubmit} className={classes.marginLeft10}>\n                            <SendIcon />\n                        </Fab>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        width: '80%',\n        alignSelf: 'center',\n        paddingTop: theme.spacing(1),\n    },\n    table: {\n        minWidth: 650,\n    },\n    chatSection: {\n        width: '100%',\n        height: '85vh',\n    },\n    headBG: {\n        backgroundColor: '#e0e0e0',\n    },\n    chatMenu: {\n        borderRight: '1px solid #e0e0e0',\n        backgroundColor: theme.palette.primary.dark,\n        borderRadius: theme.shape.borderRadius,\n    },\n    messageArea: {\n        height: '70vh',\n        overflowY: 'auto',\n    },\n    padding10: {\n        padding: '10px',\n    },\n    padding20: {\n        padding: '20px',\n    },\n    marginLeft10: {\n        marginLeft: '10px',\n    },\n    instructions: {\n        padding: '20px',\n        color: theme.palette.primary.light,\n    },\n    searchField: {\n        color: theme.palette.text.secondary,\n        '& fieldset': {\n            borderColor: theme.palette.primary.light,\n        },\n        '& .MuiOutlinedInput-root': {\n            '&:hover fieldset': {\n                borderColor: theme.palette.secondary.main,\n            },\n        },\n        '&.Mui-focused fieldset': {\n            borderColor: theme.palette.secondary.main,\n        },\n        '& label': {\n            color: theme.palette.primary.light,\n        },\n    },\n}));\n\nexport default MessengerComponent;\n"]},"metadata":{},"sourceType":"module"}