{"ast":null,"code":"import _regeneratorRuntime from\"/Users/alinaturbina/Uni Projects/seba/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/alinaturbina/Uni Projects/seba/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var UploadTypes={UPDATE_PICTURES:'UPDATE_PICTURES',UPDATE_PROFILE_PICTURE:'UPDATE_PROFILE_PICTURE',UPDATE_COMPETITIONS:'UPDATE_COMPETITIONS',UPDATE_DOCUMENTS:'UPDATE_DOCUMENTS',CLEAR_UPLOAD:'CLEAR_UPLOAD'};export var updatePicturesToUpload=function updatePicturesToUpload(pictures){var updatePictures=function updatePictures(pictures){return{type:UploadTypes.UPDATE_PICTURES,pictures:pictures};};var onFailure=function onFailure(error){console.log('Failed to update pet',error);};return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,getState){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:try{dispatch(updatePictures(pictures));}catch(e){onFailure(e);}case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();};export var updateProfilePicture=function updateProfilePicture(pictureToUpload,pictureToRemove){var updateProfilePictureAction=function updateProfilePictureAction(toUpload,toRemove){return{type:UploadTypes.UPDATE_PROFILE_PICTURE,profilePictureToUpload:toUpload,profilePictureToRemove:toRemove};};var onFailure=function onFailure(error){console.log('Failed to update profile picture',error);};return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,getState){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:try{dispatch(updateProfilePictureAction(pictureToUpload,pictureToRemove));}catch(e){onFailure(e);}case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3,_x4){return _ref2.apply(this,arguments);};}();};export var updateDocumentsToUpload=function updateDocumentsToUpload(documents){var updateDocuments=function updateDocuments(documents){return{type:UploadTypes.UPDATE_DOCUMENTS,documents:documents};};var onFailure=function onFailure(error){console.log('Failed to update documents',error);};return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch,getState){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:try{dispatch(updateDocuments(documents));}catch(e){onFailure(e);}case 1:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x5,_x6){return _ref3.apply(this,arguments);};}();};export var updateCompetitionsToUpload=function updateCompetitionsToUpload(competitions){var updateCompetitions=function updateCompetitions(documents){return{type:UploadTypes.UPDATE_COMPETITIONS,competitions:competitions};};var onFailure=function onFailure(error){console.log('Failed to update competitions',error);};return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch,getState){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:try{dispatch(updateCompetitions(competitions));}catch(e){onFailure(e);}case 1:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x7,_x8){return _ref4.apply(this,arguments);};}();};export var clearUpload=function clearUpload(){var clearUploadAction=function clearUploadAction(){return{type:UploadTypes.CLEAR_UPLOAD};};var onFailure=function onFailure(error){console.log('Failed to clear update',error);};return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch,getState){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:try{dispatch(clearUploadAction());}catch(e){onFailure(e);}case 1:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x9,_x10){return _ref5.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/redux/actions/uploadActions.js"],"names":["UploadTypes","UPDATE_PICTURES","UPDATE_PROFILE_PICTURE","UPDATE_COMPETITIONS","UPDATE_DOCUMENTS","CLEAR_UPLOAD","updatePicturesToUpload","pictures","updatePictures","type","onFailure","error","console","log","dispatch","getState","e","updateProfilePicture","pictureToUpload","pictureToRemove","updateProfilePictureAction","toUpload","toRemove","profilePictureToUpload","profilePictureToRemove","updateDocumentsToUpload","documents","updateDocuments","updateCompetitionsToUpload","competitions","updateCompetitions","clearUpload","clearUploadAction"],"mappings":"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","sourcesContent":["const UploadTypes = {\n    UPDATE_PICTURES: 'UPDATE_PICTURES',\n    UPDATE_PROFILE_PICTURE: 'UPDATE_PROFILE_PICTURE',\n    UPDATE_COMPETITIONS: 'UPDATE_COMPETITIONS',\n    UPDATE_DOCUMENTS: 'UPDATE_DOCUMENTS',\n    CLEAR_UPLOAD: 'CLEAR_UPLOAD',\n};\n\nexport const updatePicturesToUpload = (pictures) => {\n    const updatePictures = (pictures) => {\n        return { type: UploadTypes.UPDATE_PICTURES, pictures: pictures };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to update pet', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updatePictures(pictures));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const updateProfilePicture = (pictureToUpload, pictureToRemove) => {\n    const updateProfilePictureAction = (toUpload, toRemove) => {\n        return { type: UploadTypes.UPDATE_PROFILE_PICTURE, profilePictureToUpload: toUpload, profilePictureToRemove: toRemove };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to update profile picture', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updateProfilePictureAction(pictureToUpload, pictureToRemove));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const updateDocumentsToUpload = (documents) => {\n    const updateDocuments = (documents) => {\n        return { type: UploadTypes.UPDATE_DOCUMENTS, documents: documents };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to update documents', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updateDocuments(documents));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const updateCompetitionsToUpload = (competitions) => {\n    const updateCompetitions = (documents) => {\n        return { type: UploadTypes.UPDATE_COMPETITIONS, competitions: competitions };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to update competitions', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(updateCompetitions(competitions));\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n\nexport const clearUpload = () => {\n    const clearUploadAction = () => {\n        return { type: UploadTypes.CLEAR_UPLOAD };\n    };\n    const onFailure = (error) => {\n        console.log('Failed to clear update', error);\n    };\n\n    return async (dispatch, getState) => {\n        try {\n            dispatch(clearUploadAction());\n        } catch (e) {\n            onFailure(e);\n        }\n    };\n};\n"]},"metadata":{},"sourceType":"module"}