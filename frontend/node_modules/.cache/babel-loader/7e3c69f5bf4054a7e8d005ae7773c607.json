{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/views/SubscriptionPageView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Container, Dialog, DialogActions, DialogContent, DialogTitle, Paper } from '@material-ui/core';\nimport SubscriptionPlanComponent from '../components/premium/SubscriptionPlanComponent';\nimport { withRouter } from 'react-router-dom';\nimport { getUsersInfo } from 'redux/actions';\nimport pets from '../images/pets.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  premiumDescription: {\n    padding: theme.spacing(8, 0, 6)\n  },\n  paper: {\n    width: '70%',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(5),\n    backgroundColor: 'white',\n    boxShadow: '0 10px 20px rgba(0,0,0,.07), 0 0 20px rgba(0,0,0,.02)'\n  },\n  imageOverlay: {\n    position: 'relative',\n    top: '7.4%',\n    left: '28%'\n  }\n}));\n\nfunction SubscriptionPageView(props) {\n  _s();\n\n  const classes = useStyles();\n  const user = useSelector(state => state.user);\n  const userInfo = useSelector(state => state.user.userInfo);\n  const [open, setOpen] = React.useState(false);\n\n  const loadUser = async () => {\n    // trigger the redux action getUsersInfo\n    props.dispatch(getUsersInfo(user.user.id));\n  };\n\n  useEffect(() => {\n    if (user.user) loadUser();\n  }, []);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const onSignUp = v => {\n    //pass subscription plan to sign up page\n    props.history.push({\n      pathname: '/register',\n      subscriptionPlan: v\n    });\n  };\n\n  const onChangePlan = v => {\n    //pass subscription plan to sign up page\n    if (userInfo.subscriptionPlan === 'free' && v === 'premium') {\n      console.log('want to change');\n      props.history.push('/premium/changePlan');\n    } else if (userInfo.subscriptionPlan === 'premium' && v === 'free') {\n      handleOpen();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.imageOverlay,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: pets,\n        alt: \"pets\",\n        width: \"700\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"sm\",\n        component: \"main\",\n        className: classes.premiumDescription,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h3\",\n          align: \"center\",\n          color: \"textPrimary\",\n          gutterBottom: true,\n          children: \"Get Access to All Features!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          align: \"center\",\n          color: \"textPrimary\",\n          component: \"p\",\n          children: \"Basic product or service is provided free of charge, but money (a premium) is charged for additional features, services, or virtual (online) or physical (offline) goods that expand the functionality of the free version.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"md\",\n        component: \"main\",\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 5,\n          alignItems: \"flex-end\",\n          children: /*#__PURE__*/_jsxDEV(SubscriptionPlanComponent, {\n            onClick: user.userInfo ? onChangePlan : onSignUp,\n            subscriptionPlan: user.userInfo ? userInfo.subscriptionPlan : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Dialog, {\n          onClose: handleClose,\n          \"aria-labelledby\": \"customized-dialog-title\",\n          open: open,\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            id: \"customized-dialog-title\",\n            onClose: handleClose,\n            children: \"Switching from Premium to Free\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            dividers: true,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              children: \"After your premium subscription ends your plan will be automatically switched to free.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              autoFocus: true,\n              variant: \"contained\",\n              onClick: handleClose,\n              color: \"primary\",\n              children: \"OK\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SubscriptionPageView, \"3fuuh02Fe3FVpMswqKXcq9OoUz4=\", false, function () {\n  return [useStyles, useSelector, useSelector];\n});\n\n_c = SubscriptionPageView;\nexport default connect()(withRouter(SubscriptionPageView));\n\nvar _c;\n\n$RefreshReg$(_c, \"SubscriptionPageView\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/views/SubscriptionPageView.js"],"names":["React","useEffect","connect","useSelector","Grid","Typography","makeStyles","Button","Container","Dialog","DialogActions","DialogContent","DialogTitle","Paper","SubscriptionPlanComponent","withRouter","getUsersInfo","pets","useStyles","theme","premiumDescription","padding","spacing","paper","width","marginLeft","marginRight","marginTop","marginBottom","backgroundColor","boxShadow","imageOverlay","position","top","left","SubscriptionPageView","props","classes","user","state","userInfo","open","setOpen","useState","loadUser","dispatch","id","handleOpen","handleClose","onSignUp","v","history","push","pathname","subscriptionPlan","onChangePlan","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Button, Container, Dialog, DialogActions, DialogContent, DialogTitle, Paper } from '@material-ui/core';\nimport SubscriptionPlanComponent from '../components/premium/SubscriptionPlanComponent';\nimport { withRouter } from 'react-router-dom';\nimport { getUsersInfo } from 'redux/actions';\nimport pets from '../images/pets.png';\n\nconst useStyles = makeStyles((theme) => ({\n    premiumDescription: {\n        padding: theme.spacing(8, 0, 6),\n    },\n    paper: {\n        width: '70%',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        marginTop: theme.spacing(0),\n        marginBottom: theme.spacing(5),\n        backgroundColor: 'white',\n        boxShadow: '0 10px 20px rgba(0,0,0,.07), 0 0 20px rgba(0,0,0,.02)',\n    },\n    imageOverlay: {\n        position: 'relative',\n        top: '7.4%',\n        left: '28%',\n    },\n}));\n\nfunction SubscriptionPageView(props) {\n    const classes = useStyles();\n\n    const user = useSelector((state) => state.user);\n    const userInfo = useSelector((state) => state.user.userInfo);\n    const [open, setOpen] = React.useState(false);\n\n    const loadUser = async () => {\n        // trigger the redux action getUsersInfo\n        props.dispatch(getUsersInfo(user.user.id));\n    };\n\n    useEffect(() => {\n        if (user.user) loadUser();\n    }, []);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const onSignUp = (v) => {\n        //pass subscription plan to sign up page\n        props.history.push({ pathname: '/register', subscriptionPlan: v });\n    };\n\n    const onChangePlan = (v) => {\n        //pass subscription plan to sign up page\n        if (userInfo.subscriptionPlan === 'free' && v === 'premium') {\n            console.log('want to change');\n            props.history.push('/premium/changePlan');\n        } else if (userInfo.subscriptionPlan === 'premium' && v === 'free') {\n            handleOpen();\n        }\n    };\n\n    return (\n        <div>\n            <div className={classes.imageOverlay}>\n                <img src={pets} alt=\"pets\" width=\"700\" />\n            </div>\n            <Paper className={classes.paper}>\n                <Container maxWidth=\"sm\" component=\"main\" className={classes.premiumDescription}>\n                    <Typography variant=\"h3\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                        Get Access to All Features!\n                    </Typography>\n                    <Typography variant=\"h5\" align=\"center\" color=\"textPrimary\" component=\"p\">\n                        Basic product or service is provided free of charge, but money (a premium) is charged for additional features, services, or virtual (online) or physical (offline) goods that\n                        expand the functionality of the free version.\n                    </Typography>\n                </Container>\n                <Container maxWidth=\"md\" component=\"main\">\n                    <Grid container spacing={5} alignItems=\"flex-end\">\n                        <SubscriptionPlanComponent onClick={user.userInfo ? onChangePlan : onSignUp} subscriptionPlan={user.userInfo ? userInfo.subscriptionPlan : ''} />\n                    </Grid>\n                </Container>\n\n                <div>\n                    <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n                        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                            Switching from Premium to Free\n                        </DialogTitle>\n                        <DialogContent dividers>\n                            <Typography gutterBottom>After your premium subscription ends your plan will be automatically switched to free.</Typography>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button autoFocus variant=\"contained\" onClick={handleClose} color=\"primary\">\n                                OK\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                </div>\n            </Paper>\n        </div>\n    );\n}\nexport default connect()(withRouter(SubscriptionPageView));\n"]},"metadata":{},"sourceType":"module"}