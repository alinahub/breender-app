{"ast":null,"code":"import axios from 'axios';\nimport moment from 'moment';\n\nclass AxiosConfiguration {\n  constructor() {\n    this.setNewCancelToken = () => this.cancelSource = axios.CancelToken.source();\n\n    this.getHeader = () => ({\n      Authorization: 'Bearer ' + localStorage['jwtToken'],\n      'Content-Type': 'application/json',\n      'x-timezone-offset': moment().utcOffset()\n    });\n\n    this.cancelSource = axios.CancelToken.source();\n    axios.defaults.baseURL = 'http://localhost:4000';\n  }\n\n  setupInterceptors() {\n    this.setupRequestInterceptor();\n    this.setupResponseInterceptor();\n  } // this should be called right after the login\n\n\n  setupRequestInterceptor() {\n    axios.interceptors.request.use(async config => {\n      if (localStorage['jwtToken'] !== null) {\n        config.headers = this.getHeader();\n      }\n\n      this.setNewCancelToken();\n      config.cancelToken = this.cancelSource.token;\n      return config;\n    }, error => Promise.reject(error));\n  }\n\n  setupResponseInterceptor() {\n    axios.interceptors.response.use(async response => {\n      return response;\n    }, async error => {\n      console.log(error);\n      return Promise.reject(error);\n    });\n  }\n\n}\n\nexport default new AxiosConfiguration();","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/helper/axios.js"],"names":["axios","moment","AxiosConfiguration","constructor","setNewCancelToken","cancelSource","CancelToken","source","getHeader","Authorization","localStorage","utcOffset","defaults","baseURL","setupInterceptors","setupRequestInterceptor","setupResponseInterceptor","interceptors","request","use","config","headers","cancelToken","token","error","Promise","reject","response","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,kBAAN,CAAyB;AACrBC,EAAAA,WAAW,GAAG;AAAA,SAWdC,iBAXc,GAWM,MAAO,KAAKC,YAAL,GAAoBL,KAAK,CAACM,WAAN,CAAkBC,MAAlB,EAXjC;;AAAA,SAadC,SAbc,GAaF,OAAO;AACfC,MAAAA,aAAa,EAAE,YAAYC,YAAY,CAAC,UAAD,CADxB;AAEf,sBAAgB,kBAFD;AAGf,2BAAqBT,MAAM,GAAGU,SAAT;AAHN,KAAP,CAbE;;AACV,SAAKN,YAAL,GAAoBL,KAAK,CAACM,WAAN,CAAkBC,MAAlB,EAApB;AACAP,IAAAA,KAAK,CAACY,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,uBAAL;AACA,SAAKC,wBAAL;AACH,GAToB,CAWrB;;;AASAD,EAAAA,uBAAuB,GAAG;AACtBf,IAAAA,KAAK,CAACiB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,MAAOC,MAAP,IAAuB;AACnB,UAAIV,YAAY,CAAC,UAAD,CAAZ,KAA6B,IAAjC,EAAuC;AACnCU,QAAAA,MAAM,CAACC,OAAP,GAAiB,KAAKb,SAAL,EAAjB;AACH;;AAED,WAAKJ,iBAAL;AACAgB,MAAAA,MAAM,CAACE,WAAP,GAAqB,KAAKjB,YAAL,CAAkBkB,KAAvC;AACA,aAAOH,MAAP;AACH,KATL,EAUKI,KAAD,IAAWC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAVf;AAYH;;AAEDR,EAAAA,wBAAwB,GAAG;AACvBhB,IAAAA,KAAK,CAACiB,YAAN,CAAmBU,QAAnB,CAA4BR,GAA5B,CACI,MAAOQ,QAAP,IAAoB;AAChB,aAAOA,QAAP;AACH,KAHL,EAII,MAAOH,KAAP,IAAiB;AACbI,MAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,KAPL;AASH;;AA7CoB;;AAgDzB,eAAe,IAAItB,kBAAJ,EAAf","sourcesContent":["import axios from 'axios';\nimport moment from 'moment';\n\nclass AxiosConfiguration {\n    constructor() {\n        this.cancelSource = axios.CancelToken.source();\n        axios.defaults.baseURL = 'http://localhost:4000';\n    }\n\n    setupInterceptors() {\n        this.setupRequestInterceptor();\n        this.setupResponseInterceptor();\n    }\n\n    // this should be called right after the login\n    setNewCancelToken = () => (this.cancelSource = axios.CancelToken.source());\n\n    getHeader = () => ({\n        Authorization: 'Bearer ' + localStorage['jwtToken'],\n        'Content-Type': 'application/json',\n        'x-timezone-offset': moment().utcOffset(),\n    });\n\n    setupRequestInterceptor() {\n        axios.interceptors.request.use(\n            async (config: any) => {\n                if (localStorage['jwtToken'] !== null) {\n                    config.headers = this.getHeader();\n                }\n\n                this.setNewCancelToken();\n                config.cancelToken = this.cancelSource.token;\n                return config;\n            },\n            (error) => Promise.reject(error)\n        );\n    }\n\n    setupResponseInterceptor() {\n        axios.interceptors.response.use(\n            async (response) => {\n                return response;\n            },\n            async (error) => {\n                console.log(error)\n                return Promise.reject(error);\n            }\n        );\n    }\n}\n\nexport default new AxiosConfiguration();\n"]},"metadata":{},"sourceType":"module"}