{"ast":null,"code":"var _jsxFileName = \"/Users/alinaturbina/Uni Projects/seba/frontend/src/components/PaymentInformation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper, FormControl, RadioGroup, FormControlLabel, Radio, Typography, Button } from '@material-ui/core';\nimport { PayPalScriptProvider, PayPalButtons } from '@paypal/react-paypal-js';\nimport { connect } from 'react-redux';\nimport NotificationService from 'services/NotificationService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  usersignUpRoot: {\n    margin: 'auto'\n  },\n  signUpPaper: {\n    width: '1000px',\n    padding: theme.spacing(2)\n  },\n  signUpRow: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n    '&:last-child': {\n      paddingBottom: theme.spacing(0)\n    },\n    '&:first-child': {\n      paddingTop: theme.spacing(0)\n    }\n  },\n  signUpButtons: {\n    display: 'flex',\n    justifyContent: 'flex-end'\n  },\n  signUpButton: {\n    marginLeft: theme.spacing(1)\n  }\n}));\n/**\n * For payment info and registering a new user\n * @param {props} props\n */\n\nfunction PaymentInformationComponent(props) {\n  _s();\n\n  const classes = useStyles();\n  const options = {\n    'client-id': 'AU51gVXV29PQQgKgUCipVcv_d6ZEVCHUJH0AwBCBb3ey5faoUa-NdJ8eqWdl-aZysrDrCmf3Dy3EPsdX',\n    currency: 'EUR'\n  };\n  const values = props.values;\n\n  const onError = err => {\n    NotificationService.notify('error', 'Error', 'There was an error in PayPal payment. Please try again.');\n  };\n\n  function onRegister(paymentMethod) {\n    const paymentPlan = props.payments.find(x => x.price === props.values.chosenPayment);\n    props.onRegister(values.email, values.username, values.password, values.city, values.province, values.isAdmin, values.subscriptionPlan, paymentPlan.plan, paymentMethod);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.usersignUpRoot,\n    align: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.signUpPaper,\n      component: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.signUpRow,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          children: \"Choose payment plan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.signUpRow,\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          component: \"fieldset\",\n          children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n            \"aria-label\": \"plan\",\n            value: props.values.chosenPayment,\n            onChange: e => props.handleChange('chosenPayment', e),\n            id: \"payment\",\n            children: props.payments.map(payment => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: payment.price,\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 82\n              }, this),\n              label: payment.description\n            }, payment.price, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.signUpRow,\n        children: /*#__PURE__*/_jsxDEV(PayPalScriptProvider, {\n          options: options,\n          children: /*#__PURE__*/_jsxDEV(PayPalButtons, {\n            forceReRender: [props.values.chosenPayment] //rerender paypal button every time payment plan changes: ensures that plan_id is correct\n            ,\n            style: {\n              layout: 'horizontal'\n            },\n            createOrder: (data, actions) => {\n              return actions.order.create({\n                purchase_units: [{\n                  description: \"Breender Premium Subscription\",\n                  amount: {\n                    value: props.values.chosenPayment\n                  }\n                }]\n              });\n            },\n            onApprove: async (data, actions) => {\n              actions.order.capture().then(details => {\n                const paymentMethod = {\n                  type: \"PayPal\",\n                  email: details.payer.email_address\n                };\n                onRegister(paymentMethod);\n              });\n            },\n            onError: onError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.signUpRow + ' ' + classes.signUpButtons,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.signUpButton,\n          onClick: props.prevStep,\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PaymentInformationComponent, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = PaymentInformationComponent;\nexport default connect()(PaymentInformationComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentInformationComponent\");","map":{"version":3,"sources":["/Users/alinaturbina/Uni Projects/seba/frontend/src/components/PaymentInformation.js"],"names":["React","useEffect","makeStyles","Paper","FormControl","RadioGroup","FormControlLabel","Radio","Typography","Button","PayPalScriptProvider","PayPalButtons","connect","NotificationService","useStyles","theme","usersignUpRoot","margin","signUpPaper","width","padding","spacing","signUpRow","paddingTop","paddingBottom","signUpButtons","display","justifyContent","signUpButton","marginLeft","PaymentInformationComponent","props","classes","options","currency","values","onError","err","notify","onRegister","paymentMethod","paymentPlan","payments","find","x","price","chosenPayment","email","username","password","city","province","isAdmin","subscriptionPlan","plan","e","handleChange","map","payment","description","layout","data","actions","order","create","purchase_units","amount","value","capture","then","details","type","payer","email_address","prevStep"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,UAA7B,EAAyCC,gBAAzC,EAA2DC,KAA3D,EAAkEC,UAAlE,EAA8EC,MAA9E,QAA4F,mBAA5F;AACA,SAASC,oBAAT,EAA+BC,aAA/B,QAAoD,yBAApD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;;AAEA,MAAMC,SAAS,GAAGZ,UAAU,CAAEa,KAAD,KAAY;AACrCC,EAAAA,cAAc,EAAE;AACZC,IAAAA,MAAM,EAAE;AADI,GADqB;AAIrCC,EAAAA,WAAW,EAAE;AACTC,IAAAA,KAAK,EAAE,QADE;AAETC,IAAAA,OAAO,EAAEL,KAAK,CAACM,OAAN,CAAc,CAAd;AAFA,GAJwB;AAQrCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,UAAU,EAAER,KAAK,CAACM,OAAN,CAAc,CAAd,CADL;AAEPG,IAAAA,aAAa,EAAET,KAAK,CAACM,OAAN,CAAc,CAAd,CAFR;AAGP,oBAAgB;AACZG,MAAAA,aAAa,EAAET,KAAK,CAACM,OAAN,CAAc,CAAd;AADH,KAHT;AAMP,qBAAiB;AACbE,MAAAA,UAAU,EAAER,KAAK,CAACM,OAAN,CAAc,CAAd;AADC;AANV,GAR0B;AAkBrCI,EAAAA,aAAa,EAAE;AACXC,IAAAA,OAAO,EAAE,MADE;AAEXC,IAAAA,cAAc,EAAE;AAFL,GAlBsB;AAsBrCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,UAAU,EAAEd,KAAK,CAACM,OAAN,CAAc,CAAd;AADF;AAtBuB,CAAZ,CAAD,CAA5B;AA2BA;AACA;AACA;AACA;;AACA,SAASS,2BAAT,CAAqCC,KAArC,EAA4C;AAAA;;AACxC,QAAMC,OAAO,GAAGlB,SAAS,EAAzB;AAEA,QAAMmB,OAAO,GAAG;AACZ,iBAAa,kFADD;AAEZC,IAAAA,QAAQ,EAAE;AAFE,GAAhB;AAKA,QAAMC,MAAM,GAAGJ,KAAK,CAACI,MAArB;;AAEA,QAAMC,OAAO,GAAIC,GAAD,IAAS;AACrBxB,IAAAA,mBAAmB,CAACyB,MAApB,CAA2B,OAA3B,EAAoC,OAApC,EAA6C,yDAA7C;AACH,GAFD;;AAIA,WAASC,UAAT,CAAoBC,aAApB,EAAmC;AAC/B,UAAMC,WAAW,GAAGV,KAAK,CAACW,QAAN,CAAeC,IAAf,CAAqBC,CAAC,IAAIA,CAAC,CAACC,KAAF,KAAYd,KAAK,CAACI,MAAN,CAAaW,aAAnD,CAApB;AACAf,IAAAA,KAAK,CAACQ,UAAN,CAAiBJ,MAAM,CAACY,KAAxB,EAA+BZ,MAAM,CAACa,QAAtC,EAAgDb,MAAM,CAACc,QAAvD,EAAiEd,MAAM,CAACe,IAAxE,EAA8Ef,MAAM,CAACgB,QAArF,EAA+FhB,MAAM,CAACiB,OAAtG,EAA+GjB,MAAM,CAACkB,gBAAtH,EAAwIZ,WAAW,CAACa,IAApJ,EAA0Jd,aAA1J;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAER,OAAO,CAAChB,cAAxB;AAAwC,IAAA,KAAK,EAAC,QAA9C;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,SAAS,EAAEgB,OAAO,CAACd,WAA1B;AAAuC,MAAA,SAAS,EAAC,MAAjD;AAAA,8BACI;AAAK,QAAA,SAAS,EAAEc,OAAO,CAACV,SAAxB;AAAA,+BACI,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI;AAAK,QAAA,SAAS,EAAEU,OAAO,CAACV,SAAxB;AAAA,+BACI,QAAC,WAAD;AAAa,UAAA,SAAS,EAAC,UAAvB;AAAA,iCACI,QAAC,UAAD;AAAY,0BAAW,MAAvB;AAA8B,YAAA,KAAK,EAAES,KAAK,CAACI,MAAN,CAAaW,aAAlD;AAAiE,YAAA,QAAQ,EAAGS,CAAD,IAAOxB,KAAK,CAACyB,YAAN,CAAmB,eAAnB,EAAoCD,CAApC,CAAlF;AAA0H,YAAA,EAAE,EAAC,SAA7H;AAAA,sBACKxB,KAAK,CAACW,QAAN,CAAee,GAAf,CAAoBC,OAAD,iBAChB,QAAC,gBAAD;AAAkB,cAAA,KAAK,EAAEA,OAAO,CAACb,KAAjC;AAAwC,cAAA,OAAO,eAAE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,sBAAjD;AAA4D,cAAA,KAAK,EAAEa,OAAO,CAACC;AAA3E,eAA6FD,OAAO,CAACb,KAArG;AAAA;AAAA;AAAA;AAAA,oBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cANJ,eAeI;AAAK,QAAA,SAAS,EAAEb,OAAO,CAACV,SAAxB;AAAA,+BACI,QAAC,oBAAD;AAAsB,UAAA,OAAO,EAAEW,OAA/B;AAAA,iCACI,QAAC,aAAD;AAAe,YAAA,aAAa,EAAE,CAACF,KAAK,CAACI,MAAN,CAAaW,aAAd,CAA9B,CAA4D;AAA5D;AACI,YAAA,KAAK,EAAE;AAAEc,cAAAA,MAAM,EAAE;AAAV,aADX;AAEI,YAAA,WAAW,EAAE,CAACC,IAAD,EAAOC,OAAP,KAAmB;AAC5B,qBAAOA,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqB;AACxBC,gBAAAA,cAAc,EAAE,CAAC;AACfN,kBAAAA,WAAW,EAAE,+BADE;AAEfO,kBAAAA,MAAM,EAAE;AACNC,oBAAAA,KAAK,EAAEpC,KAAK,CAACI,MAAN,CAAaW;AADd;AAFO,iBAAD;AADQ,eAArB,CAAP;AAQH,aAXL;AAYI,YAAA,SAAS,EAAE,OAAOe,IAAP,EAAaC,OAAb,KAAyB;AAChCA,cAAAA,OAAO,CAACC,KAAR,CAAcK,OAAd,GAAwBC,IAAxB,CAA6BC,OAAO,IAAI;AACpC,sBAAM9B,aAAa,GAAG;AACpB+B,kBAAAA,IAAI,EAAE,QADc;AAEpBxB,kBAAAA,KAAK,EAAEuB,OAAO,CAACE,KAAR,CAAcC;AAFD,iBAAtB;AAIAlC,gBAAAA,UAAU,CAACC,aAAD,CAAV;AAEP,eAPG;AAOD,aApBP;AAqBI,YAAA,OAAO,EAAEJ;AArBb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAfJ,eA0CI;AAAK,QAAA,SAAS,EAAEJ,OAAO,CAACV,SAAR,GAAoB,GAApB,GAA0BU,OAAO,CAACP,aAAlD;AAAA,+BACI,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAEO,OAAO,CAACJ,YAA3B;AAAyC,UAAA,OAAO,EAAEG,KAAK,CAAC2C,QAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cA1CJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAoDH;;GAvEQ5C,2B;UACWhB,S;;;KADXgB,2B;AAyET,eAAelB,OAAO,GAAGkB,2BAAH,CAAtB","sourcesContent":["import React, {useEffect }from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper, FormControl, RadioGroup, FormControlLabel, Radio, Typography, Button } from '@material-ui/core';\nimport { PayPalScriptProvider, PayPalButtons } from '@paypal/react-paypal-js';\nimport { connect } from 'react-redux';\nimport NotificationService from 'services/NotificationService';\n\nconst useStyles = makeStyles((theme) => ({\n    usersignUpRoot: {\n        margin: 'auto',\n    },\n    signUpPaper: {\n        width: '1000px',\n        padding: theme.spacing(2),\n    },\n    signUpRow: {\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        '&:last-child': {\n            paddingBottom: theme.spacing(0),\n        },\n        '&:first-child': {\n            paddingTop: theme.spacing(0),\n        },\n    },\n    signUpButtons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    signUpButton: {\n        marginLeft: theme.spacing(1),\n    },\n}));\n\n/**\n * For payment info and registering a new user\n * @param {props} props\n */\nfunction PaymentInformationComponent(props) {\n    const classes = useStyles();\n\n    const options = {\n        'client-id': 'AU51gVXV29PQQgKgUCipVcv_d6ZEVCHUJH0AwBCBb3ey5faoUa-NdJ8eqWdl-aZysrDrCmf3Dy3EPsdX',\n        currency: 'EUR',\n    };\n\n    const values = props.values;\n\n    const onError = (err) => {\n        NotificationService.notify('error', 'Error', 'There was an error in PayPal payment. Please try again.');\n    }\n\n    function onRegister(paymentMethod) {\n        const paymentPlan = props.payments.find( x => x.price === props.values.chosenPayment);\n        props.onRegister(values.email, values.username, values.password, values.city, values.province, values.isAdmin, values.subscriptionPlan, paymentPlan.plan, paymentMethod);\n    }\n\n    return (\n        <div className={classes.usersignUpRoot} align=\"center\">\n            <Paper className={classes.signUpPaper} component=\"form\">\n                <div className={classes.signUpRow}>\n                    <Typography variant=\"h4\">\n                        Choose payment plan\n                    </Typography>\n                </div>\n                <div className={classes.signUpRow}>\n                    <FormControl component=\"fieldset\">\n                        <RadioGroup aria-label=\"plan\" value={props.values.chosenPayment} onChange={(e) => props.handleChange('chosenPayment', e)} id=\"payment\">\n                            {props.payments.map((payment) => (\n                                <FormControlLabel value={payment.price} control={<Radio />} label={payment.description} key={payment.price}/>\n                            ))}\n                        </RadioGroup>\n                    </FormControl>\n                </div>\n                <div className={classes.signUpRow}>\n                    <PayPalScriptProvider options={options}>\n                        <PayPalButtons forceReRender={[props.values.chosenPayment]} //rerender paypal button every time payment plan changes: ensures that plan_id is correct\n                            style={{ layout: 'horizontal' }}\n                            createOrder={(data, actions) => {\n                                return actions.order.create({\n                                    purchase_units: [{\n                                      description: \"Breender Premium Subscription\",\n                                      amount: {\n                                        value: props.values.chosenPayment\n                                      }\n                                    }]\n                                  });\n                            }}\n                            onApprove={async (data, actions) => {\n                                actions.order.capture().then(details => {\n                                    const paymentMethod = {\n                                      type: \"PayPal\",\n                                      email: details.payer.email_address\n                                    };\n                                    onRegister(paymentMethod);\n                                \n                            })}}\n                            onError={onError}\n                        />\n                    </PayPalScriptProvider>\n                </div>\n                <div className={classes.signUpRow + ' ' + classes.signUpButtons}>\n                    <Button className={classes.signUpButton} onClick={props.prevStep}>\n                        Back\n                    </Button>\n                </div>\n            </Paper>\n        </div>\n    );\n}\n\nexport default connect()(PaymentInformationComponent);\n"]},"metadata":{},"sourceType":"module"}